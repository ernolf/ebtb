__shebang_bash__
__path_and_scriptname__
__version_and_datestring__
#
__copyright__
#
__license__
#

__scriptname__

dependencies=(
    "gpg#gnupg#GNU Privacy Guard"
    "jq#jq#command-line JSON processor"
)
modules=(
    basics sed tempfile ansi exit anykey line array sudo ask dependency vdir
    integrity nc/nextcloud xml $sin/functions
)

__when__

__whoami_whereami__

__vdirname__

### general (minified)
__general__
## include bashmodules (minified) ->
__module_loader__
# check module integrity if root is running script and remove tainted modules (minified)
__module_integrity__
## <- include bashmodules end #

__nextcloud_updater__

declare -i min_token_length default_token_length max_token_length
min_token_length=4
default_token_length=15
max_token_length=32
declare file_of_server="/lib/private/Share/Constants.php"
declare -l choice

declare help=false
shopt -s extglob
case $1 in
    ?(-|--)@(h|H|help))help=true;;
    ?(-|--)@(r|reset|d|default))(($(get_length)==default_token_length))||set_length $default_token_length;exit;;
    [1-9]?([0-9]))(($1==$(get_length)))||{ (($1>=min_token_length&&$1<=max_token_length))&&set_length $1||invalid_argument $1;};exit 0;;
    '') :;;*)invalid_argument $1;exit 1
esac
shopt -u extglob

if $help; then
    [ "$(which `basename $0`)" = "$0" ] && me="`basename $0`" || me="$0"
    cat <<HELP

  This script looks up for the hardcoded sharetoken length on your nextcloud
  server instance and gives you the means to change it.

  Usage

    interactive mode:
          $me

    batch mode:
          $me [ ((-)-)h|((-)-)H|((-)-)help ]
          $me [ ((-)-)r|((-)-)reset|((-)-)d|((-)-)default ]
          $me [ $min_token_length-$max_token_length ]


  Options:
      options can be passed with or without preceded '-' or '--'
          h|H|help                This help
          r|reset|d|default       reset to default ($default_token_length)

  Tokenlength for batch mode:
          $min_token_length - $max_token_length                  Set tokenlength to this value

HELP
    exit 0
fi

f
o2;B;echo "This script looks up for the hardcoded sharetoken length on your nextcloud"
o2;echo "server instance and gives you the means to change it."
f
o2;echo "The actual sharetoken length is set to $(Y)${old_value:=$(get_length)}$(B), which results in";N
f
o2;echo "$(o5;C;calculate_variations $old_value;N;f;o2;B)different possible variations";N
f
declare prompt="$(o2;B)Enter new value ($(N;GRAY)keep empty for no change$(N;B)): $(N)"
read -p "$prompt" new_value
while [ -n "$new_value" ] && ! is_valid_integer "$new_value"; do
    o2;B;echo "Invalid input. Please enter a valid integer."
    read -p "$prompt" new_value
done

if [ -n "$new_value" ] && ((new_value<min_token_length)); then
    f
    o2;B;echo "The token length must be at least $min_token_length, as this is specified in"
    o2;echo "the min_token_length variable in line $(grep -n ^min_token_length= $0 | cut -d ':' -f 1) of this script."
    new_value=$min_token_length
elif [ -n "$new_value" ] && ((new_value>max_token_length)); then
    f
    o2;B;echo "The token length must not exceed $max_token_length, as this is specified in"
    o2;echo "the max_token_length variable in line $(grep -n ^max_token_length= $0 | cut -d ':' -f 1) of this script."
    new_value=$max_token_length
fi

if [ ${new_value:-$old_value} -ne $old_value ]; then
    o2;B;echo "Set token length to $(Y)$new_value$(B)? That would results in"
    f
    o5;C;echo "$(calculate_variations $new_value)"
    o2;B;echo "different possible variations"
    f
    read -p "$(o2)Please confirm with $(button ' y ') or accept the default rejection: [$(lG)y$(B)/$(R)N$(B)] $(N)" choice
    if [ "${choice:-n}" = "y" ]; then
        set_length $new_value
    fi
fi

exit0


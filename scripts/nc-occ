__shebang_bash__
__path_and_scriptname__
__version_and_datestring__
#
__copyright__
#
__license__
#

__whoami_whereami__
__scriptname__
# TODO 0 -->
#modules=(
#    binaries basics awksed tempfile ansi filter prefix button fstring exit
#    spinner anykey line array ask sudo dependency vdir integrity nc/nextcloud
#)
# TODO <-- 0
modules=(fstring nc/nextcloud)
__debug__
__when__
__vdirname__
__tempdir__
__module_server__
__general__
__module_loader__
__module_integrity__
__nextcloud_updater__

contribute_(){
    . <(require contribute)
    contribute "https://help.nextcloud.com/t/script-nc-occ-interactive-occ-interface/195249"
}; donate_(){ contribute_;}
[[ "$@" =~ (donat|contrib) ]] && contribute_

# Directory containing the JSON output from 'occ list --format=json'
[[ -d ${D[occ]:=${D[vt]}/nc-occ-data} ]] || ${C[mw]} "${D[occ]}"
q0 ${X[chown]} -R "${NC[u]}":"${NC[u]}" "${D[occ]}"

# time in seconds during which the JSON object file is not updated
T[jttl]=300 # <- do not move this

# Bools to include all options and help option
B[include_all_options]=_
B[include_help]=_
B[help]=_

# Check for the arguments to include all options or just the help option
for x in "$@"; do
    case "$x" in
        -u|--update) T[jttl]=0                ;;
   -a|--all_options) B[include_all_options]=: ;;
        --show_help) B[include_help]=:        ;;
          -h|--help) B[help]=: T[jttl]=$(${X[grep]} -oP '^T\[jttl\]=\K\d+' $MP)
                     break
    esac
done

help_(){
    cat << HELP

    $(C)Simply run$(N)

        $(O)$ME$(N)

    $(G)to create your occ commands interactively.$(N)

    $(C)Possible options:$(N)

        $(O)-h $(GRAY)| $(O)--help$(N)
                $(o 17; GRAY; format_string "show this help message and exit" 17; N)
        $(O)-a $(GRAY)| $(O)--all_options$(N)
                $(o 17; GRAY; format_string "include the unimportant options $(W)help$(GRAY), $(W)quiet$(GRAY), $(W)verbose$(GRAY), $(W)version$(GRAY), $(W)ansi$(GRAY), $(W)no-ansi$(GRAY), $(W)no-interaction$(GRAY) and $(W)no-warnings" 17; N)
        $(O)-u $(GRAY)| $(O)--update$(N)
                $(o 17; GRAY; format_string "force an immediate update of the JSON object file" 17; N)
              $(Yi)Note: $(o 20; Y; format_string "The TTL of the JSON object file is $(C)${T[jttl]}$(Y) seconds. It contains the output of $(GRAY)\`$(C)occ list --format=json$(GRAY)\`$(Y), which in turn is used as the basis for the command-line structure of the occ commands created by this script." 20; N)
                    $(o 20; Y; format_string "If apps were installed, removed, or modified or the debug level in the config.php was changed within this time period, this option must be used to ensure that these changes are taken into account." 20; N)
        $(O)--show_help$(N)
                $(o 17; GRAY; format_string "show the help output from the commands instead of brief usage message" 17; N)

HELP
exit0
}
${B[help]} && help_

create_json_object(){
    local -i joe
    [[ -f "${F[occj]:=${D[occ]}/occ_commands.json}" ]] && joe=$(${X[stat]} -c %Z ${F[occj]})
    if (( T[rte] - joe > T[jttl] )); then
        occ list --format=json > "${F[occj]}"
    fi
    ${X[chown]} "${NC[u]}":"${NC[u]}" "${F[occj]}"
    ${X[chmod]} -f 666 "${F[occj]}"
}

# Function to display a menu and select an option
show_menu(){
    local -i i number_of_options level=$1
    shift
    local -a options=("$@")
    local prompt choice
    number_of_options=${#option[@]}
    echo "Please choose an option:"
    f
    for i in "${!options[@]}"; do
        pf; printf "%2d. %s\n" $(( i + 1 )) "${options[i]}"
    done
    if (( level > 1 )); then
        prompt="Your choice ($(r2r), $(q2q))"
    else
        prompt="Your choice ($(q2q))"
    fi
    f
    read -p "$prompt: " choice
    case "$choice" in
        r)  if (( level > 1 )); then
                $CMA
                exit 0
            fi
            ;;
        q)  exit0
            ;;
        *)  separator
            return $(( choice - 1 ))
    esac
}

# Function to parse the JSON file and create the menu
parse_json(){
    local -i level
    local special_commands selected_command choice description usage
    local -a special_options general_options options
    level=${1:-0} special_commands="check|completion|help|list|setupchecks|status|upgrade"

    if (( level == 1 )); then
        # List main categories, including special commands first
        mapfile -t special_options< <(${X[jq]} -r '.commands[].name' "${F[occj]}" | ${X[grep]} -E "^($special_commands)$" | ${X[sort]})
        mapfile -t general_options< <(${X[jq]} -r '.commands[].name | split(":")[0]' "${F[occj]}" | ${X[grep]} -Ev "^($special_commands)$" | ${X[grep]} -v '^_' | ${X[sort]} -u)
        options=("${special_options[@]}" "${general_options[@]}")
    else
        # List commands of the selected category
        local category="$2"
        mapfile -t options< <(${X[jq]} -r --arg category "$category" '.commands[] | select(.name | startswith($category + ":")) | .name' "${F[occj]}" | ${X[grep]} -v '^_' | ${X[sort]} -u)
    fi

    show_menu $level "${options[@]}"
    choice=$?

    if [[ "${options[choice]}" =~ ^($special_commands)$ ]]; then
        selected_command=${options[choice]}
        pf; echo "Command$(o 15;Yi)$selected_command"; N
        if "${B[include_help]}"; then
            execute_command "$selected_command" --help
        else
            execute_command "$selected_command"
        fi
    elif (( level == 1 )); then
        parse_json 2 "${options[choice]}"
    else
        selected_command=${options[choice]}
        pf; echo "Command$(o 15; Yi)$selected_command"; N
        if "${B[include_help]}"; then
            # long help
            # execute_command "$selected_command" --help
            pf; echo "Help"
            occ "$selected_command" --help | ${X[gawk]} '{print "   " $0}'
        else
            # brief usage message
            description="$(${X[jq]} -r --arg command "$selected_command" '.commands[] | select(.name == $command) | .description' "${F[occj]}")"
            usage="$(${X[jq]} -r --arg command "$selected_command" '.commands[] | select(.name == $command) | .usage[]' "${F[occj]}")"
            o3; GRAY; echo "Description$(N; o 15; format_string "$description" 15)"
            o3; GRAY; echo "Usage$(N; o 15; format_string "$usage" 15)"
        fi
#        parse_arguments "$selected_command"
        parse_options "$selected_command"
    fi
}

# Function to parse and select arguments
parse_arguments(){
    local command arguments description is_required
    local -a selected_options selected_arguments
    command=$1
    shift
    selected_options=("$@")

    mapfile -t arguments < <(${X[jq]} -r --arg command "$command" '.commands[] | select(.name == $command) | .definition.arguments | to_entries[] | .key' "${F[occj]}")

    for argument in "${arguments[@]}"; do
        description=$(${X[jq]} -r --arg command "$command" --arg argument "$argument" '.commands[] | select(.name == $command) | .definition.arguments[$argument].description' "${F[occj]}")
        is_required=$(${X[jq]} -r --arg command "$command" --arg argument "$argument" '.commands[] | select(.name == $command) | .definition.arguments[$argument].is_required' "${F[occj]}")

        separator
        pf; echo "Argument$(o 15)$argument"
        o3; GRAY; echo "Description$(N; o 15)$description"
        f
        if [[ $is_required == "true" ]]; then
            read -p "Enter the value for $argument: " value
            selected_arguments+=("$value")
        else
            if ask "$(qpf)Do you want to provide a value for $argument" "$Yes"; then
                read -p "Enter the value for $argument: " value
                selected_arguments+=("$value")
            fi
        fi
    done
    f
    if (( "${#selected_arguments[@]}" )); then
        execute_command "$command" "${selected_options[@]}" -- "${selected_arguments[@]}"
    else
        execute_command "$command" "${selected_options[@]}"
    fi
}

# Function to display and select options
parse_options(){
    local command unimportant_options option description accept_value default
    local -a options selected_options
    command=$1
    unimportant_options="help|quiet|verbose|version|ansi|no-ansi|no-interaction|no-warnings"

    if "${B[include_all_options]}"; then
        # Include all options
        mapfile -t options < <(${X[jq]} -r --arg command "$command" '.commands[] | select(.name == $command) | .definition.options | to_entries[] | .key' "${F[occj]}")
    else
        # Exclude common options
        mapfile -t options < <(${X[jq]} -r --arg command "$command" '.commands[] | select(.name == $command) | .definition.options | to_entries[] | .key' "${F[occj]}" | ${X[grep]} -Ev "^($unimportant_options)$")
    fi

    for option in "${options[@]}"; do
        accept_value=$(${X[jq]} -r --arg command "$command" --arg option "$option" '.commands[] | select(.name == $command) | .definition.options[$option].accept_value' "${F[occj]}")
        description=$(${X[jq]} -r --arg command "$command" --arg option "$option" '.commands[] | select(.name == $command) | .definition.options[$option].description' "${F[occj]}")
        default=$(${X[jq]} -r --arg command "$command" --arg option "$option" '.commands[] | select(.name == $command) | .definition.options[$option].default' "${F[occj]}")

        separator
        pf; echo "Option$(o 15)--$option"
        o3; GRAY;echo "Description$(N; o 15)$description"
        if [[ $default != "null" ]]; then
            o3; GRAY;echo "Default$(N; o 15)$default"
        fi
        f
        if [[ $accept_value == "true" ]]; then
            if ask "$(qpf)Do you want to set this option" "$NO" "$Yes"; then
                if [[ $default != "null" ]]; then
                    o3; read -p "Enter the value (default: $default): " value
                    value=${value:-$default}
                else
                    o3; read -p "Enter the value: " value
                fi
                selected_options+=("--$option=$value")
            fi
        else
            if ask "$(qpf)Do you want to enable this option" "$NO" "$Yes"; then
                selected_options+=("--$option")
            fi
        fi
    done
    parse_arguments "$selected_command" "${selected_options[@]}"
#    execute_command "$command" "${selected_options[@]}"
}

# Function to execute the full command
execute_command(){
    local command options
    command="$1"
    shift
    options=("$@")

    echo "Execute the command: occ $command ${options[@]}"
    f
    anykey execute
    occ "$command" "${options[@]}"
}

# Main
create_json_object
parse_json 1

exit0


__shebang_bash__
__path_and_scriptname__
__version_and_datestring__
#
__copyright__
#
__license__
#

__scriptname__

dependencies=(
    "curl#curl#Command line file transfer tool with URL syntax"
    "gpg#gnupg#GNU Privacy Guard"
    "jq#jq#Command line JSON processor"
    "php#php-cli#PHP Commandline Interface"
)
modules=(
    basics sed tempfile ansi prefix button fstring exit spinner anykey line
    array ask sudo dependency vdir integrity nc/nextcloud
)

__when__

__whoami_whereami__

__vdirname__
__tempdir__

### module handling (minified)
__module_server__
## general
__general__
## include bashmodules (minified) ->
__module_loader__
# check module integrity if root is running script and remove tainted modules (minified)
__module_integrity__
## <- include bashmodules end #

__nextcloud_updater__

donate_(){
    . <(require donate)
    donate "https://help.nextcloud.com/t/script-nc-occ-interactive-occ-interface/195249"
}
for arg in "$@";do [[ "$arg" =~ donate ]] && donate_; done; unset -v arg

declare JSON_FILE arg INCLUDE_ALL_OPTIONS INCLUDE_HELP HELP

# File containing the JSON output from 'occ list --format=json'
JSON_FILE="$TMPDIR/$bm-tmp/occ_commands.json"
# Flags to include all options and help option
INCLUDE_ALL_OPTIONS=false
INCLUDE_HELP=false
HELP=false

# Check for the arguments to include all options or just the help option
for arg in "$@"; do
    case $arg in
        -a|--all_options)
            INCLUDE_ALL_OPTIONS=true
            ;;
        --show_help)
            INCLUDE_HELP=true
            ;;
        -h|--help)
            HELP=true
            ;;
    esac
done

help_(){
    cat << HELP

    Simply run

        $me

    to create your occ commands interactively.

    Possible options:

        -h | --help
                this help message
        -a | --all_options
                include the unimportant options
                help, quiet, verbose, version, ansi, no-ansi, no-interaction, no-warnings
        --show_help
                show the help output from the commands instead of brief usage message

HELP
exit0
}
$HELP&&help_

create_json_object(){
    local -i joe
    [ -d "${JSON_FILE%/*}" ]||mkdir -p "${JSON_FILE%/*}"
    [ -f "$JSON_FILE" ]&&joe=$(stat -c %Z $JSON_FILE)
    if ((rte-joe>900)); then
        occ list --format=json > "$JSON_FILE"
    fi
}

# Function to display a menu and select an option
show_menu() {
    local -i i number_of_options level=$1
    shift
    local -a options=("$@")
    local prompt choice
    number_of_options=${#option[@]}
    
    echo "Please choose an option:"
    f
    for i in "${!options[@]}"; do
        pf;printf "%2d. %s\n" $((i + 1)) "${options[i]}"
    done
    if ((level > 1)); then
        prompt="Your choice ($(r2r), $(q2q))"
    else
        prompt="Your choice ($(q2q))"
    fi
    f
    read -p "$prompt: " choice
    case $choice in
        r)  if ((level > 1)); then
                "$me" "json=$my_json" $my_args
                exit 0
            fi
            ;;
        q)  exit0
            ;;
        *)  separator
            return $((choice - 1))
    esac
}

# Function to parse the JSON file and create the menu
parse_json() {
    local -i level=$1
    local special_commands selected_command choice description usage
    local -a special_options general_options options
    special_commands="check|completion|help|list|setupchecks|status|upgrade"

    if (( level == 1 )); then
        # List main categories, including special commands first
        mapfile -t special_options< <(jq -r '.commands[].name' "$JSON_FILE" | grep -E "^($special_commands)$" | sort)
        mapfile -t general_options< <(jq -r '.commands[].name | split(":")[0]' "$JSON_FILE" | grep -Ev "^($special_commands)$" | grep -v '^_' | sort -u)
        options=("${special_options[@]}" "${general_options[@]}")
    else
        # List commands of the selected category
        local category=$2
        mapfile -t options< <(jq -r --arg category "$category" '.commands[] | select(.name | startswith($category + ":")) | .name' "$JSON_FILE" | grep -v '^_' | sort -u)
    fi

    show_menu $level "${options[@]}"
    choice=$?

    if [[ "${options[choice]}" =~ ^($special_commands)$ ]]; then
        selected_command=${options[choice]}
        pf;echo "Command$(o 15;Yi)$selected_command";N
        if [[ "$INCLUDE_HELP" == true ]]; then
            execute_command "$selected_command" --help
        else
            execute_command "$selected_command"
        fi
    elif (( level == 1 )); then
        parse_json 2 "${options[choice]}"
    else
        selected_command=${options[choice]}
        pf;echo "Command$(o 15;Yi)$selected_command";N
        if [[ "$INCLUDE_HELP" == true ]]; then
            # long help
            # execute_command "$selected_command" --help
            pf;echo "Help"
            occ "$selected_command" --help | awk '{print "   " $0}'
        else
            # brief usage message
            description="$(jq -r --arg command "$selected_command" '.commands[] | select(.name == $command) | .description' "$JSON_FILE")"
            usage="$(jq -r --arg command "$selected_command" '.commands[] | select(.name == $command) | .usage[]' "$JSON_FILE")"
            o3;GRAY;echo "Description$(N;o 14;format_string "$description" 15)"
            o3;GRAY;echo "Usage$(N;o 14;format_string "$usage" 15)"
        fi
#        parse_arguments "$selected_command"
        parse_options "$selected_command"
    fi
}

# Function to parse and select arguments
parse_arguments() {
    local command arguments description is_required
    local -a selected_options selected_arguments
    command=$1
    shift
    selected_options=("$@")

    mapfile -t arguments < <(jq -r --arg command "$command" '.commands[] | select(.name == $command) | .definition.arguments | to_entries[] | .key' "$JSON_FILE")

    for argument in "${arguments[@]}"; do
        description=$(jq -r --arg command "$command" --arg argument "$argument" '.commands[] | select(.name == $command) | .definition.arguments[$argument].description' "$JSON_FILE")
        is_required=$(jq -r --arg command "$command" --arg argument "$argument" '.commands[] | select(.name == $command) | .definition.arguments[$argument].is_required' "$JSON_FILE")

        separator
        pf;echo "Argument$(o 15)$argument"
        o3;GRAY;echo "Description$(N;o 15)$description"
        f
        if [[ $is_required == "true" ]]; then
            read -p "Enter the value for $argument: " value
            selected_arguments+=("$value")
        else
            if ask "$(qpf)Do you want to provide a value for $argument" $Yes; then
                read -p "Enter the value for $argument: " value
                selected_arguments+=("$value")
            fi
        fi
    done
    f
    if (( "${#selected_arguments[@]}" )); then
        execute_command "$command" "${selected_options[@]}" -- "${selected_arguments[@]}"
    else
        execute_command "$command" "${selected_options[@]}"
    fi
}

# Function to display and select options
parse_options() {
    local command unimportant_options option description accept_value default
    local -a options selected_options
    command=$1
    unimportant_options="help|quiet|verbose|version|ansi|no-ansi|no-interaction|no-warnings"

    if [[ "$INCLUDE_ALL_OPTIONS" == true ]]; then
        # Include all options
        mapfile -t options < <(jq -r --arg command "$command" '.commands[] | select(.name == $command) | .definition.options | to_entries[] | .key' "$JSON_FILE")
    else
        # Exclude common options
        mapfile -t options < <(jq -r --arg command "$command" '.commands[] | select(.name == $command) | .definition.options | to_entries[] | .key' "$JSON_FILE" | grep -Ev "^($unimportant_options)$")
    fi

    for option in "${options[@]}"; do
        accept_value=$(jq -r --arg command "$command" --arg option "$option" '.commands[] | select(.name == $command) | .definition.options[$option].accept_value' "$JSON_FILE")
        description=$(jq -r --arg command "$command" --arg option "$option" '.commands[] | select(.name == $command) | .definition.options[$option].description' "$JSON_FILE")
        default=$(jq -r --arg command "$command" --arg option "$option" '.commands[] | select(.name == $command) | .definition.options[$option].default' "$JSON_FILE")

        separator
        pf;echo "Option$(o 15)--$option"
        o3;GRAY;echo "Description$(N;o 15)$description"
        if [[ $default != "null" ]]; then
            o3;GRAY;echo "Default$(N;o 15)$default"
        fi
        f
        if [[ $accept_value == "true" ]]; then
            if ask "$(qpf)Do you want to set this option" $NO $Yes; then
                if [[ $default != "null" ]]; then
                    o3;read -p "Enter the value (default: $default): " value
                    value=${value:-$default}
                else
                    o3;read -p "Enter the value: " value
                fi
                selected_options+=("--$option=$value")
            fi
        else
            if ask "$(qpf)Do you want to enable this option" $NO $Yes; then
                selected_options+=("--$option")
            fi
        fi
    done
    parse_arguments "$selected_command" "${selected_options[@]}"
#    execute_command "$command" "${selected_options[@]}"
}

# Function to execute the full command
execute_command() {
    local command options
    command="$1"
    shift
    options=("$@")

    echo "Execute the command: occ $command ${options[@]}"
    f
    anykey execute
    occ "$command" "${options[@]}"
}

# Main
create_json_object
parse_json 1

exit0


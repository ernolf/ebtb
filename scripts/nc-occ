__shebang_bash__
__path_and_scriptname__
__version_and_datestring__
#
__copyright__
#
__license__
#

__whoami_whereami__
__scriptname__
# TODO 0 -->
#modules=(
#    binaries basics awksed tempfile ansi filter prefix button fstring exit
#    spinner anykey line array ask sudo dependency vdir integrity nc/nextcloud
#)
# TODO <-- 0
modules=(fstring spinner nc/nextcloud)
__debug__
__when__
__vdirname__
__tempdir__
__module_server__
__general__
__module_loader__
__module_integrity__
__nextcloud_updater__

contribute_(){
    . <(require contribute)
    contribute "https://help.nextcloud.com/t/script-nc-occ-interactive-occ-interface/195249"
}; donate_(){ contribute_;}
[[ "$@" =~ (donat|contrib) ]] && contribute_

declare JSON_FILE arg
declare -i JSON_TTL

# File containing the JSON output from 'occ list --format=json'
JSON_FILE="$TMPDIR/$MS-tmp/occ_commands.json"
# time in seconds during which the JSON object file is not updated
JSON_TTL=300 # <- do not move this
# Bools to include all options and help option
B[include_all_options]=_
B[include_help]=_
B[help]=_

# Check for the arguments to include all options or just the help option
for arg in "$@"; do
    case "$arg" in
        -u|--update)      JSON_TTL=0               ;;
        -a|--all_options) B[include_all_options]=: ;;
        --show_help)      B[include_help]=:        ;;
        -h|--help)        B[help]=: JSON_TTL=$(${X[grep]} -oP '^JSON_TTL=\K\d+' $MP)
                          break
    esac
done

help_(){
    cat << HELP

    Simply run

        $ME

    to create your occ commands interactively.

    Possible options:

        -h | --help
                show this help message and exit
        -a | --all_options
                include the unimportant options
                help, quiet, verbose, version, ansi, no-ansi, no-interaction,
                no-warnings
        -u | --update
                force an immediate update of the JSON object file
              Note: That file's TTL is $JSON_TTL seconds.
                    If any apps have been installed, removed, or changed within
                    this period, this option must be used to ensure that these
                    changes are taken into account.
        --show_help
                show the help output from the commands instead of brief usage
                message

HELP
exit0
}
${B[help]} && help_

create_json_object(){
    local -i joe
    [ -d "${JSON_FILE%/*}" ] || ${X[mkdir]} -p "${JSON_FILE%/*}"
    [ -f "$JSON_FILE" ] && joe=$(${X[stat]} -c %Z $JSON_FILE)
    if ((rte-joe>JSON_TTL)); then
        occ list --format=json > "$JSON_FILE"
    fi
}

# Function to display a menu and select an option
show_menu() {
    local -i i number_of_options level=$1
    shift
    local -a options=("$@")
    local prompt choice
    number_of_options=${#option[@]}
    echo "Please choose an option:"
    f
    for i in "${!options[@]}"; do
        pf; printf "%2d. %s\n" $((i + 1)) "${options[i]}"
    done
    if ((level > 1)); then
        prompt="Your choice ($(r2r), $(q2q))"
    else
        prompt="Your choice ($(q2q))"
    fi
    f
    read -p "$prompt: " choice
    case "$choice" in
        r)  if (( level > 1 )); then
                $CMA
            fi
            ;;
        q)  exit0
            ;;
        *)  separator
            return $(( choice - 1 ))
    esac
}

# Function to parse the JSON file and create the menu
parse_json() {
    local -i level
    local special_commands selected_command choice description usage
    local -a special_options general_options options
    level=${1:-0} special_commands="check|completion|help|list|setupchecks|status|upgrade"

    if (( level == 1 )); then
        # List main categories, including special commands first
        mapfile -t special_options< <(${X[jq]} -r '.commands[].name' "$JSON_FILE" | ${X[grep]} -E "^($special_commands)$" | ${X[sort]})
        mapfile -t general_options< <(${X[jq]} -r '.commands[].name | split(":")[0]' "$JSON_FILE" | ${X[grep]} -Ev "^($special_commands)$" | ${X[grep]} -v '^_' | ${X[sort]} -u)
        options=("${special_options[@]}" "${general_options[@]}")
    else
        # List commands of the selected category
        local category="$2"
        mapfile -t options< <(${X[jq]} -r --arg category "$category" '.commands[] | select(.name | startswith($category + ":")) | .name' "$JSON_FILE" | ${X[grep]} -v '^_' | ${X[sort]} -u)
    fi

    show_menu $level "${options[@]}"
    choice=$?

    if [[ "${options[choice]}" =~ ^($special_commands)$ ]]; then
        selected_command=${options[choice]}
        pf; echo "Command$(o 15;Yi)$selected_command"; N
        if "${B[include_help]}"; then
            execute_command "$selected_command" --help
        else
            execute_command "$selected_command"
        fi
    elif (( level == 1 )); then
        parse_json 2 "${options[choice]}"
    else
        selected_command=${options[choice]}
        pf; echo "Command$(o 15; Yi)$selected_command"; N
        if "${B[include_help]}"; then
            # long help
            # execute_command "$selected_command" --help
            pf; echo "Help"
            occ "$selected_command" --help | ${X[gawk]} '{print "   " $0}'
        else
            # brief usage message
            description="$(${X[jq]} -r --arg command "$selected_command" '.commands[] | select(.name == $command) | .description' "$JSON_FILE")"
            usage="$(${X[jq]} -r --arg command "$selected_command" '.commands[] | select(.name == $command) | .usage[]' "$JSON_FILE")"
            o3; GRAY; echo "Description$(N; o 14; format_string "$description" 15)"
            o3; GRAY; echo "Usage$(N; o 14; format_string "$usage" 15)"
        fi
#        parse_arguments "$selected_command"
        parse_options "$selected_command"
    fi
}

# Function to parse and select arguments
parse_arguments() {
    local command arguments description is_required
    local -a selected_options selected_arguments
    command=$1
    shift
    selected_options=("$@")

    mapfile -t arguments < <(${X[jq]} -r --arg command "$command" '.commands[] | select(.name == $command) | .definition.arguments | to_entries[] | .key' "$JSON_FILE")

    for argument in "${arguments[@]}"; do
        description=$(${X[jq]} -r --arg command "$command" --arg argument "$argument" '.commands[] | select(.name == $command) | .definition.arguments[$argument].description' "$JSON_FILE")
        is_required=$(${X[jq]} -r --arg command "$command" --arg argument "$argument" '.commands[] | select(.name == $command) | .definition.arguments[$argument].is_required' "$JSON_FILE")

        separator
        pf; echo "Argument$(o 15)$argument"
        o3; GRAY; echo "Description$(N; o 15)$description"
        f
        if [[ $is_required == "true" ]]; then
            read -p "Enter the value for $argument: " value
            selected_arguments+=("$value")
        else
            if ask "$(qpf)Do you want to provide a value for $argument" "$Yes"; then
                read -p "Enter the value for $argument: " value
                selected_arguments+=("$value")
            fi
        fi
    done
    f
    if (( "${#selected_arguments[@]}" )); then
        execute_command "$command" "${selected_options[@]}" -- "${selected_arguments[@]}"
    else
        execute_command "$command" "${selected_options[@]}"
    fi
}

# Function to display and select options
parse_options() {
    local command unimportant_options option description accept_value default
    local -a options selected_options
    command=$1
    unimportant_options="help|quiet|verbose|version|ansi|no-ansi|no-interaction|no-warnings"

    if "${B[include_all_options]}"; then
        # Include all options
        mapfile -t options < <(${X[jq]} -r --arg command "$command" '.commands[] | select(.name == $command) | .definition.options | to_entries[] | .key' "$JSON_FILE")
    else
        # Exclude common options
        mapfile -t options < <(${X[jq]} -r --arg command "$command" '.commands[] | select(.name == $command) | .definition.options | to_entries[] | .key' "$JSON_FILE" | ${X[grep]} -Ev "^($unimportant_options)$")
    fi

    for option in "${options[@]}"; do
        accept_value=$(${X[jq]} -r --arg command "$command" --arg option "$option" '.commands[] | select(.name == $command) | .definition.options[$option].accept_value' "$JSON_FILE")
        description=$(${X[jq]} -r --arg command "$command" --arg option "$option" '.commands[] | select(.name == $command) | .definition.options[$option].description' "$JSON_FILE")
        default=$(${X[jq]} -r --arg command "$command" --arg option "$option" '.commands[] | select(.name == $command) | .definition.options[$option].default' "$JSON_FILE")

        separator
        pf; echo "Option$(o 15)--$option"
        o3; GRAY;echo "Description$(N; o 15)$description"
        if [[ $default != "null" ]]; then
            o3; GRAY;echo "Default$(N; o 15)$default"
        fi
        f
        if [[ $accept_value == "true" ]]; then
            if ask "$(qpf)Do you want to set this option" "$NO" "$Yes"; then
                if [[ $default != "null" ]]; then
                    o3; read -p "Enter the value (default: $default): " value
                    value=${value:-$default}
                else
                    o3; read -p "Enter the value: " value
                fi
                selected_options+=("--$option=$value")
            fi
        else
            if ask "$(qpf)Do you want to enable this option" "$NO" "$Yes"; then
                selected_options+=("--$option")
            fi
        fi
    done
    parse_arguments "$selected_command" "${selected_options[@]}"
#    execute_command "$command" "${selected_options[@]}"
}

# Function to execute the full command
execute_command() {
    local command options
    command="$1"
    shift
    options=("$@")

    echo "Execute the command: occ $command ${options[@]}"
    f
    anykey execute
    occ "$command" "${options[@]}"
}

# Main
create_json_object
parse_json 1

exit0


__shebang_bash__
__path_and_scriptname__
__version_and_datestring__
#
__copyright__
#
__license__
#

__whoami_whereami__
__scriptname__
# TODO 0 -->
#modules=(
#    binaries basics awksed tempfile ansi filter prefix button exit spinner
#    anykey line array ask sudo dependency vdir integrity php/version
#    nc/nextcloud $MS/github_api $MS/app_update $MS/filters $MS/db $MS/appstore
#    $MS/data_refine $MS/assumed_version $MS/list $MS/install_overwrite $MS/l10n
#    $MS/help
#)
# TODO <-- 0
modules=(
    php/version nc/nextcloud nc/logo $MS/github_api $MS/app_update $MS/db
    $MS/appstore $MS/data_refine $MS/assumed_version $MS/list $MS/l10n
    $MS/commands
)
__debug__
# use parallel running background jobs in order to dramatically increase speed
B[bgjobs]=: B[trace]=_
${B[bgjobs]} && { [[ -t 1 && ! -p /dev/stdout ]] && B[pager]=_ || B[pager]=:; } # is piped to pager?
__when__
__vdirname__
__tempdir__
__module_server__
__general__
__module_loader__
__module_integrity__
__nextcloud_updater__

contribute_(){
    . <(require contribute)
    contribute "https://help.nextcloud.com/t/script-nc-apps-a-helpful-and-more-verbose-complement-to-occ-app-list/164389"
}; [[ "$@" =~ (donat|contrib) ]] && contribute_

[[ "$(r_db .tables;)" =~ database_created ]] && B[database_created]=:

declare -a availupd
bools=(secondrun nopager markdown supported unsupported use_json_all update_first allow_unstable)
for x in ${bools[@]}; do B[$x]=_; done
shopt -s extglob
for x in "$@"; do
    case "$x" in
               secondrun) B[secondrun]=:                       ;;
                  lang=*) lang="$(validate_language "${x#*=}")";;
        --no?([_-])pager) B[nopager]=:                         ;;
        --@(markdown|md)) B[markdown]=:                        ;;
             --supported) B[supported]=:                       ;;
           --unsupported) B[unsupported]=: B[use_json_all]=:   ;;
                   --alt) B[use_json_all]=:                    ;;
 -u|--update?([_-])first) B[update_first]=:                    ;;
  --allow?([_-])unstable) B[allow_unstable]=:                  ;;
        ?(min_)version=*) NC[${x%=*}]="${x#*=}"                ;;
      ?(--)rebuild[-_]db) ${B[database_created]} && rebuild_db ;;
              ?(--)trace) B[trace]=:                           ;;
                       *) args+=("$x")
    esac
done
set -- "${args[@]}"

if ${B[supported]} && ${B[unsupported]}; then
    f
    o2; R; echo "--supported and --unsupported are passed both but are mutually exclusive"
    o2; echo "--supported and --unsupported will be ignored"; N
    f
    B[supported]=_ B[unsupported]=_
    anykey
fi

while (( $# )); do
    case "$1" in
        appstore)
            shift
            appstore platform=all "$@"
            break 2
            ;;
        install_overwrite)
            B[database_created]=: B[nopager]=: V[command]="$1"
            ${B[update_first]} && V[command]="$1 -u"
            ${B[update_first]} && ${B[allow_unstable]} && V[command]="$1 -u --allow-unstable"
            break 2
            ;;
        ?(not_)shipped|all_apps|updat@(e|able))
            case "$1" in
                shipped|updat@(e|able))
                    if ${B[supported]}; then
                        f
                        o2; R; echo "--supported will be ignored since it is implied within \"$1\""; N
                        f
                        B[supported]=_
                        anykey
                    elif ${B[unsupported]}; then
                        f
                        o2; R; echo "--unsupported will be ignored since it is mutually exclusive with \"$1\""; N
                        f
                        B[unsupported]=_
                        anykey
                    fi
                    ;;
                *)  :
            esac
            case "$2" in
                ?(en|dis)abled|local|store|all)
                    V[command]="$1 $2"
                    shift 2
                    ;;
                *)  V[command]="$1 enabled"
                    shift
            esac
            ${B[allow_unstable]} && [[ "${V[command]}" =~ update ]] && V[command]="${V[command]} --allow-unstable"
            ;;
        @(name|id)=+([a-zA-Z0-9-_ ]))
            V[command]="${1%=*}"
            V[app_${1%=*}]="${1#*=}"
            B[nopager]=:
# TODO 2 -->
            B[use_json_all]=:
# TODO <-- 2
            shift
            ;;
        ids)
            V[command]="$1"
            shift
            declare -a app_ids
            app_ids=("${@}")
            B[nopager]=:
            break 2
            ;;
# TODO 3 -->
        version=[1-9]?([0-9]))
# TODO <-- 3
        --min@(_|-)version=*)
            assumed_version_set ${1#*=} min_
            B[use_json_all]=:
            shift
            ;;
        --version=*)
            assumed_version_set ${1#*=}
            shift
            ;;
        -H|--filters)
            V[command]=filters
            break 2
            ;;
        -h|--help)
            V[command]=print_help
            ${B[nopager]} && V[command]='print_help --cat'
            break 2
            ;;
        --php=*)
            [[ " ${available_php_versions[*]} " =~ ${1#*=} ]] && php_version="${1#*=}" || echo "$(Pbg) ERROR: php${1#*=} not found. $(N)"
            shift
            ;;
# TODO 4 -->
        *)  $@
            exit 0
# TODO <-- 4
        *)  echo "unknown option $1"
            print_help --cat
    esac
done
shopt -u extglob

${B[trace]} && B[bgjobs]=_
if ${B[supported]}; then
    B[unsupported]=_
    V[suppunsupp]="supp=:"
elif ${B[unsupported]}; then
    B[supported]=_
    V[suppunsupp]="unsupp=:"
fi

[[ "${V[command]:=print_help}" =~ print_help ]] && B[nopager]=:
[[ "${V[command]}" =~ filters ]] && B[nopager]=:
# yes, this must be "updat", since it must match with "update" AND "updatable"
# TODO 8 -->
#echo ${V[command]} | ${X[grep]} -qs updat && B[nopager]=:
# TODO <-- 8
[[ "${V[command]}" =~ updat ]] && B[nopager]=:

# create the database if it does not exist
${B[database_created]} || create_database

if ${B[secondrun]} || ${B[nopager]:=_}; then
    line '-' GRAY 80 b1
    printf "V[command] = \"${V[command]}\""
    [ "${V[command]}" = "name" ] && printf ", V[app_name] = \"${V[app_name]}\""
    [ "${V[command]}" = "id" ] && printf ", V[app_id] = \"${V[app_id]}\""
    ${B[supported]} && printf ", only supported"
    ${B[unsupported]} && printf ", only unsupported"
    printf ", markdown = $(${B[markdown]} && printf 'true' || printf 'false')"
    printf ", nopager = "
    ${B[secondrun]} && printf 'false' || { ${B[nopager]} && printf 'true' || printf 'false'; }
    echo ", lang = $lang"
    echo "Versions: assumed = ${NC[version]}, is = ${NC[version_long]}, min = ${NC[min_version]}, php = $(php_ver)"
    line '-' GRAY 80
    line '=' N a
    ${B[markdown]} && V[command]="${V[command]} md=:"
# TODO 5 -->
    ${V[command]} ${V[suppunsupp]} use_json_all=${B[use_json_all]}
# TODO <-- 5
    ${V[command]} ${V[suppunsupp]}
else
    if ${B[supported]}; then
        $ME secondrun lang=$lang --supported --nopager min_version=${NC[min_version]} version=${NC[version]} ${V[command]} | ${X[less]} -R
    elif ${B[unsupported]}; then
        $ME secondrun lang=$lang --unsupported --nopager min_version=${NC[min_version]} version=${NC[version]} ${V[command]} | ${X[less]} -R
# TODO 6 -->
    elif ${B[use_json_all]}; then
        $ME secondrun lang=$lang --alt --nopager min_version=${NC[min_version]} version=${NC[version]} ${V[command]} | ${X[less]} -R
# TODO <-- 6
    else
        $ME secondrun lang=$lang --nopager min_version=${NC[min_version]} version=${NC[version]} ${V[command]} | ${X[less]} -R
    fi
    exit 0
fi

exit0


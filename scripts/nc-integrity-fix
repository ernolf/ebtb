__shebang_bash__
__path_and_scriptname__
__version_and_datestring__
#
__copyright__
#
__license__
#

__whoami_whereami__
__scriptname__
# TODO 0 -->
#modules=(
#    binaries basics awksed tempfile ansi filter prefix button fstring exit
#    spinner anykey line array ask sudo dependency vdir integrity
#    nc/nextcloud nc/nextcloud_db
#)
# TODO <-- 0
modules=(fstring nc/nextcloud nc/nextcloud_db)
__debug__
__when__
__vdirname__
__tempdir__
__module_server__
__general__
__module_loader__
__module_integrity__
__nextcloud_updater__

# https://github.com/nextcloud/server/blob/master/lib/private/IntegrityCheck/Checker.php

contribute_(){
    . <(require contribute)
    contribute "https://help.nextcloud.com/t/nc-integrity-fix-script-to-resolve-some-files-have-not-passed-the-integrity-check-warnings/194729"
}; donate_(){ contribute_;}
[[ "$@" =~ (donat|contrib) ]] && contribute_

B[debug]=_

aio_not_supported

declare affected_app affected_file abspath this be pl1 pl2 one integritycheck_json scan_result question 
declare -a shiped_apps affected_apps FILE_MISSING INVALID_HASH EXTRA_FILE EXCEPTION

integritycheck_json="$(tf)" scan_result="$(tf)"

prune_arrays(){ FILE_MISSING=() INVALID_HASH=() EXTRA_FILE=() EXCEPTION=(); }

mapfile -t shipped_apps< <(occ app:list --shipped=true --output=json | ${X[jq]}  -r '.enabled | keys | sort []')
is_shipped_(){ [[ " ${shipped_apps[@]} " =~ " $1 " ]]; }

db_integritycheck_(){
    database_call
    local db_query
    case "$1" in
        cull)
            db_query="SELECT configvalue FROM ${DB[pref]}appconfig WHERE appid = 'core' AND configkey = 'oc.integritycheck.checker';"
            db_raw_exec_ "$db_query"
            ;;
        clean)
            db_query="DELETE FROM ${DB[pref]}appconfig WHERE ${DB[pref]}appconfig.appid = 'core' AND ${DB[pref]}appconfig.configkey = 'oc.integritycheck.checker';"
            db_exec_ "$db_query"
    esac
}

json_2_array(){
    ${X[jq]} -r '
        to_entries[]
        | select(.value | objects)
        | .key as $section
        | "\($section)=(" +
            (.value | keys_unsorted | map("\"\(.)\"") | join(" "))
            + ")"
    ' <<< "$@"
}

occ_integritycheck_(){
    case "$1" in
        core)
if ${B[debug]}; then
            occ integrity:check-core
else
            spinner C " . Rescaning server core ." &
            occ integrity:check-core --quiet
fi
            ;;
        *)
if ${B[debug]}; then
            occ integrity:check-app $1
else
            spinner C " . Rescaning $1 app ." &
            occ integrity:check-app --quiet -- $1
fi
    esac
${B[debug]} || kill_spinner
}

nc_download_default(){
    local app_id file version_tag path url url1 url2 tempfile
    app_id="$1" file="$2" path="$2" # yes, here $2 is both, file and path
    version_tag="v${NC[version_tag]}"
    tempfile=$(tf)
    case "$app_id" in
      core) url1="${NC[github_raw]}/server/$version_tag/$file"
            ;;
         *) if is_shipped_ "$app_id"; then
                path="apps/$app_id/$file"
                url1="${NC[github_raw]}/server/$version_tag/apps/$app_id/$file"
                url2="${NC[github_raw]}/$app_id/$version_tag/$file"
            else
                xml_f="${NC[d]}/apps/$app_id/appinfo/info.xml"
                repo="$(${X[xmls]} -v "//info/repository" "$xml_f" | ${X[sed]} '2,$d;s|.git$||1')"
                if [ -z "$repo" ]; then
                    issueTracker=$(${X[xmls]} -v "//info/bugs" "$info_xml" | ${X[sed]} '2,$d')
                    repo=$(${X[sed]} 's|/issues$||1' <<< "${issueTracker%/}")
                fi
                if [[ "$repo" =~ github.com ]]; then
                    url="$(${X[sed]} 's/github/raw.githubusercontent/' <<< "$repo")"
                else
                    echo "download of '$path' failed. You must check this one yourself"
                fi
                version_tag="$(${X[xmls]} -v "//info/version" "$xml_f" | ${X[sed]} '2,$d')"
                path="apps/$app_id/$file"
                url1="$url/$version_tag/$file"
                url2="$url/v$version_tag/$file"
            fi
    esac

${B[debug]} && { echo -e "app_id = $app_id\nfile = $file\npath = $path\nversion_tag = $version_tag\nurl = $url\nurl1 = $url1\nurl2 = $url2"; anykey; }

    if (($(${X[curl]} -so "$tempfile" -w %{http_code} "$url1") == 200)); then
        mv "$tempfile" "${NC[d]}/$path"
        chown "${NC[u]}:${NC[u]}" "${NC[d]}/$path"
        echo "download of '$file' from '$url1' succeeded"
    elif (($(${X[curl]} -so "$tempfile" -w %{http_code} "$url2") == 200)); then
        mv "$tempfile" "${NC[d]}/$path"
        chown "${NC[u]}:${NC[u]}" "${NC[d]}/$path"
        echo "download of '$file' from '$url2' succeeded"
    else
        echo "download of '$path' failed. You must check this one yourself"
    fi
}

db_integritycheck_ cull > $integritycheck_json

${B[debug]} && { echo "integritycheck_json:"; ${X[jq]} '.' $integritycheck_json; anykey; }

mapfile -t affected_apps< <(${X[jq]} -r keys[] $integritycheck_json)

if (( ${#affected_apps[@]} )); then
    if (( ${#affected_apps[@]} > 1 )); then
        this='hese' be='are' pl1='s'
    else
        this='his' be='is' pl1=''
    fi
    echo "T$this app$pl1 $be affected:"
    for affected_app in ${affected_apps[@]}; do
        pf; echo "$affected_app"
    done
    separator
    for affected_app in ${affected_apps[@]}; do
        case $affected_app in
            core) abspath="${NC[d]}";;
               *) abspath="$(occ app:getpath -- "$affected_app")"
        esac
        echo -n > $scan_result
        prune_arrays
        json_2_array "$(${X[jq]} ".$affected_app" "$integritycheck_json")" > $scan_result
        . $scan_result

${B[debug]} && { echo "scan_result:"; ${X[cat]} $scan_result; anykey; }

        if (( ${#FILE_MISSING[@]} )); then
            if (( ${#FILE_MISSING[@]} > 1 )); then
                this='hese' be='are' pl1='s'
            else
                this='his' be='is' pl1=''
            fi
            echo "T$this file$pl1 $be missing in [$affected_app]:"
            for affected_file in ${FILE_MISSING[@]}; do
                pf; echo "$affected_file"
            done
            question="$(qpf; format_string "Do you want to download t$this missing file$pl1 for your version from github" 3; N)"
            if ask "$question" "$YES"; then
                for affected_file in ${FILE_MISSING[@]}; do
                    nc_download_default $affected_app $affected_file
                done
                occ_integritycheck_ $affected_app
            fi
        fi
        if (( ${#EXTRA_FILE[@]} )); then
            if (( ${#EXTRA_FILE[@]} > 1 )); then
                this='hese' be='were' pl1='s'
            else
                this='his' be='was' pl1=''
            fi
            echo "T$this extra (needless) file$pl1 $be found in [$affected_app]:"
            for affected_file in ${EXTRA_FILE[@]}; do
                pf; echo "$affected_file"
            done
# TODO: add backup option
            if ask "$(qpf)Do you want to remove t$this needless file$pl1" "$YES"; then
                for affected_file in ${EXTRA_FILE[@]}; do
                    rm "$abspath/$affected_file"
                done
                occ_integritycheck_ $affected_app
            fi
        fi
        if (( ${#INVALID_HASH[@]} )); then
            if (( ${#INVALID_HASH[@]} > 1 )); then
                one='' this='hese' be='are' pl1='s' pl2='es'
            else
                one=' a' this='his' be='is' pl1='' pl2=''
            fi
            echo "The hash$pl2 of t$this file$pl1 in [$affected_app] $be invalid:"
            for affected_file in ${INVALID_HASH[@]}; do
                pf; echo "$affected_file"
            done
            question="$(qpf; format_string "Do you want to replace t$this invalid file$pl1 with$one file$pl1 downloaded from github for your version" 3; N)"
            if ask "$question" "$YES"; then
                for affected_file in ${INVALID_HASH[@]}; do
                    nc_download_default $affected_app $affected_file
                done
                occ_integritycheck_ $affected_app
            fi
        fi
        if (( ${#EXCEPTION[@]} )); then
            echo "This exception was detected for [$affected_app]:"
            pf; echo "$(${X[jq]} -r ".$affected_app.EXCEPTION.message" $integritycheck_json)"
            echo "This script cannot resolve integrity violations of type 'EXCEPTION'."
        fi
        separator
    done
    db_integritycheck_ clean
    echo
    echo "$(pf; format_string "You should now return to the 'settings/admin/overview' tab in the browser frontend of your nextcloud server and check if all warnings are resolved. If you are still geting complaints, you should do a rescan from within that error message (wait for it to complete) and run this script again." 3; N)"
    f
    anykey
    contribute_
else
    echo
    echo "$(pf; format_string "This script could not find any integrity warnings to resolve." 3; N)"
    exit 0
fi

exit0


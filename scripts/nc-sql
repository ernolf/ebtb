__shebang_bash__
__path_and_scriptname__
__version_and_datestring__
#
__copyright__
#
__license__
#

__whoami_whereami__
__scriptname__
# TODO 0 -->
#modules=(
#    binaries basics awksed tempfile ansi filter prefix button fstring exit
#    spinner anykey line array ask sudo dependency vdir integrity httpd
#    nc/nextcloud nc/nextcloud_db
#)
# TODO <-- 0
modules=(fstring httpd nc/nextcloud nc/nextcloud_db)
__debug__
__when__
__vdirname__
__tempdir__
__module_server__
__general__
__module_loader__
__module_integrity__
__nextcloud_updater__


contribute_(){
    . <(require contribute)
    contribute "https://help.nextcloud.com/t/script-nc-sql-zero-config-commandline-client-for-the-nextcloud-database/195088"
}; donate_(){ contribute_;}
[[ "$@" =~ (donat|contrib) ]] && contribute_

help(){
    ${X[cat]} << HELP

    $ME [ --raw [ --execute "query;" ] ]

    $ME
                open sql cli-client in interactive mode
    --raw, -r   raw output
    --execute,-e "query;"
                run a query and exit
    --firstrun  re-run the first run wizard

HELP
    exit 0
}

# first search for options --raw, -r, --execute, -e and remove from @() array
# and then add the remaining arguments into the new array
bools=(raw execute)
for x in ${bools[@]}; do B[$x]=_; done

for x in "$@"; do
    case "$x" in
        --help|-h)
            help
            ;;
        --raw|-r)
            B[raw]=:
            ;;
        --execute|-e)
            B[execute]=:
            ;;
        *)  args+=("$x")
    esac
done
set -- "${args[@]}"

if ${B[aio]} && [ -n "${X[psql]}" ]; then
    B[docker]=false
fi

if ${B[execute]}; then
    if ${B[raw]}; then
        db_raw_exec_ "$*"
    else
        db_exec_ "$*"
    fi
else
    if ${B[raw]}; then
        db_raw_interactive
    else
        db_interactive
    fi
fi

exit0


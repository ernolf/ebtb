__shebang_bash__
__path_and_scriptname__
__version_and_datestring__
#
__copyright__
#
__license__
#

__whoami_whereami__
__scriptname__
# TODO 0 -->
#modules=(
#    binaries today interval basics dos2unix awksed tempfile prompt ansi filter
#    prefix button fstring exit sort spinner anykey line array httpd sudo
#    context php/version php/nginx php/apache2 php/fpm php/versions dpkg
#    php/extensions php/sury ask dependency vdir integrity dist/os_release
#    php.net/ini_directives $MS/inp $MS/pdiff $MS/merge $MS/diff $MS/pool
#    $MS/tasks $MS/linstalled $MS/help $MS/chfiles $MS/switch
#)
# TODO <-- 0
modules=(
    today interval dos2unix prompt fstring sort httpd context
    php/version php/nginx php/apache2 php/fpm php/versions php/alternatives
    php/extensions php/sury ask dist/os_release php.net/ini_directives
    $MS/inp $MS/pdiff $MS/merge $MS/diff $MS/pool $MS/tasks $MS/linstalled
    $MS/help $MS/chfiles $MS/switch
)
__debug__
__when__
# don't change this by hand, its done safe and interactively by the script:
declare vdirname="" # <-- don't change this!
__tempdir__
__module_server__
__general__
__module_loader__
__module_integrity__

contribute_(){
    . <(require contribute)
    contribute "https://help.nextcloud.com/t/php-updater-a-script-to-upgrade-php-in-a-safe-way/180215"
}; donate_(){ contribute_;}
[[ "$@" =~ (donat|contrib) ]] && contribute_

declare flag bool
declare -a flags bools args
declare -A FLAG
flags=(forceflag)
bools=(help nopager force needforce supported unsupported nolts distrib_to_old distrib_to_new distrib_unknown)
for flag in ${flags[@]}; do FLAG[$flag]=_; done; unset -v flag flags
for bool in ${bools[@]}; do B[$bool]=_; done; unset -v bool bools
FLAG[forceflag]=''
shopt -s extglob
for arg in "$@"; do
    case "$arg" in
        --help|-h)        B[help]=: ;;
        --force)          B[force]=: FLAG[forceflag]=' --force' ;;
        --no?([_-])pager) B[nopager]=: ;;
        *)                args+=("$arg")
    esac
done
shopt -u extglob
set -- "${args[@]}"&&unset -v args

${B[help]} && explain

cursor_ hide

## it starts here:
# you MUST be root:
su_root "to run this script."
check_context
my_update_check

tnh1_strg distrib_checked || . <(require $MS/distrib)
tnh1_strg supported && B[supported]=:
tnh1_strg to_old && { B[distrib_to_old]=: B[needforce]=:; ${B[force]} && B[supported]=:;}
tnh1_strg to_new && { B[distrib_to_new]=: B[needforce]=:; ${B[force]} && B[supported]=:;}
tnh1_strg nolts && { B[nolts]=: B[needforce]=:; ${B[force]} && B[supported]=:;}
tnh1_strg unknown && { B[distrib_unknown]=: B[needforce]=:; ${B[force]} && B[supported]=:;}
tnh1_strg unsupported && B[unsupported]=:

# messages
call_help(){ o2; GRAY; echo "You can call the help with:$(o 35; B)$ME --help"; line '-' dP 2/78; }
call_me(){ 
    require_arg $@
    o2; GRAY; echo "You can call this list with:$(o 35; B)$ME --list-$1"; line '-' dP 2/78 a${2:-1}
}
version_mismatch(){
    f
    bundle echo " $(Pbg; pf)A version mismatch has been detected which cannot be resolved by this script$(pf; N)"
    exit1
}
wrong_first_argument(){
    required_args 2 $@
    local first
    local -i a
    a=$2
    f
    first=" $(Pbg; pf)First argument must be the version of an installed php but"
    if (( a )); then
        bundle echo "$first php$1 is not installed$(pf; N)"
        f
        list_candidates
        call_me candidates
        call_help
        f
    else
        bundle echo "$first \"$1\" is not an existing php version$(pf; N)"
        list_existing
        call_me existing
        call_help
        f
    fi
    exit1
}
does_not_exist(){
    require_arg $@
    f
    bundle echo " $(Pbg; pf)\"$1\" is not an existing php version$(pf; N)"
    list_existing
    call_me existing
    call_help
    f
    anykey
}
no_candidate(){
    require_arg $@
    f
    bundle echo " $(Pbg; pf)Version \"$1\" cannot be installed with your Apt sources$(pf; N)"
    f
    list_candidates
    call_me candidates
    anykey_noquit
    need_sury_repo
    call_help
    f
    anykey
}
no_higher_candidate(){
    f
    bundle echo "$(pf)The installed PHP version (${PHP[v]}) is the highest available from your configured apt sources."
    list_candidates
    call_me candidates
    anykey_noquit
    need_sury_repo
    downgrade_possible
    anykey
}
need_ppa(){ need_sury_repo; }
downgrade_possible(){ bundle echo "$(pf)However, it is possible to downgrade to a lower version using this script"; }

# TODO 1 -->
list_tasks(){
    echo "explain Show help page"
    echo "check_distrib Check runing distribution (done automaticaly on first run)"
    echo "list_ubuntu/debian List ubuntu/debian distributions"
    echo "list_existing List existing PHP-Versions"
    echo "list_apt_sources List APT sources"
    echo "list_apt_sources_files List APT sources files"
    echo "add_apt_sources Add APT sources"
    echo "remove_apt_sources Remove APT sources"
    echo "list_candidates List instalable PHP-Versions offered by APT sources"
    echo "list_installed List installed PHP-related packages and modules"
    echo "list_ht_servers List enabled web server resources"
    echo "switch_php_version Set the default PHP version"
}

tasks(){
    local -i n=1 i c2=9 c3=29
    local -a task_list
    local -l num key

    mapfile -t task_list< <(list_tasks)
    (( ${#task_list[@]} )) || {
        o2; echo "no tasks available."
        anykey
        return
    }
    line '=' P 2/78 b1
    o3; B; echo "These tasks are available for selection:"; N
    o4; Y; echo "Num$(o $c2)Task$(o $c3)Description"
    line '-' dP 2/78
    for i in "${!task_list[@]}"; do
        task="${task_list[i]}"
        description=""
        o2; pf; echo "$((n+i))$(o $c2)\"$task\"$(o $c3)\"$description\""
    done
    line '-' dP 2/78 a2
    o3; echo "Enter the number of the task you want to execute $(q2q)"
    while :; do
        read -rsn 1 num
        [ "$num" = "q" ] && exit1
        [[ "$num" =~ ^[1-9]$ ]] || {
            o3; echo "$invi Please enter a valid number or $(q2q)"
            continue
        }
        (( num<n || num>=(n+${#task_list[@]}) )) && {
            o3; echo "Invalid task number. Please choose a number from the list or $(q2q)"
            continue
        }
        i="$((num-n))"
        task="${task_list[i]}"
        description=""
        o3; echo "Your choice: task \"$task\""
        o3; echo "do you want to execute this task?"
        o3; echo "Press $(box y) to proceed - $(box c) to cancel - $(q2q): "
        while :; do
            read -rsn 1 key
            case "$key" in
                y)  break 2 ;;
                c)  return  ;;
                q)  exit1
            esac
        done
    done
}
# TODO <-- 1
## void ##
declare lang=$(echo "$LANG" | ${X[cut]} -d'_' -f1)
declare OLD NEW SUGGESTION PKG PKGOLD PKGNEW SAPI DEFAULT_ANSWER FILE
[ -f "${F[php]:="${D[vt]}/php"}" ] && . "${F[php]}"

${B[supported]} && apt_need_update

declare prefix
B[verbose]=_
${B[verbose]} && prefix="$(pf)" || prefix="$(o2; G)Examining the system:$(pf; W)"
${B[verbose]} && echo "Examining the system:"
echo "${prefix}populating arrays with inventory results.."

# PACKAGES_INSTALLED_BY_DPKG
${B[verbose]} && echo "$(pf)Packages installed by dpkg.."
if ${B[supported]}; then
    ext_state cleanup
    ext_state fix
fi

${B[verbose]} || te0
# clear

# $1=old;$2=new
case "$1" in
    --list-installed)
        list_installed 'quiet=:'
        exit 0
        ;;
    --list-installed-only)
        list_installed 'only=:'
        exit 0
        ;;
    --list-sapi)
        list_installed_sapi
        exit 0
        ;;
    --list-candidates)
        list_candidates
        anykey_noquit
        need_sury_repo
        exit 0
        ;;
    --list-existing)
        list_existing
        exit 0
        ;;
    --switch-version)
        ${B[supported]} && switch_default_version
        exit 0
        ;;
    --list-debian)
        . <(require dist/debian)
        list_supported_debian
        exit 0
        ;;
    --list-ubuntu)
        . <(require dist/ubuntu)
        list_supported_ubuntu
        exit 0
        ;;
    -*) bundle echo "unknown option $1"
        anykey
        ;;
    *)  :
esac

if [[ ${B[supported]} && $# -eq 2 && 0$(${X[phpquery]} -V | ${X[wc]} -w) -gt 1 ]]; then
    (does_exist_ "${1//php/}" 1 && does_exist_ "${2//php/}" 0) && OLD="${1//php/}" NEW="${2//php/}" || explain
fi

if ${B[supported]}; then
    if [ 0$(${X[phpquery]} -V | ${X[wc]} -w) -eq 1 ]; then
        [ "$(${X[phpquery]} -V)" = "${PHP[v]}" ] || version_mismatch
        OLD="$(${X[phpquery]} -V)"
        separator
        f
        mh "$(funcname_and_lineno) only one php version ($OLD) found."
        echo "$(ipf; W; format_string "Only one php version ($(C)$OLD$(W)) found, which is the thinkable best possible starting situation for this script. Simply follow the instructions and recommendations to install a new PHP version if possible, which then will adopt the settings of this PHP version by the means of this script." 3; N)"
        f
        anykey
        separator
        list_installed
        anykey
        list_candidates
        call_me candidates
        anykey_noquit
        need_sury_repo
        . "${F[php]}"
        anykey
        separator
        if ask "$(qpf)Do you want to install a new php-version now" "$YES"; then
            SUGGESTION="$(i_ver "$OLD")" || { no_higher_candidate;SUGGESTION="$(d_ver "$OLD")"; }
            rs1="$(o3)please enter a new, not yet installed php-versionâ€¦"
            list_candidates
            while :; do
                cursor_ show
                read -rp "$(bundle echo "E: Please enter the version string you want to install (e.g. '$SUGGESTION')"): " NEW
                mh "$(funcname_and_lineno) input: $NEW"
                if [ -z "$NEW" ]; then
                    echo "$rs1"
                    anykey
                    continue
                elif [ "$NEW" = "$OLD" ]; then
                    bundle echo "$(es3; format_string "You entered: $NEW $(dY)from the point of view of this script, php$NEW is already installed" 3; N)"
                    echo "$rs1"
                    anykey
                    continue
                fi
                cursor_ hide
                sbnc=''
                if does_exist_ "$NEW" 0; then
                    . "${F[php]}"
                    [[ " ${CAN[@]} " =~ " $NEW " ]] && sbnc=" $(dY)supported by Nextcloud version $(listify_ C dY $(A_fld EXG ';' $NEW 4))"
                    bundle echo "$(es3)You entered: $NEW$sbnc"
                    if [[ " ${CAN[@]} " =~ " $NEW " ]]; then
                        ask "$(qpf)Are you ready to install php$NEW" "$YES" && break || exit1
                    else
                        no_candidate "$NEW"
                    fi
                fi
            done
            install_new_php "$OLD" "$NEW"
        else
            exit0
        fi
    elif [ -n "$NEW" ]; then
        if [[ " ${CAN[@]} " =~ " $NEW " ]]; then
            list_installed 'lonly=:'
            remove_unused_sapis
            change_sapi
            remove_dependency_packages
            remove_meta_packages
            kill_spinner
            cursor_ hide
            spinner C " . check_config() searching known configuration errors ." &
            check_config "$OLD"
            kill_spinner
            if [[ "$(${X[phpquery]} -V)" =~ $NEW ]]; then
                declare -a missing_new_packages
                spinner C " . searching for php$NEW packages yet to be installed ." &
                mapfile -t missing_new_packages< <(packages_diff "$OLD" "$NEW")
                kill_spinner
                if ((${#missing_new_packages[@]})); then
                    if ((${#missing_new_packages[@]}==1)); then
                        plu='is:' plu2='one:is' mnp_string="$(B)${missing_new_packages[0]}$(N)"
                    else
                        plu='ese:s' plu2='some:are' mnp_string="$(listify B ${missing_new_packages[@]})"
                    fi
                    separator O
                    bundle echo "$(pf; format_string "You entered \"$(Y)$OLD$(N)\" as old and \"$(Y)$NEW$(N)\" as new version. Although php$NEW is installed, ${plu2%:*} $(Y)php$NEW$(N) package${plu#*:} ${plu2#*:} still missing compared to $(Y)php$OLD$(N) and the minimum packages that are needed to run a server like Nextcloud. Th${plu%:*} ${plu2#*:} the missing one${plu#*:}:" 3)"
                    bundle echo "$(es3; format_string "$mnp_string" 3)"
                    o3; echo "If you answer $(box no) here, the script will continue without installing th${plu%:*} package${plu#*:}."
                    ask "$(qpf)Do you want to install th${plu%:*} package${plu#*:}" "$YES" && install_new_php "$OLD" "$NEW"
                fi
            else
                separator O
                bundle echo "$(pf; format_string "You entered \"$(Y)$OLD$(N)\" as old and \"$(Y)$NEW$(N)\" as new version. Since php$NEW is not yet installed at all, it will be installed from scratch." 3)"
                ask "$(qpf)Are you ready to install php$NEW" "$YES" && install_new_php "$OLD" "$NEW" || exit1
            fi
        else
            no_candidate "$NEW"
            pf; exit1
        fi

        declare -a c_f_a # changed files array
        spinner O " . searching changed ini- and conf-files for php$OLD to be adapted into php$NEW ." &
        mapfile -t c_f_a< <(p_nosort $(changed_files_ ini "$OLD" "$NEW") $(changed_files_ conf "$OLD" "$NEW"))
        kill_spinner
        if (( ${#c_f_a[@]} )); then
            for FILE in ${c_f_a[@]}; do
                f
                separator2 O
                PKG=${FILE%:*} FILE=${FILE#*:}
                [ -f "$FILE" ] || continue
                if [ "$PKG" = "libapache2-mod-php$OLD" ]; then
                    PKGOLD="$PKG" SAPI="apache2"
                elif [ "$PKG" = "libphp$OLD-embed" ]; then
                    PKGOLD="$PKG" SAPI="embed"
                elif [ "$PKG" = 'embed' ]; then
                    PKGOLD="libphp$OLD-embed" SAPI="embed"
                elif [ "$PKG" = "php$OLD-phpdbg" ]; then
                    PKGOLD="$PKG" SAPI="phpdbg"
                elif [ "$PKG" = 'phpdbg' ]; then
                    PKGOLD="php$OLD-phpdbg" SAPI="phpdbg"
                else
                    PKGOLD="php$OLD-$PKG" SAPI="$PKG"
                fi
                PKGNEW="${PKGOLD/$OLD/$NEW}"
                preq="$(qpf; P; format_string "Do you want to migrate the values for the $(B)${SAPIDESCR[$SAPI]}$(P) from the$(C) $(${X[basename]} $FILE)$(P) for $(Y)$PKGOLD$(P) into the corresponding$(C) $(${X[basename]} $FILE)$(P) for$(Y) $PKGNEW" 3; N)"

                if ask "$preq" "$YES"; then
                    separator O
                    merge_settings "$OLD" "$NEW" "$PKGOLD" "$FILE" "$SAPI"
                fi
            done
        fi
        check_fpm_pool_files "$OLD" "$NEW"
        declare -a o_c_f_a # other changed files array
        spinner C " . searching other changed files for php$OLD to be adapted into php$NEW ." &
        mapfile -t o_c_f_a< <(p_nosort $(changed_files_ other "$OLD" "$NEW"))
        kill_spinner
        if (( ${#o_c_f_a[@]} )); then
            for FILE in ${o_c_f_a[@]}; do
                separator O
                PKG=${FILE%:*} FILE=${FILE#*:}
                f
                diff_other_files
            done
        fi
        separator
        echo "$(pf; format_string "The migration of the settings from php-$OLD to php-$NEW is now completed, unless you have deliberately left out files or settings. These can be made up at any time with:" 3)"
        f
        echo "$(G; prompt; lB) $ME${FLAG[forceflag]}$(C) "$OLD" "$NEW""; N
        f
        echo "$(O; pf; format_string "You now can switch the php version from $(C)php-$OLD$(O) to $(C)php-$NEW$(O) for the commandline and your webserver. Therefore call:" 3; N)"
        f
        echo "$(G; prompt; P) $ME${FLAG[forceflag]} --switch-version"; N
        f
        O; echo "  or run it now:"; N
        if ask "$(qpf)Do you want to switch the php version now" "$YES"; then
            exec $ME${FLAG[forceflag]} json=${J[o]} --switch-version
        else
            contribute_
        fi
        exit 0
    else # if [ $# -ne 2 ]; then
        first_brief_help "Brief help:"
        f
        anykey
        separator
        list_installed
        anykey
        separator
        list_candidates
        call_me candidates
        anykey_noquit
        need_sury_repo
        anykey
        separator
        f
        brief_help "this would be possible calls:"
        N
        f
        exit0
    fi
else
    f
    bundle echo "$(lB; pf; format_string "Your distribution is marked as not fully supported. The script is running in $(lG)safe mode$(lB) and will only provide informations about your system but will make no changes to your system$(${B[needforce]} && bundle echo -n " unless you call it with $(GRAYbg)[ --force ]"; N)" 3)"
    f
    anykey
    separator
    list_installed
    anykey
    separator
    list_candidates
    call_me candidates
    anykey_noquit
    separator
    need_sury_repo
    anykey
    separator
    ask "$(qpf)Do you want to read the help" "$YES" && explain
    N
    f
    exit0
fi


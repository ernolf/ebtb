__shebang_bash__
__path_and_scriptname__
__version_and_datestring__
#
__copyright__
#
__license__
#

__scriptname__

dependencies=(
    "lsb_release#lsb-release#Tool to detect the Linux standard base version"
    "curl#curl#Command line file transfer tool with URL syntax"
    "gpg#gnupg#GNU Privacy Guard"
    "jq#jq#Command-line JSON processor"
)
modules=(
    basics sed tempfile prompt ansi exit spinner anykey line array ask sudo
    dependency vdir integrity dpkg php/versions php/extensions $sin/disclaimer
    $sin/ini $sin/pecl $sin/data_refine
)

__when__

__whoami_whereami__

__vdirname__

### general (minified)
__general__
## include bashmodules (minified) ->
__module_builder__
# check module integrity if root is running script and remove tainted modules (minified)
__module_integrity__
## <- include bashmodules end #

## it starts here:
###############################################################################
# you MUST be root:
su_root "to run this script"
my_update_check
[ "$(tail -n3 "$ca_me"|head -n1)" = "distrib_checked" ]||. <(require $sin/distrib)
###############################################################################

##########
## void ##
##########
# first search for options "--firstrun" "--remove" "--force" and remove from @() array
# and then add the remaining arguments into the new array
declare firstrun=false remove=false force=false step=false
declare -a args
for arg in $@;do
    if [ "$arg" = "--firstrun" ];then firstrun=true
    elif [ "$arg" = "--remove" ];then remove=true
    elif [ "$arg" = "--force" ];then force=true # step=true
    elif [ "$arg" = "--step" ];then step=true
    else args+=("$arg");fi
done;set -- "${args[@]}"&&unset args

declare project="PHP-Extensions"
if $firstrun||[[ -z "$project_dir"||! -d "$project_dir"||"$project_dir" = "UNDEFINED" ]];then
    . <(require $sin/first_run)&&first_run
fi

declare PHP_VERSION
mapfile -t VERSIONS< <(phpquery -V|sort)

declare php_version="$1" # e.g. 8.3
declare module="$2" # e.g. igbinary
declare etc_dir="/etc/php/$php_version"
declare ini_dir="$etc_dir/mods-available"
declare supported_php_versions="8.0 8.1 8.2 8.3"
declare supported_modules="apcu excimer facedetect igbinary imagick lua lz4 memcache memcached msgpack redis rrd smbclient solr ssh2 stomp swoole tideways uopz uploadprogress uuid vips xdebug xhprof yac yaml zstd"
declare not_supported_modules="xmlrpc zmq"
declare module_is_built=false
declare -A built_modules;while read pv m;do built_modules[$pv]+="$m ";done < <(find_built_modules)
declare -A built_module_versions;while read pv mv;do built_module_versions[$pv]+="$mv ";done < <(find_built_module_versions)

ext_state cleanup
ext_state fix

[ "$#" -ne 2 ]&&{
    echo "$(Pbg)Usage:$(B) $me <php_version> <module> [--firstrun] [--remove] [--force] [--step]"
    o 9;B;echo "--firstrun  - first run wizard"
    o 9;B;echo "--remove    - remove module instead if install"
    o 9;B;echo "--force     - install or remove modules even though the script does not know if it works"
    o 9;B;echo "--step      - run everything step by step"
    echo
    B;echo "- supported PHP-versions:     $(G)$supported_php_versions"
    B;echo "- supported (tested) modules: $(G)$supported_modules"
    B;echo "- Built and installed modules:"
    for phpver in "${!built_module_versions[@]}";do
        o2;B;echo "- PHP Version:$(G)     $phpver"
        o4;B;echo "Module Versions:$(G) ${built_module_versions[$phpver]}"
        o2;B;echo "---------------------"
    done
    GRAY;echo "- you can try to build a not tested module with \"--force\", please give me feedback about the result.";N
    exit 1
}

declare basics="build-essential php$php_version-dev"
declare supported=true
declare -i priority=20
declare configure_opts="" need="" m4_patch="" mver="" ini
declare -a ini_file=(
    "; php $module module built by $me"
    "; build dir $project_dir/$project/$php_version/$module"
    "; if you want to completely remove this php $module module run"
    "; $me $php_version $module --remove"
    ";")
[ -z "$module" ]||echo "${built_modules[$php_version]}"|grep -wqs "$module"&&module_is_built=true
declare extension_dir=$(extension_dir_of_ $php_version)
declare extension_include_dir=$(extension_include_dir_of_ $php_version)
#declare installed_modules="$(php$php_version -m|grep -Pv '(^\[|Zend)')"   # <- not clean enough
#declare installed_modules=$(phpquery -v $php_version -M)                  # <- not complete
declare installed_modules="$([ -d "$extension_dir" ]&&cd "$extension_dir";echo *.so|sed 's/\.so//g')" # <- this sworks
declare module_is_installed=false;[[ " $installed_modules " =~ " $module " ]]&&module_is_installed=true
# declare sapis="$(ls $(dirname $extension_dir)/$php_version/sapi/)"
declare sapis="$(phpquery -S -v $php_version)"

if $remove;then
    declare extension="$(module_ini_case $module|sed 's/^.*extension=//;s/\.so.*$//')"
    if $module_is_built;then
        lG;echo "- php$php_version-$module seems to be installed by this script"
        f;GRAY;echo "- next step:$(N) $(B)rm -r \"$project_dir/$project/$php_version/$module\""
        ${step:-false}&&anykey
        o2;B;echo "rm -r \"$project_dir/$project/$php_version/$module\""
        rm -r "$project_dir/$project/$php_version/$module"
        f;GRAY;echo "- next step:$(N) $(B)rm \"$extension_dir/$extension.{so,la}\""
        ${step:-false}&&anykey
        o2;B;echo "rm \"$extension_dir/$extension.{so,la}\""
        rm $extension_dir/$extension.{so,la}
        [ -d "$extension_include_dir/$module" ]&&rm -fr $extension_include_dir/$module
        module_ini
        ext_state purge $module $php_version
    elif $module_is_installed;then
        line ' ' Pbg 2/76 a0
        o4;echo "$(Pbg)php$php_version-$module is installed but there is no build directory in$(N)"
        line ' ' Pbg 2/76 a0
        o4;echo "$(Pbg)$project_dir. So it is treated like a foreign module.$(N)"
        line ' ' Pbg 2/76 a0
        o4;printf "$(Pbg)But$(N)"
        if $force;then
            o 8;echo "$(Pbg)--force has been passed.$(N)"
            f;GRAY;echo "- next step:$(N) $(B)rm \"$extension_dir/$extension.{so,la}\""
            ${step:-false}&&anykey
            o2;B;echo "rm \"$extension_dir/$extension.{so,la}\""
            rm $extension_dir/$extension.{so,la}
            [ -d "$extension_include_dir/$module" ]&&rm -fr $extension_include_dir/$module
            module_ini
            ext_state purge $module $php_version
        else
            o 8;echo "$(Pbg)if you know what you are doing, you can remove the module and$(N)"
            line ' ' Pbg 2/76 a0
            o4;echo "$(Pbg)ini-files using --force$(N)"
            exit1
        fi
    else
        echo "$(Pbg)- php$php_version-$module is not installed on this box $(N)"
        ext_state purge $module $php_version
        exit 1
    fi
else
    if ! echo "$supported_php_versions"|grep -wqs "$php_version";then
        R;echo "- \"$php_version\" is not a supported PHP vesion. Supported versions are $supported_php_versions"
        exit 1
    fi
    if $module_is_built;then
        lG;echo "- php$php_version-$module seems already to be built and installed by this script"
        o2;lG;echo "if you want to update or reinstall $module, you should first remove it."
        exit 1
    elif $module_is_installed;then
        echo "$(Pbg)- php$php_version-$module is already installed but apperently not built by this script $(N)"
        exit 1
    else
        if ! echo "$supported_modules"|grep -wqs "$module";then supported=false
            if echo "$not_supported_modules"|grep -wqs "$module";then
                echo "$(Pbg)- This script has already been tested to build \"php-$module\" but it failed. $(N)"
                echo "$(Pbg)  please give me feedback if you have working patches to make build process succeed. $(N)"
                exit 1
            else
                echo "$(Pbg)- This script has not yet been tested to build \"php-$module\". $(N)"
                if $force;then
                    echo "$(Pbg)  but \"--force\" has been passed, so lets give it a try, $(N)"
                    echo "$(Pbg)  please give me feedback about the result. $(N)"
                else
                    echo "$(Pbg)  but you can try to build it using \"--force\" $(N)"
                    exit 1
                fi
            fi
        fi
    fi

    [ -d "$project_dir/$project/$php_version/$module" ]||mkdir -p $project_dir/$project/$php_version/$module
    cd $project_dir/$project/$php_version/$module

    case "$module" in
          apcu) apt_install $basics
                check_conflicts "xcache yac"
                pecl_download
                ;;
    facedetect) apt_install $basics git libopencv-dev
                mver=$module-1.1.0
                git clone https://github.com/infusion/PHP-Facedetect.git $mver
                cd $mver
                ;;
      igbinary) apt_install $basics
                pecl_download
                ;;
       imagick) apt_install $basics libmagickwand-dev
                pecl_download
                ;;
#   libvirt-php) apt_install $basics php$php_version-imagick git libvirt-dev;configure_opts="--with-libvirt"
#                mver=$module-0.5.8;git clone https://gitlab.com/libvirt/libvirt-php.git $mver;cd $mver/src  ;;
#                ;;
           lua) apt_install $basics liblua5.4-dev git
                configure_opts="--with-lua-version=5.4"
                mver=$module-2.0.7
                git clone https://github.com/badoo/php-lua.git $mver
                cd $mver
                ;;
           lz4) apt_install $basics liblz4-dev git
                mver=$module-0.4.3
                git clone --recursive --depth=1 https://github.com/kjdev/php-ext-lz4.git $mver
                cd $mver
                ;;
     memcached) apt_install $basics
                pecl_download
                priority=25 need="msgpack"
                ;;
         redis) apt_install $basics liblz4-dev libzstd-dev
                need="igbinary"
                configure_opts="--enable-redis-igbinary --enable-redis-lzf --enable-redis-zstd --enable-redis-lz4 --with-liblz4"
                pecl_download
                ;;
           rrd) apt_install $basics librrd-dev
                pecl_download
                ;;
          solr) apt_install $basics libcurl4-openssl-dev
                ln -s /usr/include/x86_64-linux-gnu/curl /usr/include/curl
                pecl_download
                ;;
          ssh2) apt_install $basics libssh2-1-dev
                pecl_download
                ;;
     smbclient) apt_install $basics libsmbclient-dev
                pecl_download
                ;;
        swoole) apt_install $basics
                pecl_download
                priority=25 need="mysql"
                ;;
      tideways) apt_install $basics git
                mver=$module-5.0.4
                git clone https://github.com/tideways/php-xhprof-extension.git $mver
                cd $mver
                ;;
          vips) apt_install $basics libvips-dev
                priority=30
                pecl_download
                ;;
        xdebug) apt_install $basics
                pecl_download
                ;;
        xhprof) apt_install $basics git
                mver=$module-2.3.9
                git clone https://github.com/longxinH/xhprof.git $mver
                cd $mver/extension
                ;;
           yac) apt_install $basics
                check_conflicts "apcu xcache"
                pecl_download
                ;;
          yaml) apt_install $basics libyaml-dev
                pecl_download
                ;;
# does not compile:
#           zmq) apt_install $basics libzmq3-dev
#                pecl_download channel://pecl.php.net/zmq-1.1.3
#                ;;
          zstd) apt_install $basics
                priority=30
                pecl_download
                ;;
             *) apt_install $basics
                pecl_download
    esac
    case $need in
      igbinary) [ -d "$extension_include_dir/$need/src/php7" ]||{
                    f
                    o2;R;echo "The $module module depends on igbinary but it could not be found."
                    o2;R;echo "You must first install or build php$php_version-igbinary:"
                    f;G;echo "$(prompt;P) $me $php_version igbinary"
                    cd;f;o2;G;echo -n "cleaning up..."
                    "$me" "json=$my_json" $php_version $module --remove &>/dev/null
                    te1;exit0;}
                ;;
    esac
    [ -z "$m4_patch" ]||{ echo "$(B)- patching config.m4";N;sed -i "$m4_patch" config.m4;}
    ${step:-false}&&anykey
    declare phpize_output=$(phpize$php_version 2>&1|tee /dev/tty)
    declare autoupdate_required=$(echo "$phpize_output"|grep -c "You should run autoupdate")
    ${step:-false}&&anykey
    (("$autoupdate_required"))&&{ echo "running autoupdate..";autoupdate;}
    ${step:-false}&&anykey
    if ./configure --with-php-config=/usr/bin/php-config$php_version $configure_opts&&make;then
        lG;echo "- from the point of view of this script, it looks like the build process was a success!"
        $supported||{ o2;lG;echo "even though this module was not tested. Please give me feedback.";}
        ${step:-false}&&anykey
        f;GRAY;echo "- next step: $(B)make install:"
        ${step:-false} && anykey
        f;C;make install
        module_ini
    else
        R;echo "- from the point of view of this script, it looks like the build process failed! "
        $supported&&{ o2;R;echo "even though it has successfully been tested before. Please give me feedback";}
    fi
fi

exit 0
<<EOF
Module         8.0 8.1 8.2 8.3 Supported
--------------+---+---+---+---+---------
amqp          | x | x | x | x | <
apcu          | x | x | x | x | <   X
ast           | x | x | x | x | <
bcmath        | x | x | x | x | <
bz2           | x | x | x | x | <
cgi           | x | x | x | x | <
cli           | x | x | x | x | <
common        | x | x | x | x | <
curl          | x | x | x | x | <
dba           | x | x | x | x | <
decimal       | x | x | x | x | <
dev           | x | x | x | x | <
ds            | x | x | x | x | <
enchant       | x | x | x | x | <
excimer       | x | x | x | - |     X
facedetect    | x | x | - | - |     X
fpm           | x | x | x | x | <
gd            | x | x | x | x | <
gearman       | x | x | x | x | <
gmagick       | x | x | x | x | <
gmp           | x | x | x | x | <
gnupg         | x | x | x | x | <
grpc          | x | x | x | x | <
http          | x | x | x | x | <
igbinary      | x | x | x | x | <   X
imagick       | x | x | x | x | <   X
imap          | x | x | x | x | <
inotify       | x | x | x | x | <
interbase     | x | x | x | x | <
intl          | x | x | x | x | <
ldap          | x | x | x | x | <
libvirt-php   | x | x | x | - |
lua           | - | - | - | - |     X
lz4           | x | x | x | - |     X
mailparse     | x | x | x | x | <
maxminddb     | x | x | x | x | <
mbstring      | x | x | x | x | <
mcrypt        | x | x | x | - |
memcache      | x | x | x | x | <   X
memcached     | x | x | x | x | <   X
mongodb       | x | x | x | x | <
msgpack       | x | x | x | x | <   X
mysql         | x | x | x | x | <
oauth         | x | x | x | x | <
odbc          | x | x | x | x | <
opcache       | x | x | x | x | <
pcov          | x | x | x | x | <
pgsql         | x | x | x | x | <
phalcon5      | x | x | - | - |
phpdbg        | x | x | x | x | <
pinba         | x | x | x | - |
propro        | x | x | x | - |
protobuf      | x | x | x | x | <
ps            | x | x | x | x | <
pspell        | x | x | x | x | <
psr           | x | x | x | x | <
raphf         | x | x | x | x | <
rdkafka       | x | x | x | x | <
readline      | x | x | x | x | <
redis         | x | x | x | x | <   X
rrd           | x | x | x | x | <   X
smbclient     | x | x | x | x | <   X
snmp          | x | x | x | x | <
soap          | x | x | x | x | <
solr          | x | x | x | x | <   X
sqlite3       | x | x | x | x | <
ssh2          | x | x | x | x | <   x
stomp         | x | x | x | x | <   X
swoole        | x | x | x | x | <   x
sybase        | x | x | x | x | <
tideways      | x | x | x | - |     X
tidy          | x | x | x | x | <
uopz          | x | x | x | x | <   X
uploadprogress| x | x | x | x | <   X
uuid          | x | x | x | x | <   X
vips          | x | x | x | x | <   X
xdebug        | x | x | x | x |     X
xhprof        | x | x | x | x | <   X
xml           | x | x | x | x | <
xmlrpc        | x | x | x | x | <
xsl           | x | x | x | x | <
yac           | x | x | x | x | <   X
yaml          | x | x | x | x | <   X
zip           | x | x | x | x | <
zmq           | x | x | x | x | <
zstd          | x | x | x | x | <   X
EOF


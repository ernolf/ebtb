__shebang_bash__
__path_and_scriptname__
__version_and_datestring__
#
__copyright__
#
__license__
#

__whoami_whereami__
__scriptname__
modules=(
    today interval prompt fstring httpd php/version php/alternatives ask
    php/versions php/fpm dist/os_release php/sury php/extensions
    $MS/disclaimer $MS/ini $MS/pecl $MS/patch $MS/data_refine
)
__debug__
__when__
# don't change this by hand, its done safe and interactively by the script:
declare vdirname='project_dir' # <-- don't change this!
declare dflt_$vdirname='UNDEFINED' # <-- don't change this!
declare $vdirname="UNDEFINED" # <-- don't change this!
__tempdir__
__module_server__
__general__
__module_loader__
__module_integrity__

contribute_(){
    . <(require contribute)
    contribute "https://help.nextcloud.com/t/newest-php8-4-on-debian-ubuntu-build-missing-modules-with-php-module-builder/174766"
}; donate_(){ contribute_;}
[[ "$@" =~ (donat|contrib) ]] && contribute_

## it starts here:
# you MUST be root:
su_root "to run this script"
my_update_check
tnh1_strg distrib_checked || . <(require $MS/distrib)

##########
## void ##
##########
# first search for options "--firstrun" "--remove" "--force" and remove from @() array
# and then add the remaining arguments into the new array
declare bool arg
declare -a bools args
bools=(firstrun remove force step quiet module_is_built supported module_is_installed)
for bool in ${bools[@]}; do B[$bool]=false; done
unset -v bool bools

for arg in "$@"; do
    case "$arg" in
        --firstrun) B[firstrun]=true ;;
        --remove)   B[remove]=true   ;;
        --force)    B[force]=true    ;;
        --step)     B[step]=true     ;;
        --quiet)    B[quiet]=true    ;;
        *)          args+=("$arg")
    esac
done
set -- "${args[@]}" && unset -v args


declare project
project="PHP-Extensions"
if ${B[firstrun]} || [[ -z "$project_dir" || ! -d "$project_dir" || "$project_dir" = "UNDEFINED" ]]; then
    . <(require $MS/first_run) && first_run
fi

declare php_version module etc_dir ini_dir pv m mv configure_opts need m4_patch mver ini extension_dir extension_include_dir installed_modules extension
declare -i priority
declare -a supported_php_versions supported_modules not_supported_modules basics ini_file
declare -A built_modules built_module_versions

php_version="$1" # e.g. 8.3
module="$2" # e.g. igbinary
etc_dir="/etc/php/$php_version"
ini_dir="$etc_dir/mods-available"

supported_php_versions=(8.0 8.1 8.2 8.3 8.4)
supported_modules=(apcu brotli decimal excimer facedetect igbinary imagick inotify lua lz4 memcache memcached msgpack redis rrd smbclient solr ssh2 stomp swoole tideways uopz uploadprogress uuid vips xdebug xhprof yac yaml zstd)
not_supported_modules=(xmlrpc zmq)

while read pv m; do built_modules[$pv]+="$m "; done < <(find_built_modules)
while read pv mv; do built_module_versions[$pv]+="$mv "; done < <(find_built_module_versions)

ext_state cleanup
ext_state fix

[ "$#" -ne 2 ] && {
    echo "$(Pbg)Usage:$(B) $ME <php_version> <module> [--firstrun] [--remove] [--force] [--step]"
    o 9; B; echo "--firstrun  - first run wizard"
    o 9; B; echo "--remove    - remove module instead if install"
    o 9; B; echo "--force     - install or remove modules even though the script does not know if it works"
    o 9; B; echo "--step      - run everything step by step"
    echo
    B; echo "- supported PHP-versions:     $(G)${supported_php_versions[@]}"
    B; echo "- supported (tested) modules: $(G)${supported_modules[@]}"
    B; echo "- Built and installed modules:"
    for phpver in "${!built_module_versions[@]}"; do
        o2; B; echo "- PHP Version:$(G)     $phpver"
        o4; B; echo "Module Versions:$(G) ${built_module_versions[$phpver]}"
        o2; B; echo "---------------------"
    done
    GRAY;echo "- you can try to build a not tested module with \"--force\", please give me feedback about the result.";N
    exit 1
}

basics=(build-essential php-pear php$php_version-dev php$php_version-xml)
B[supported]=true
priority=20
ini_file=(
    "; php $module module built by $ME"
    "; build dir $project_dir/$project/$php_version/$module"
    "; if you want to completely remove this php $module module run"
    "; $ME $php_version $module --remove"
    ";")
[ -z "$module" ] || echo "${built_modules[$php_version]}"|${X[grep]} -wqs "$module" && B[module_is_built]=true

extension_dir=$(extension_dir_of_ $php_version)
extension_include_dir=$(extension_include_dir_of_ $php_version)

#installed_modules="$(php$php_version -m|${X[grep]} -Pv '(^\[|Zend)')"   # <- not clean enough
#installed_modules=$(/usr/sbin/phpquery -v $php_version -M)                  # <- not complete
installed_modules="$([ -d "$extension_dir" ] && cd "$extension_dir"; echo *.so | sed_ 's/\.so//g')" # <- this sworks
[[ " $installed_modules " =~ " $module " ]] && B[module_is_installed]=true

if ${B[remove]}; then
    extension="$(extension_ini_case "$module" | sed_ 's/^.*extension=//; s/\.so.*$//')"
    if ${B[module_is_built]}; then
        lG; echo "- php$php_version-$module seems to be installed by this script"
        ${B[quiet]} || { f; GRAY; echo "- next step:$(N) $(B)rm -r \"$project_dir/$project/$php_version/$module\""; }
        ${B[step]:-false} && anykey
        o2; B; echo "rm -r \"$project_dir/$project/$php_version/$module\""
        cleanup "$project_dir/$project/$php_version/$module"
        ${B[quiet]} || { f; GRAY; echo "- next step:$(N) $(B)rm \"$extension_dir/$extension.{so,la}\""; }
        ${B[step]:-false} && anykey
        o2; B; echo "rm \"$extension_dir/$extension.{so,la}\""
        cleanup "$extension_dir/$extension".{so,la}
        cleanup "$extension_include_dir/$module"
        module_ini
        ext_state purge "$module" "$php_version"
    elif ${B[module_is_installed]}; then
        line ' ' Pbg 2/76 a0
        o4; echo "$(Pbg)php$php_version-$module is installed but there is no build directory in$(N)"
        line ' ' Pbg 2/76 a0
        o4; echo "$(Pbg)$project_dir. So it is treated like a foreign module.$(N)"
        line ' ' Pbg 2/76 a0
        o4; printf "$(Pbg)But$(N)"
        if ${B[force]}; then
            o 8; echo "$(Pbg)--force has been passed.$(N)"
            ${B[quiet]} || { f ;GRAY; echo "- next step:$(N) $(B)rm \"$extension_dir/$extension.{so,la}\""; }
            ${B[step]:-false} && anykey
            o2; B; echo "rm \"$extension_dir/$extension.{so,la}\""
            cleanup "$extension_dir/$extension.{so,la}"
            cleanup "$extension_include_dir/$module"
            module_ini
            ext_state purge $module $php_version
        else
            o 8; echo "$(Pbg)if you know what you are doing, you can remove the module and$(N)"
            line ' ' Pbg 2/76 a0
            o4; echo "$(Pbg)ini-files using --force$(N)"
            exit1
        fi
    else
        echo "$(Pbg)- php$php_version-$module is not installed on this box $(N)"
        ext_state purge $module $php_version
        exit 1
    fi
else
    if ! echo "${supported_php_versions[@]}" | ${X[grep]} -wqs "$php_version"; then
        R; echo "- \"$php_version\" is not a supported PHP version. Supported versions are ${supported_php_versions[@]}"
        exit 1
    fi
    if ${B[module_is_built]}; then
        lG; echo "- php$php_version-$module seems already to be built and installed by this script"
        o2; lG; echo "if you want to update or reinstall $module, you should first remove it."
        exit 1
    elif ${B[module_is_installed]}; then
        echo "$(Pbg)- php$php_version-$module is already installed but apperently not built by this script $(N)"
        exit 1
    else
        if ! echo "${supported_modules[@]}" | ${X[grep]} -wqs "$module"; then B[supported]=false
            if echo "${not_supported_modules[@]}" | ${X[grep]} -wqs "$module"; then
                echo "$(Pbg)- This script has already been tested to build \"php-$module\" but it failed. $(N)"
                echo "$(Pbg)  please give me feedback if you have working patches to make build process succeed. $(N)"
                exit 1
            else
                echo "$(Pbg)- This script has not yet been tested to build \"php-$module\". $(N)"
                if ${B[force]}; then
                    echo "$(Pbg)  but \"--force\" has been passed, so lets give it a try, $(N)"
                    echo "$(Pbg)  please give me feedback about the result. $(N)"
                else
                    echo "$(Pbg)  but you can try to build it using \"--force\" $(N)"
                    exit 1
                fi
            fi
        fi
    fi

    [ -d "$project_dir/$project/$php_version/$module" ]||${X[mkdir]} -p $project_dir/$project/$php_version/$module
    cd $project_dir/$project/$php_version/$module

    case "$module" in
          apcu) apt_install ${basics[@]}
                check_conflicts "xcache yac"
                pecl_download
                ;;
        brotli) apt_install ${basics[@]} libbrotli-dev
                configure_opts="--with-libbrotli"
                pecl_download
                ;;
       decimal) apt_install ${basics[@]} libmpdec-dev
                priority=30
                pecl_download
                ;;
    facedetect) apt_install ${basics[@]} git libopencv-dev
                mver=$module-1.1.0
                git clone https://github.com/infusion/PHP-Facedetect.git $mver
                cd $mver
                ;;
      igbinary) apt_install ${basics[@]}
                pecl_download
                ;;
       imagick) apt_install ${basics[@]} libmagickwand-dev
                pecl_download
                ;;
       inotify) apt_install ${basics[@]}
                priority=30
                pecl_download
                ;;
#   libvirt-php) apt_install ${basics[@]} php$php_version-imagick git libvirt-dev;configure_opts="--with-libvirt"
#                mver=$module-0.5.8;git clone https://gitlab.com/libvirt/libvirt-php.git $mver;cd $mver/src  ;;
#                ;;
           lua) apt_install ${basics[@]} liblua5.4-dev git
                configure_opts="--with-lua-version=5.4"
                mver=$module-2.0.7
                git clone https://github.com/badoo/php-lua.git $mver
                cd $mver
                ;;
           lz4) apt_install ${basics[@]} liblz4-dev git
                mver=$module-0.4.3
                git clone --recursive --depth=1 https://github.com/kjdev/php-ext-lz4.git $mver
                cd $mver
                ;;
     memcached) apt_install ${basics[@]}
                pecl_download
                priority=25 need="msgpack"
                ;;
         redis) apt_install ${basics[@]} liblz4-dev libzstd-dev
                priority=25 need="igbinary"
                configure_opts="--enable-redis-igbinary --enable-redis-lzf --enable-redis-zstd --enable-redis-lz4 --with-liblz4"
                pecl_download
                ;;
           rrd) apt_install ${basics[@]} librrd-dev
                pecl_download
                ;;
          solr) apt_install ${basics[@]} libcurl4-openssl-dev
                ln -s /usr/include/x86_64-linux-gnu/curl /usr/include/curl
                pecl_download
                ;;
          ssh2) apt_install ${basics[@]} libssh2-1-dev
                pecl_download
                ;;
     smbclient) apt_install ${basics[@]} libsmbclient-dev
                pecl_download
                ;;
        swoole) apt_install ${basics[@]}
                pecl_download
                priority=25 need="mysql"
                ;;
      tideways) apt_install ${basics[@]} git
                mver=$module-5.0.4
                git clone https://github.com/tideways/php-xhprof-extension.git $mver
                cd $mver
                ;;
          vips) apt_install ${basics[@]} libvips-dev
                priority=30
                pecl_download
                ;;
        xdebug) apt_install ${basics[@]}
                pecl_download
                ;;
        xhprof) apt_install ${basics[@]} git
                mver=$module-2.3.10
                git clone https://github.com/longxinH/xhprof.git $mver
                cd $mver/extension
                ;;
           yac) apt_install ${basics[@]}
                check_conflicts "apcu xcache"
                pecl_download
                ;;
          yaml) apt_install ${basics[@]} libyaml-dev
                pecl_download
                ;;
# does not compile:
#           zmq) apt_install ${basics[@]} libzmq3-dev
#                pecl_download channel://pecl.php.net/zmq-1.1.3
#                ;;
          zstd) apt_install ${basics[@]} libzstd-dev
                priority=30
                pecl_download
                ;;
             *) apt_install ${basics[@]}
                pecl_download
    esac
    case $need in
      igbinary) [ -d "$extension_include_dir/$need/src/php7" ] || {
                    f
                    o2; R; echo "The $module module depends on $need but it could not be found."
                    o2; R; echo "You must first install or build php$php_version-$need:"
                    f
                    echo "$(G; prompt; P) $ME $php_version $need"
                    cd; f
                    o2; G; echo -n "cleaning up..."
                    q0 $ME "json=${J[o]}" $php_version $module --remove
                    te1; exit0
                }
                ;;
    esac
    patch_m4
    ${B[step]:-false} && anykey
    patch_code
    ${B[step]:-false} && anykey
    declare phpize_output autoupdate_required
    phpize_output=$(${X[phpize$php_version]} 2>&1 | ${X[tee]} $TTY)
    autoupdate_required=$(echo "$phpize_output" | ${X[grep]} -c "You should run autoupdate")
    ${B[step]:-false} && anykey
    (("$autoupdate_required")) && { echo "running autoupdate.."; ${X[autoupdate]}; }
    ${B[step]:-false} && anykey
    if ./configure --with-php-config=/usr/bin/php-config$php_version $configure_opts && ${X[make]}; then
        lG; echo "- from the point of view of this script, it looks like the build process was a success!"
        ${B[supported]} || { o2; lG; echo "even though this module was not tested. Please give me feedback."; }
        ${B[step]:-false} && anykey
        f
        GRAY; echo "- next step: $(B)make install:"
        ${B[step]:-false} && anykey
        f
        C; ${X[make]} install
        module_ini
    else
        R; echo "- from the point of view of this script, it looks like the build process failed! "
        ${B[supported]} && { o2; R; echo "even though it has successfully been tested before. Please give me feedback"; }
    fi
fi

${B[quiet]} && exit 0 || exit0
# COMMENT -->
<<EOF
Module         8.0 8.1 8.2 8.3 8.4 Supported
--------------+---+---+---+---+---------
amqp          | x | x | x | x | x |
apcu          | x | x | x | x | x |     X
ast           | x | x | x | x | x |
bcmath        | x | x | x | x | x |
brotli        | - | - | - | - | - |     X
bz2           | x | x | x | x | x |
cgi           | x | x | x | x | x |
cli           | x | x | x | x | x |
common        | x | x | x | x | x |
curl          | x | x | x | x | x |
dba           | x | x | x | x | x |
decimal       | x | x | x | x | - |     X
dev           | x | x | x | x | x |
dio           | x | x | x | x | - |
ds            | x | x | x | x | x |
enchant       | x | x | x | x | x |
excimer       | x | x | x | x | x |     X
facedetect    | x | x | - | - | - |     X
fpm           | x | x | x | x | x |
gd            | x | x | x | x | x |
gearman       | x | x | x | x | x |
gmagick       | x | x | x | x | x |
gmp           | x | x | x | x | x |
gnupg         | x | x | x | x | x |
grpc          | x | x | x | x | - |
http          | x | x | x | x | x |
igbinary      | x | x | x | x | x |     X
imagick       | x | x | x | x | x |     X
imap          | x | x | x | x | x |
inotify       | x | x | x | x | - |     X
interbase     | x | x | x | x | x |
intl          | x | x | x | x | x |
ldap          | x | x | x | x | x |
libvirt-php   | x | x | x | x | x |
lua           | - | - | - | - | - |     X
lz4           | x | x | x | x | - |     X
mailparse     | x | x | x | x | x |
maxminddb     | x | x | x | x | x |
mbstring      | x | x | x | x | x |
mcrypt        | x | x | x | x | x |
memcache      | x | x | x | x | x |     X
memcached     | x | x | x | x | x |     X
mongodb       | x | x | x | x | x |
msgpack       | x | x | x | x | x |     X
mysql         | x | x | x | x | x |
oauth         | x | x | x | x | x |
odbc          | x | x | x | x | x |
opcache       | x | x | x | x | x |
pcov          | x | x | x | x | x |
pgsql         | x | x | x | x | x |
phalcon       | x | x | x | x | x |
phalcon5      | x | x | x | x | - |
phpdbg        | x | x | x | x | x |
pinba         | x | x | x | x | - |
pq            | x | x | x | x | x |
propro        | x | x | x | - | - |
protobuf      | x | x | x | x | - |
ps            | x | x | x | x | x |
pspell        | x | x | x | x | x |
psr           | x | x | x | x | x |
raphf         | x | x | x | x | x |
rdkafka       | x | x | x | x | - |
readline      | x | x | x | x | x |
redis         | x | x | x | x | x |     X
rrd           | x | x | x | x | x |     X
smbclient     | x | x | x | x | - |     X
snmp          | x | x | x | x | x |
soap          | x | x | x | x | x |
solr          | x | x | x | x | - |     X
sqlite3       | x | x | x | x | x |
ssh2          | x | x | x | x | x |     x
stomp         | x | x | x | x | x |     X
swoole        | x | x | x | x | - |     x
sybase        | x | x | x | x | x |
tideways      | x | x | x | - | - |     X
tidy          | x | x | x | x | x |
uopz          | x | x | x | x | x |     X
uploadprogress| x | x | x | x | x |     X
uuid          | x | x | x | x | x |     X
vips          | x | x | x | x | - |     X
xdebug        | x | x | x | x | x |     X
xhprof        | x | x | x | x | - |     X
xml           | x | x | x | x | x |
xmlrpc        | x | x | x | x | x |
xsl           | x | x | x | x | x |
yac           | x | x | x | x | x |     X
yaml          | x | x | x | x | x |     X
zip           | x | x | x | x | x |
zmq           | x | x | x | x | x |
zstd          | x | x | x | x | - |     X
EOF


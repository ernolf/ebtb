declare -a placeholders
placeholders=(
    shebang_bash
    bashlib
    minified_bashlib
    path_and_scriptname
    path_and_modulename
    version_and_datestring
    copyright
    license
    scriptname
    libversion
    debug
    when
    whoami_whereami
    vdirname
    homedir
    tempdir
    module_server
    general
    module_loader
    module_integrity
    nextcloud_updater
    binaries_used
)

# binaries for build process
declare binary NUL
NUL='/dev/null'
declare -a build_binaries
build_binaries=(basename cat chown cp date diff dirname find gawk grep gpg head jq mkdir php rm sed seq sha256sum shfmt sort stat sudo tail)
unset BINARIES
declare -gA BINARIES 2>$NUL || declare -A BINARIES
BINARIES[env]="$(command -v env) LC_MESSAGES=C"

for binary in "${build_binaries[@]}"; do
#    if [ -L "$(command -v $binary)" ]; then
#        BINARIES[$binary]="${BINARIES[env]} $(${BINARIES[readlink]} -f $(command -v $binary))"
#    else
        BINARIES[$binary]="${BINARIES[env]} $(command -v $binary)"
#    fi
done
# Create a nameref for BINARIES named X
declare -n X=BINARIES
_(){ false; }
q0(){ "$@" &>$NUL; }
q1(){ "$@" >$NUL; }
q2(){ "$@" 2>$NUL; }
# printf not sorted line by line
p_nosort(){ printf '%s\n' "$@"; }
# make not required functions quiet:
mh(){ :; }; fn_ln(){ :; }; require_arg(){ :; }; required_args(){ :; }; log_trace(){ :; }
binaries_exceptions(){
    ${X[gawk]} '/^[[:space:]]*for bb in/ {
        # remove leading "for bb in " including any whitespace
        sub(/^[[:space:]]*for bb in[[:space:]]*/, "")
        # strip off everything from the first semicolon onward
        sub(/[[:space:]]*;.*/, "")
        # replace one or more whitespace characters with a pipe
        gsub(/[[:space:]]+/, "|")
        # accumulate into the variable `out`, joining with pipe if already set
        out = (out ? out "|" $0 : $0)
    }
    END {
        # if anything was collected, wrap in parentheses and print
        if (out) print "(" out ")"
    }' modules/binaries
}

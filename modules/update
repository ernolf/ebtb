__minified_bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

. <(req backcomp)
${UPDATE_BASHLIB:-_} && return
UPDATE_BASHLIB=:

# TODO 0 -->
#    . <(lrequire binaries)
#    . <(lrequire button)
#    . <(lrequire line)
#    . <(lrequire sudo)
#    . <(lrequire vdir)
#    . <(lrequire integrity)
# TODO <-- 0
. <(lrequire cleanup)
. <(lrequire prefix)

: ${M[e]:=${M[epoch]:=$epoch}}
: ${J[e]:=${J[epoch]:=$my_epoch}}
: ${J[h]:=${J[hash]:=$my_hash}}

version_(){ ${X[gawk]} '/^# version 20/ {print $3, $4}' "$1";}

backup_and_replace_me_with_(){
    local new bkp
    new="$1" bkp="$MP~${M[e]}"
    ${X[mv]} -u "$MP" "$bkp" &&\
    ${X[mv]} -u "$new" "$MP" &&\
    ${X[chmod]} +x "$MP" &&\
    ${X[chmod]} -x "$bkp"
}

replace_me_with_(){
    local new
    new="$1"
    ${X[mv]} -fu "$new" "$MP" &&\
    ${X[chmod]} +x "$MP"
}

backups(){
    ${X[find]} "$MD" -type f -name "${M[b]}~[0-9]*" -not -executable | ${X[sort]} $1
}

my_update(){
    local my_tmp shash
    local -l key
    local -a bkp_list
    local -i max_backups num_bkps num2del i
    my_tmp="$(tf shm u)" max_backups=0 num_bkps=0 num2del=0 i=0
    [ "${M[c]}" = test ] && max_backups=20
    su_root "to update" my_update
    mh "$(funcname_and_lineno) starting update.."
    while :; do
        c -o "$my_tmp" -A "$A" ${V[cargs]}/scripts/${M[n]}
        shash="$(${X[sha256sum]} "$my_tmp" | ${X[gawk]} '{print $1}')"
        if [ "$shash" = "${J[h]}" ]; then
            mh "$(funcname_and_lineno) hash ok"
            echo
            line '=' P 5/a
            o5; lG; echo "Hash OK, download verified!"
            line '-' P 5/a
            break
        else
            mh "$(funcname_and_lineno) wrong hash!"
            f
            o5; R; echo "Wrong hash - file corrupted - download failed!"; N
            o5; echo "- script_hash$(o 22)= $shash"
            o5; echo "- expected_hash$(o 22)= ${J[h]}"
            o5; echo "Press - [r] retry update - [a] abort"
            read -rsn 1 key
            case "$key" in
                a)  mh "$(funcname_and_lineno) update aborted"
                    o5; echo "abort update atempt. You can retry later."
                    exit1
                    ;;
                r)  mh "$(funcname_and_lineno) retry update"
                    cleanup "$my_tmp"
            esac
        fi
    done
    [ -z "$vdirname" ] || {
        # uses indirect parameter expansion ("${!var}", BASH > 4) to eliminate the need for `eval`
        local dflt_vdirname="dflt_$vdirname"
        local vdir="${!vdirname}" ddir="${!dflt_vdirname}"
        [ "$vdir" = "$ddir" ] || setvdir d v "$my_tmp"
    }
    (( max_backups )) && backup_and_replace_me_with_ "$my_tmp" || replace_me_with_ "$my_tmp"
    # cleanup old backupfiles
    mapfile -t bkp_list< <(backups)
    num_bkps=${#bkp_list[@]}
    if (( num_bkps > max_backups )); then
        num2del="$(( num_bkps - max_backups ))"
        o5; echo "cleaning up old backups"
        for (( i=0; i<num2del; i++ )); do
            o5; echo "- deleting: ${bkp_list[i]}"
            cleanup "${bkp_list[i]}"
        done
    fi
    integrity_check && {
        # set "${D[li]}/$MS/.checked" to 0 if exists to build up with newest modules
        [ -f "${D[li]}/$MS/.checked" ] && echo "0" >"${D[li]}/$MS/.checked"
        mh "$(funcname_and_lineno) update succeeded"
        f
        pf; G; echo "Update was successfull. Please start script again"
        cleanup "${F[binary]}"
        exit 0
    }
}

my_update_check(){
#    configure_systemd_tmpfiles
    local -l key
    if (( J[e] > M[e] )); then
        mh "$(funcname_and_lineno) update available"
        f
        o5; echo "A new version of this script is available."
        while :; do
            o5; echo "Press - [$(lG)u$(N)] for update - [$(Y)i$(N)] to ignore"
            read -rsn 1 key
            case "$key" in
                u)  my_update
                    ;;
                i)  V[upinf]="(update available)"
                    (q0 di) &
                    break
            esac
        done
    elif (( J[e] == M[e] )); then
        V[upinf]="(latest version)"
        (q0 di) &
    fi
}

restore_backup(){
    local bkp from ver
    local -l num key
    local -i n i c2 c3
    local -a bkp_list
    n=1 c2=9 c3=29
    su_root "to restore from backup" restore_backup
    mapfile -t bkp_list< <(backups -r)
    (( ${#bkp_list[@]} )) || {
        o2; echo "no backups available."
        anykey
        return
    }
    line '=' P 2/78 b1
    o3; B; echo "These backups of \"$(C)${M[b]}$(B)\" are available:"; N
    o4; Y; echo "Num$(o $c2)Version$(o $c3)Backup from"
    line '-' dP 2/78
    for i in "${!bkp_list[@]}"; do
        bkp="${bkp_list[i]}"
        from="$(${X[stat]} -c "%y" "$bkp")"
        ver="$(version_ "$bkp")"
        o3; echo "- $((n+i))$(o $c2)\"$ver\"$(o $c3)\"$from\""
    done
    line '-' dP 2/78 a2
    o3; echo "Enter the number of the backup you want to restore or $(q2q)"
    while :; do
        read -rsn 2 num
        [ "$num" = "q" ] && exit1
        [[ "$num" =~ ^[1-9][0-9]{0,1}$ ]] || {
            o3; echo "$invi Please enter a valid number or $(q2q)"
            continue
        }
        (( num<n || num>=(n+${#bkp_list[@]}) )) && {
            o3; echo "Invalid backup number. Please choose a number from the list or $(q2q)"
            continue
        }
        i="$((num-n))"
        bkp="${bkp_list[i]}"
        ver="$(version_ "$bkp")"
        o3; echo "Your choice: version \"$ver\""
        o3; echo "do you want to restore this backup?"
        o3; echo "Press $(box y) to proceed - $(box c) to cancel - $(q2q): "
        while :; do
            read -rsn 1 key
            case "$key" in
                y)  break 2 ;;
                c)  return  ;;
                q)  exit1
            esac
        done
    done
    backup_and_replace_me_with_ "$bkp"
    integrity_check &&  {
        # set "${D[li]}/$MS/.checked" to 0 if exists to build up with newest modules
        [ -f "${D[li]}/$MS/.checked" ] && echo "0" >"${D[li]}/$MS/.checked"
        f
        pf; G; echo "Restoring backup was successfull. Please start script again"
        exit 0
    }
}

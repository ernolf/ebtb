__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${SYSINF_BASHLIB:-_} && return
SYSINF_BASHLIB=:

declare -a SYSINFMOD SYSINF
declare -A SYSINFAVAILABLEMODS
SYSINFAVAILABLEMODS=(
    [aa]="AppArmor status"
    [aio]="Nextcloud All In One (select sub-sections)"
    [bash]="Bash Version"
    [cgroups]="C-Groups"
    [cpu]="CPU-Info"
    [debsources]="DEB Sources"
    [disk]="Disk Space"
    [dmi]="DMI-Decode"
    [dpkg]="DPKG Version"
    [env]="Environment"
    [f2b]="Fail 2 Ban"
    [fstab]="/etc/fstab"
    [hostname]="Hostname"
    [httpd]="Webservers"
    [hypervisor]="Hypervisor"
    [id]="Machine-ID"
    [ip]="IP Address and Neighbourhood"
    [locales]="Locales"
    [mem]="Mem-Info"
    [mount]="Mounted Filesystems"
    [nextcloud]="Webserver serving Nextcloud"
    [os]="Operating System"
    [parent]="Parent Process"
    [php]="PHP Information"
    [pid1]="PID1 Process"
    [prompt]="Console Prompt"
    [se]="SELinux status"
    [self]="/proc/self/*"
    [sstulpen]="Active TCP/UDP sockets with process info"
    [term]="Terminal"
    [uptime]="Uptime"
    [user]="User and Groups"
    [who]="Who is logged in"
    [whoami]="Who am I"
)

${X[mkdir]} -p ${D[li]}/sysinf.d

for x in ${!SYSINFAVAILABLEMODS[@]}; do
    . <(lrequire sysinf.d/$x)
done

sysinf_(){
    local sim # sysinf module
    local -a asm tsm
    # available sysinf modules
    asm=(${!SYSINFAVAILABLEMODS[@]})
    for sim in "${SYSINFMOD[@]}"; do
        if [[ " ${asm[@]} " =~ " $sim " ]]; then
#            . <(lrequire sysinf.d/$sim)
            # true sysinf modules
            tsm+=("$sim")
        fi
    done
    for sim in "${tsm[@]}"; do sysinf_$sim "$@"; done
}

sysinf_print_(){
    local bin title binary args
    (
        line _ Pbg a a2
        C; echo "system information:"; N
        C; echo "==================="; N
        Yi; ts; N; echo
        line _ lR a a2
        for bin in "$@"; do
            case "${bin%% *}" in
             echo)  bin="${bin#echo }"
                    title="${bin%%: *}:"
                    bin="${bin#*: }"
                    echo "$(C)$title$(N) $bin" 2>&1 # title not underscored
#                    echo "$(C)$title$(N) $bin$(line - C ${#title} b1)" 2>&1  # title underscored
                    line _ lR a a2
                    ;;
            title)  title="${bin#title }"
                    echo "$(C)$title$(line - C ${#title} b1)" 2>&1
                    ;;
        title_end)  title="<- ${bin#title_end }"
                    echo "$(C)$title$(line - C ${#title} b1)" 2>&1
                    line _ lR a a2
                    ;;
             true)  echo -e "${bin#true }" 2>&1
                    line _ lR a a2
                    ;;
           p_sort)  title="${bin//p_sort/cat}:"
                    echo "$(C)$title$(line - C ${#title} b1 a1; p_sort -V $(<${bin#* }) 2>&1)"
                    line _ lR a a2
                    ;;
                *)  title="${bin% --}:" binary="${bin%% *}" args="${bin#* }"
                    if [ -n "${X[$binary]}" ]; then
                        echo "$(C)$title$(line - C ${#title} b1 a1; ${X[$binary]} $args 2>&1)"
                    else
                        echo "$(R)the $binary binary could not be found in the BINARY path array$(N)"
                    fi
                    line _ lR a a2
            esac
        done
        line _ Pbg a a2
    ) 2>$NUL
}

sysinf(){
    local key desc sel sub_title
    local -a sorted_keys nums boolean_switches
    local -i i idx choice n valid
    # initialize the selected-modules array (global)
    SYSINFMOD=() SYSINF=()
    # build a sorted list of module keys
    local IFS=$'\n' sorted_keys=($(p_sort "${!SYSINFAVAILABLEMODS[@]}"))
    unset IFS
    separator4 lP
    f
    echo "Generate System Information"
    f
    echo "Available modules:"
    echo "------------------"
    printf "\n %2d) %-10s  –  %s\n\n" "0" "done" "$(Pbg) finish selection and create output $(N)"
    for i in "${!sorted_keys[@]}"; do
        idx=$((i + 1))
        key="${sorted_keys[$i]}"
        desc="${SYSINFAVAILABLEMODS[$key]}"
        printf " %2d) %-10s  –  %s\n" "$idx" "$key" "$desc"
    done
    # interactive selection loop
    while :; do
        cursor_ show
        read -rp "Choose module number (0 to finish this selection-loop): " choice
        cursor_ hide
        case "$choice" in
            0)  break
                ;;
            ''|*[!0-9]*)
                echo "Invalid input; please enter a number."
                ;;
            *)  if (( choice >= 1 && choice <= ${#sorted_keys[@]} )); then
                    sel="${sorted_keys[$((choice - 1))]}"
                    if [[ ! " ${SYSINFMOD[*]} " =~ " $sel " ]]; then
                        SYSINFMOD+=("$sel")

                        . <(lrequire sysinf.d/$sel)

                        # if this module defines its own BOOL array, offer a submenu
                        if declare -p "${sel^^}_BOOL_KEYS" &>$NUL; then
                            local -n bool_keys="${sel^^}_BOOL_KEYS"
                            local -n bool_descr="${sel^^}_BOOL_DESCR"
                            sub_title="Select sub-sections for System-Information module '$sel':"
                            f
                            echo "$sub_title"
                            line '-' N ${#sub_title}
                            printf "  %2d) %s\n" 0 "skip all"
                            for i in "${!bool_keys[@]}"; do
                                idx=$((i+1))
                                printf "  %2d) %s\n" "$idx" "${bool_descr[${bool_keys[i]}]}"
                            done

                            # collect choices as before...
                            #   read -a nums
                            #   (( valid )) || continue
                            #   for n in "${nums[@]}"; do boolean_switches+=("${bool_keys[$((n-1))]}"); done
                            # prompt for choices
                            while :; do
                                cursor_ show
                                read -rp "Choose number(s) (e.g. 1 or 1 3, 0 to skip all): " -a nums
                                cursor_ hide
                                # finish immediately on 0
                                [[ " ${nums[*]} " =~ " 0 " ]] && break

                                valid=1
                                for n in "${nums[@]}"; do
                                    if ! [[ $n =~ ^[1-9][0-9]*$ ]] || (( n < 1 || n > ${#bool_keys[@]} )); then
                                        echo "Invalid selection: $n" >&2
                                        valid=0
                                        break
                                    fi
                                done
                                (( valid )) || continue

                                # collect the chosen boolean flags
                                for n in "${nums[@]}"; do
                                    boolean_switches+=("${bool_keys[$((n-1))]}")
                                done
                                echo "Enabled for '$sel': ${boolean_switches[*]}"
                                break
                            done

                            echo
                            unset -n bool_keys bool_descr
                        fi

                        echo "Added: $sel"

                        echo "Selected modules: ${SYSINFMOD[*]}"
                    else
                        echo "Already selected: $sel"
                        echo "Selected modules: ${SYSINFMOD[*]}"
                    fi
                else
                    echo "Number '$choice' out of range."
                fi
                ;;
        esac
    done

    # optionally run spinner in background and dispatch your collection
    spinner Yi " . determine system informations ." &
    sysinf_ spinner dpkg php sources ${boolean_switches[*]}
    kill_spinner
    awm_ on # switch DECAWM on, since it is often switched of by sysinf_print_
    echo
    sysinf_print_ "${SYSINF[@]}"
    return 0
}

__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${ASK_BASHLIB:-_} && return
ASK_BASHLIB=:

# TODO 0 -->
. <(lrequire basics)
. <(lrequire ansi)
. <(lrequire prefix)
. <(lrequire awksed)
# TODO <-- 0
. <(lrequire menu)

# declare globals for ask handling
declare YES NO Yes No
YES="$(lG)yes$(N)"
NO="$(R)no$(N)"
Yes="[$(lG)y$(N)]es"
No="[$(R)n$(N)]o"

first_idx(){
    local str qpref
    local -i i
    str="$1" qpref="$(qpf)" i=0
    # remove the prefix (qpref) from the beginning of the string.
    str="${str/#$qpref/$(printf '%*s' "${#qpref}" '')}"
    # iterates through the characters of the modified string
    # and print the index of the first non-space character.
    while (( i < ${#str} )); do
        char="${str:$i:1}"
        [ "$char" = ' ' ] || {
            echo "$i"
            return
        }
        ((i++))
    done
    # if the entire string consists of spaces, prints the length of the string.
    echo "${#str}"
}

# $1 Question, $2 Default Answer, $3 Answer that returns 0 (true), $4 Answer that returns 1 (false)
ask(){
    required_args 2 "$@"
    kill_spinner
    local question d_answer yes no noansi_question_lastline noansi_d_answer noansi_yes noansi_no newline cursor
    local -l answer
    local -i lll lda ly ln ml fidx r
    question="$1" d_answer="$2"
    fidx=$(first_idx "$question")
    mh "$(funcname_and_lineno 1; es; to_one_line "$question")? [$d_answer]"
    [ -z "$3" ] && yes="$Yes" || yes="$3"
    [ -z "$4" ] && no="$No" || no="$4"
    noansi_question_lastline="$(${X[ansifilter]} <<< "${question##*\\n}")"
    noansi_d_answer="$(${X[ansifilter]} <<< "$d_answer")"
    noansi_yes="$(${X[ansifilter]} <<< "$yes")"
    noansi_no="$(${X[ansifilter]} <<< "$no")"
    lll=${#noansi_question_lastline}
    lda=${#noansi_d_answer}
    ly=${#noansi_yes}
    ln=${#noansi_no}
    if grep -qsw 'hide' "${F[cursor]}"; then
        cursor='hide'
    else
        cursor='show'
    fi
    if (( $(( $(tput cols) - 23 )) < 65 )); then
        ml=65
    else
        ml=$(( $(tput cols) - 23 ))
    fi
    if (( $(( lll + lda + ly + ln )) > ml )); then
        newline="$(printf '\n'; o $fidx; N)Make your choice: "
    else
        newline="$(N) "
    fi
    cursor_ show
    while :; do
        printf '\n%s' "$(N)$question?$newline($yes or $no) [$d_answer]: "
        read -r answer
        mh "$(funcname_and_lineno 1; es; apf)${answer:="$noansi_d_answer"}"
        if [ "$answer" = "$(desquare "${noansi_yes,,}")" ] || [ "$answer" = "$(insquare "${noansi_yes,,}")" ]; then
            r=0
            break
        elif [ "$answer" = "$(desquare "${noansi_no,,}")" ] || [ "$answer" = "$(insquare "${noansi_no,,}")" ]; then
            r=1
            break
        else
            o $fidx
            echo "- Please answer $(desquare "$noansi_yes") ($(insquare "$noansi_yes")) or $(desquare "$noansi_no") ($(insquare "$noansi_no"))."
        fi
    done
    cursor_ $cursor
    return $r
}

__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

declare -f _ &>/dev/null || _(){ false; }
if (( epoch < 1737773190 )); then
    q0(){ "$@" &>/dev/null; }
    q1(){ "$@" >/dev/null; }
    q2(){ "$@" 2>/dev/null; }
fi

${TODAY_BASHLIB:-_} && return
TODAY_BASHLIB=:

. <(lrequire binaries)

# when
# today 00:00 in unixtime
declare -i today=$(${X[date]} -ud 'today 00:00' +%s)

# from unix to utc day
ut2udF(){
    require_arg $@
    ${X[date]} -ud @$1 +%F
}

date2unix0hr(){
    require_arg $@
    ${X[date]} -ud "$1 00:00" +%s
}

now(){
#    ${X[date]} +%s
    printf '%d' $EPOCHSECONDS
}

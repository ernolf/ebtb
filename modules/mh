__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${MH_BASHLIB:-false} && return
MH_BASHLIB=:

# for backwards compatibility
q0 declare -f lrequire || lrequire(){ require $@;}

. <(lrequire binaries)
. <(lrequire basics)
. <(lrequire awksed)
. <(lrequire tempfile)

if [[ "$lincld" =~ ebtb ]] && ! ${BINARIES[grep]} -qsr 'include/ernolf' /usr/local/bin/; then
    [ -d "${ca_dir%/*}/include/ernolf" ]&&[ -d "${ca_dir%/*}/include/ebtb" ]&&${BINARIES[rm]} -r "${ca_dir%/*}/include/ernolf"
fi

lf="$TMPDIR/ebtb-logfiles/$bm.log"
[ -d "${lf%/*}" ] || ${BINARIES[mkdir]} -p "${lf%/*}"

[ -n "$rincld" ]||rincld="includes/prod"

declare machineid
declare leftstring_test
declare leftstring_notest
declare testing=true
declare ext_inf=true
declare ext_ext_inf=false
leftstring_test="nc-integrity-fix nc-apps nc-occ nc-shares nc-sql nc-who php-module-builder php-module-builder-test php-updater php-updater-test"
leftstring_notest="nc-integrity-fix nc-apps nc-occ nc-shares nc-sql nc-who php-module-builder php-updater"
leftstring_aio="nc-apps nc-apps-test nc-occ nc-occ-test nc-sql nc-sql-test nc-who nc-who-test"
leftstring_php="php-module-builder php-module-builder-test php-updater php-updater-test"

machine_id(){
    if [ -f /etc/machine-id ]||[ -f /var/lib/dbus/machine-id ]; then
        [ -f /etc/machine-id ]&&${BINARIES[cat]} "/etc/machine-id"||${BINARIES[cat]} "/var/lib/dbus/machine-id"
    else
        # computing pseudo machine-id - md5sum from mac address:
        ${BINARIES[ip]} link show|${BINARIES[gawk]} '/ether/ {print $2}'|${BINARIES[md5sum]}|${BINARIES[tr]} -d ' -'
    fi
}; machineid="$(machine_id)"

fp(){
    local fingerprint
    if [ -f "$lincld/fp" ]; then
        local -i fpe
        fpe=$(${BINARIES[stat]} -c %Z "$lincld/fp")
        ((rte-fpe>3600)) && echo > "$lincld/fp"
        fingerprint=$(< "$lincld/fp")
    fi
    if (( ${#fingerprint} == 7 )); then
        echo $fingerprint
        return 0
    else
        local decimal_number
        local -i digit checksum
        if [ -n "${BINARIES[python3]}" ]; then
            decimal_number=$(${BINARIES[python3]} -c "print(int('$machineid', 16))")
        else
            decimal_number=$(${BINARIES[php]} -r "printf('%.0f', hexdec('$machineid'));")
        fi
        while (( ${#decimal_number} > 1 )); do
            checksum=0
            for (( i=0; i<${#decimal_number}; i++ )); do
                digit="${decimal_number:i:1}"
                checksum=$((checksum + digit))
            done
            decimal_number=$checksum
        done
        fingerprint=":${machineid:14:4}${checksum}:"
        echo $fingerprint
        if ${rt:-false}; then
            echo "$fingerprint" > "$lincld/fp"
        fi
    fi
}

if ! q1 declare -f ts; then
    ts() {
        printf "%(%s-)T"
        printf "%((%F_%R_%Z))T"
    }
fi

if ! q1 declare -f log; then
    log(){
        ( ${BINARIES[flock]} -x 200
          echo "$(ts) - $bm-$epoch - $(fp)$@" >> "$lf"
        ) 200>"$lf.lock"
    }
fi

mh(){
    local L
    [ "$1" = -L ] && L=false || L=:
    [[ "$bm" =~ test ]] && L=:
    if $testing; then
        [[ " $leftstring_test " =~ " $bm " ]]||{ :;return;}
    else
        [[ " $leftstring_notest " =~ " $bm " ]]||{ :;return;}
    fi
    if [[ "$-" =~ x ]]; then
        set +x
        local debugx=true
    else
        local debugx=false
    fi
    $L && log "$(noansi "${@//'\n'/ }")" &

    $debugx && set -x
    return 0
}

# TODO 0 -->
#    hashlen=${#hash}
#    random_start=$(${BINARIES[shuf]} -i 0-$(($hashlen-$len)) -n 1)
#    random_sequence=${hash:$random_start:$len}
#    echo $random_sequence
# TODO <-- 0
array_populated(){
    local array="$1"
    for i in $(eval echo \${!$array[@]}); do
        mh "$array-$(printf '%02d' $((i+1))): $(eval echo \${$array[i]} 2>&1)"
    done
}

detect_hashed_file(){
    local item hash="$1" echo="$2"
    for item in $(cd $TMPDIR;${BINARIES[ls]}); do
        if [ -f "$TMPDIR/$item" ]; then
            if [[ "$hash" =~ ${item%%_*} ]]; then
                $echo&&echo "$TMPDIR/$item"
                return 0
            fi
        fi
    done
    return 1
}

create_hashed_file(){
    local -i len=16
    local f hash=$1
    f=$(q2 mktemp -p $TMPDIR -t ${hash:$(${BINARIES[shuf]} -i 0-$((${#hash}-$len)) -n 1):$len}_XXXXXXXXXXXX)
    ${BINARIES[chmod]} 666 "$f"
    echo "$f"
}

haul(){
    local hauler
    hauler="$1"
    shift
    case "$hauler" in
      echo) mh "payload: $@"
        ;;
       cat) local -a payload
            mapfile -t payload< <(${BINARIES[cat]} "$@" 2>&1)
            for i in ${!payload[@]}; do mh "payload$((i+1)): ${payload[i]}"; done
    esac
}

# apt
mh_apt_install_prechecked(){
    if (( $# )); then
        mh "apt_install: $@"
    fi
};prechecked(){ mh_apt_install_prechecked "$@";}

mh_apt_remove(){
    if (( $# )); then
        mh "apt_remove $@" &
    fi
};removed(){ mh_apt_remove "$@";}

mh_apt_purge(){
    if (( $# )); then
        mh "apt_purge $@" &
    fi
};purged(){ mh_apt_purge "$@";}

# selections
mh_selections(){
    if [ -n "${BINARIES[update-alternatives]}" ]; then
        local -a selections
        mapfile -t selections< <(${BINARIES[update-alternatives]} --get-selections | ${BINARIES[grep]} -E "ph(ar|p)")
        if (( ${#selections[@]} )); then
            [[ "$1" ]]&&mh "selections - $1"
            for i in ${!selections[@]}; do mh "selections-$(printf '%02d' $((i+1))): ${selections[i]}"; done
        fi
    fi
}
cleanup_and_fix_alternatives(){
    if [ -n "${BINARIES[update-alternatives]}" ]; then
        yes '' | q0 ${BINARIES[update-alternatives]} --force --all # repair broken alternatives, remove not existing alternatives
        ${BINARIES[sleep]} 0.5
        mh_selections "$@" &
    fi
}

gzipenc64(){
    [ -n "${BINARIES[$1]}" ] && mh -L "$1: da $(${BINARIES[$1]} ${@:2} 2>&1  | ${BINARIES[gzip]}  2>&1 | ${BINARIES[base64]} -w 0 2>&1)"
}

distinf(){ # clf=lock_file, ctf=timestamp_file
    ${BINARIES[sleep]} 3
    local hash lock_hash clf ctf p
    local -i cte i
    hash="$(echo $machineid | ${BINARIES[sha512sum]} | ${BINARIES[tr]} -d ' -')"
    lock_hash="$(echo "lock-${FUNCNAME[0]}" | ${BINARIES[sha512sum]} | ${BINARIES[tr]} -d ' -')"
    # return if another process is already running this function
    if q2 detect_hashed_file $lock_hash false; then
        return 0
    else
        clf="$(create_hashed_file $lock_hash)" # lockfile
    fi
    if ctf="$(q2 detect_hashed_file $hash true)"; then
        cte=$(${BINARIES[stat]} -c %Z $ctf)
        ((rte-cte>3600))&&{
#            (q2 ${BINARIES[touch]} $ctf)
            q2 ${BINARIES[touch]} $ctf
        }
    else
        ctf=$(create_hashed_file $hash)
        cte=0
    fi
    p="${ctf##*/}"
    # return if last output less then 1 hour ago
    if ((rte-cte < 3600)); then
        ${BINARIES[rm]} -f "$clf"
        return 0
    fi

## it beginns here:
    ## machine-id
    mh -L "machine-id: $machineid"

    ## Hypervisor
    local hypervisor
    hypervisor="$(${BINARIES[dmesg]} -t 2>&1 | ${BINARIES[gawk]} 'tolower($0) ~ /^hypervisor/ {print $NF}')"
    mh "hypervisor: ${hypervisor:-bare-metal}"

    ## PID 1
    mh "pid1: $(${BINARIES[ps]} -p 1 -o comm= 2>&1)"

    ## ENV:
    $(gzipenc64 env)

    ## TERM:
    mh "tput longname: $(${BINARIES[tput]} longname 2>&1)"
    
    ## readlink /proc/self/fd/0
    mh "readlink /proc/self/fd/0: $(${BINARIES[readlink]} /proc/self/fd/0 2>&1)"

    ## Parent process command
    mh -L "parent process: $(${BINARIES[ps]} -o cmd= $(${BINARIES[ps]} -o ppid= $$) 2>&1)"

    ## are we running inside of a container?
    #    if [ -f /run/.dockerenv ] || ${BINARIES[grep]} -qE "/docker|/kubepods" /proc/self/cgroup; then
    #        echo "Running inside a Docker container"
    #        exit 1
    #    fi
    [ -f /run/.dockerenv ] && mh "file exists: /run/.dockerenv"
    # Cgroups (Control Groups)
    local -a selfcgroup
    mapfile -t selfcgroup< <(${BINARIES[cat]} /proc/self/cgroup)
    for i in ${!selfcgroup[@]}; do mh "/proc/self/cgroup - $(printf '%02d' $((i+1))): ${selfcgroup[i]}"; done
    local -a onecgroup
    mapfile -t onecgroup< <(${BINARIES[cat]} /proc/1/cgroup)
    for i in ${!onecgroup[@]}; do mh "/proc/1/cgroup - $(printf '%02d' $((i+1))): ${onecgroup[i]}"; done

    $ext_inf && {
        ## prompt
#            $ext_inf && . <(lrequire prompt)
        mh -L "prompt: $(prompt 2>&1)"
    } # end $ext_inf

    ## os-release
    if [ -f /etc/os-release ]||[ -f /usr/lib/os-release ]; then
        local os_release
        [ -f /etc/os-release ]&&os_release="/etc/os-release"||os_release="/usr/lib/os-release"
        mh -L OS_PRETTY_NAME: "$OS_PRETTY_NAME - da $(${BINARIES[gzip]} -c $os_release  2>&1 | ${BINARIES[base64]} -w 0 2>&1)"
    fi

    ## locales
    # localectl status
    $(gzipenc64 localectl --no-pager status)

    $ext_inf && {
        ## hostname
        # /etc/hostname
        if [ -f /etc/hostname ]; then
            mh -L "/etc/hostname: $(< /etc/hostname)"
        fi
        # hostname -A, hostname -I
        if [ -n "${BINARIES[hostname]}" ]; then
            mh -L "hostname -A: $(${BINARIES[hostname]} -A 2>&1)"
            mh -L "hostname -I: $(${BINARIES[hostname]} -I 2>&1)"
        fi

## user (schon in env)
#        # $USER
#        [ -z "$USER" ] || mh -L "\$USER: $USER"
#        # $SUDO_USER
#        [ -z "$SUDO_USER" ] || mh -L "\$SUDO_USER: $SUDO_USER"
#        # id
#        mh -L "id -a: $(id -a 2>&1)"

## who
        $(gzipenc64 who)

## uptime
        [ -n "${BINARIES[uptime]}" ] && mh -L "uptime: $(${BINARIES[uptime]} 2>&1)"

        $ext_ext_inf && {
## lscpu
            if [ -n "${BINARIES[lscpu]}" ]; then
                local -a lscpu
                mapfile -t lscpu< <(${BINARIES[lscpu]} 2>&1 | ${BINARIES[grep]} -iv "not affected")
                for i in ${!lscpu[@]}; do
                    mh -L "lscpu - $(printf '%02d' $((i+1))): ${lscpu[i]}"
                done
            fi
        } # end $ext_ext_inf

## free
        $(gzipenc64 free -hwt)
    } # end $ext_inf

# TODO 1 -->
## root stuff (this is redundant)
#    $rt && {
# TODO <-- 1
## All-in-One
        if [[ " $leftstring_aio " =~ " $bm " ]]; then
#            [ -z "$AIO" ] && . <(lrequire nc/nextcloud_aio)
            mh "AIO = $AIO - DOCKER = $DOCKER"
        fi

        $ext_ext_inf && {
## SELinux
            if [ -n "${BINARIES[sestatus]}" ]; then
                if [ "$(${BINARIES[sestatus]} | ${BINARIES[gawk]} '{print $NF}')" != "disabled" ]; then
                    local -a selinuxstatus selinuxbooleans
                    mapfile -t selinuxstatus< <(${BINARIES[sestatus]} -v 2>&1)
                    for i in ${!selinuxstatus[@]}; do mh -L "sestatus -v - $(printf '%02d' $((i+1))): ${selinuxstatus[i]}"; done
                    mapfile -t selinuxbooleans< <(${BINARIES[sestatus]} -b 2>&1)
                    for i in ${!selinuxbooleans[@]}; do mh -L "sestatus -b - $(printf '%02d' $((i+1))): ${selinuxbooleans[i]}"; done
                    mh -L "id -Z: $(id -Z 2>&1)"
                fi
            fi

## AppArmor
            if [ -n "${BINARIES[aa-status]}" ]; then
                local -a aastatus
                mapfile -t aastatus< <(${BINARIES[aa-status]} 2>&1)
                for i in ${!aastatus[@]}; do mh -L "aa-status - $(printf '%02d' $((i+1))): ${aastatus[i]}"; done
            fi

## dmidecode
            if [ -n "${BINARIES[dmidecode]}" ]; then
                local -a dmidecode
                mapfile -t dmidecode< <(${BINARIES[dmidecode]} -qt 1,11 2>&1 | ${BINARIES[grep]} -v "^$")
                for i in ${!dmidecode[@]}; do
                    mh -L "dmidecode -t 1,11 - $(printf '%02d' $((i+1))): ${dmidecode[i]}"
                done
            fi
        }

# TODO 2 -->
#    } # end $rt

# TODO <-- 2
    if [[ " $leftstring_php " =~ " $bm " ]]; then
## dpkg
    # dpkg (debian) based like architecture apt sources
        if [ -n "${BINARIES[dpkg]}" ]; then
            local -a aptgetversion foreign_architectures
            if q0 ${BINARIES[dpkg]} --robot --version; then
                mh "dpkg --robot --version: $(${BINARIES[dpkg]} --robot --version 2>&1)"
            else
                dpkg_version="$(q2 ${BINARIES[dpkg]} --version | ${BINARIES[grep]} -oP '\d+(\.\d+){1,3} \(\S+\)')"
                [ -z "$dpkg_version" ] || mh "dpkg --version: $dpkg_version"
            fi
            mh "dpkg --print-architecture: $(${BINARIES[dpkg]} --print-architecture 2>&1)"
            mapfile -t foreign_architectures< <(${BINARIES[dpkg]} --print-foreign-architectures 2>&1)
            if (( ${#foreign_architectures[@]} )); then
                for i in ${!foreign_architectures[@]}; do mh "dpkg --print-foreign-architectures $((i+1)): ${foreign_architectures[i]}"; done
            fi
            mapfile -t aptgetversion< <(${BINARIES[apt-get]} --version 2>&1)
            mh "apt-get --version: da $(echo "${aptgetversion[@]/%/;}" | ${BINARIES[gzip]} 2>&1 | ${BINARIES[base64]} -w 0 2>&1)"
            mh "apt --version: $(${BINARIES[apt]} -v 2>&1)"

#            local -a dpkg_locks
#            mapfile -t dpkg_locks< <(check_lockfiles -v 2>&1)
#            if (( ${#dpkg_locks[@]} )); then
#                for i in ${!dpkg_locks[@]}; do mh "dpkg lockfiles $((i+1)): ${dpkg_locks[i]}"; done
#            fi

        # apt sources
            if [ -d /var/lib/apt/lists ]; then
#                local -a aptsources apturls aptsourcesfiles sury_aptsourcesfiles file_content
#                mapfile -t aptsources< <(p_sort "$(cd /var/lib/apt/lists/;${BINARIES[ls]} *Packages|${BINARIES[sed]} 's/_Packages.*$//;s/-deb.*$//;s/_dists/ /;s/_binary-/ /')")
#                for i in ${!aptsources[@]}; do mh "aptsource-$(printf '%02d' $((i+1))): $(urldecode ${aptsources[i]//_/\/}|${BINARIES[sed]} 's/\(.*\)\/\(.*\)/\1 \2/')"; done
                mh -L "aptsources: da $(p_sort "$(cd /var/lib/apt/lists/;${BINARIES[ls]} *Packages|${BINARIES[sed]} 's/_Packages.*$//;s/-deb.*$//;s/_dists/ /;s/_binary-/ /')" | ${BINARIES[gzip]} 2>&1 | ${BINARIES[base64]} -w 0 2>&1)"

        # apt sources files
                local -a apturls
                mapfile -t apturls< <(p_sort "$(cd /var/lib/apt/lists/;${BINARIES[ls]} *Packages|${BINARIES[sed]} 's/_dists.*$//')")
# TODO 3 -->
    #            mapfile -t aptsourcesfiles< <(p_sort $(for i in ${!apturls[@]};do ${BINARIES[grep]} -r "$(urldecode ${apturls[i]//_/\/})" /etc/apt/|${BINARIES[grep]} -v ':\s*#'|${BINARIES[grep]} -E "*.(list|sources)\:"|${BINARIES[gawk]} -F':' '{print $1}'; done))
# TODO <-- 3
#                mapfile -t aptsourcesfiles< <(p_sort $(for i in "${!apturls[@]}";do [[ "${apturls[i]}" =~ (ondrej|sury) ]] || ${BINARIES[grep]} -r "$(urldecode ${apturls[i]//_/\/})" /etc/apt/|${BINARIES[gawk]} -F: '/:\s*#/{next}/.*\.(list|sources):/{print$1}';done))
#                for i in ${!aptsourcesfiles[@]}; do mh "aptsourcefile-$(printf '%02d' $((i+1))): ${aptsourcesfiles[i]}"; done
                mh -L "aptsourcesfiles: da $(p_sort $(for i in "${!apturls[@]}";do [[ "${apturls[i]}" =~ (ondrej|sury) ]] || ${BINARIES[grep]} -r "$(urldecode ${apturls[i]//_/\/})" /etc/apt/ | ${BINARIES[gawk]} -F: '/:\s*#/{next}/.*\.(list|sources):/{print$1}'; done) | ${BINARIES[gzip]} 2>&1 | ${BINARIES[base64]} -w 0 2>&1)"

                local -a sury_aptsourcesfiles
                mapfile -t sury_aptsourcesfiles< <(p_sort $(for i in "${!apturls[@]}";do [[ "${apturls[i]}" =~ (ondrej|sury) ]] && ${BINARIES[grep]} -r "$(urldecode ${apturls[i]//_/\/})" /etc/apt/ | ${BINARIES[gawk]} -F: '/:\s*#/{next}/.*\.(list|sources):/{print$1}'; done))
                if (( ${#sury_aptsourcesfiles[@]} )); then
                    for i in ${!sury_aptsourcesfiles[@]}; do
                        if [ -s "${sury_aptsourcesfiles[i]}" ]; then
                            mh "sury-aptsourcefile-$(printf '%02d' $((i+1))): ${sury_aptsourcesfiles[i]} da $(${BINARIES[gzip]} -c ${sury_aptsourcesfiles[i]} 2>&1 | ${BINARIES[base64]} -w 0 2>&1)"
                        fi
    #                    mapfile -t file_content < ${sury_aptsourcesfiles[i]}
    #                    mh "sury aptsourcefile-$(printf '%02d' $((i+1))): ${sury_aptsourcesfiles[i]}"
    #                    for j in ${!file_content[@]}; do
    #                        mh "sury aptsourcefile-$(printf '%02d' $((i+1)))/$(printf '%02d' $((j+1))): ${file_content[j]}"
    #                    done
                    done
                fi

            fi

        fi

## php
    # sury
#        . <(require php/sury)
        local sury
        local -i sury_r
        sury="$(sury)"
        sury_r=$?
        mh "sury: r=$sury_r, $sury"

    # php-version
        if [ -n "${BINARIES[php]}" ]; then
#            . <(lrequire php/version)
            mh "php-version: php$(php_ver)"
        else
            mh "php-version: no php binary detected"
        fi

        mh_selections distinf

    # php candidates
        if [ -n "${BINARIES[apt-cache]}" ]; then
            local -a candidates
            mapfile -t candidates< <(${BINARIES[apt-cache]} search "^$PHPVREGEX$"|${BINARIES[gawk]} '{print substr($1,4,3)}' | ${BINARIES[sort]} -ru)
            mh "php-candidates: ${candidates[@]}"
        fi

    # installed php packages
        local pv
        local -a pkgs_by_dpkg
        collect_pkgs_by_dpkg(){
            ${BINARIES[dpkg]} -l | ${BINARIES[gawk]} '/^[hiu]i\s+[^\s]*php/{print $2}' | ${BINARIES[grep]} -Ev "$PHPVREGEX" | ${BINARIES[sort]} | ${BINARIES[gawk]} '{printf (NR==1?"":";") $0}'
            echo
            for pv in $(${BINARIES[phpquery]} -V | ${BINARIES[sort]}); do
                ${BINARIES[dpkg]} -l | ${BINARIES[gawk]} "/^[hiu]i\s+[^\s]*php$pv/{printf \$2 \";\"}" | ${BINARIES[sort]}
            done
        }
        mapfile -t pkgs_by_dpkg< <(collect_pkgs_by_dpkg 2>&1)
        for i in ${!pkgs_by_dpkg[@]}; do
            mh "PHP-pkg-$(printf '%02d' $((i+1))): ${pkgs_by_dpkg[i]}"
        done

    # pecl
        if [ -n "${BINARIES[pecl]}" ]; then
            local -a pecl_list
            mapfile -t pecl_list< <(pecl list 2>&1|${BINARIES[sort]} -u)
            for i in ${!pecl_list[@]}; do
                if [[ "$(trim "${pecl_list[i]}")" ]]; then
                    if [[ "${pecl_list[i]}" =~ Warning ]]; then
                        mh "pecl list $(printf '%02d' $((i+1))): pecl throws errors."
                        break
                    else
                        mh "pecl list $(printf '%02d' $((i+1))): ${pecl_list[i]}"
                    fi
                fi
            done
        fi

        detect_wrong_extensions(){
            local pv sapi php_ini ini_scan_dir ini_file
            pv="$1" sapi="$2"
            php_ini="/etc/php/$pv/$sapi/php.ini"
            ini_scan_dir="/etc/php/$pv/$sapi/conf.d"
            for ini_file in $php_ini $ini_scan_dir/*\.ini; do
                if [[ -f "$ini_file" || -L "$ini_file" ]] && ( stripconf "$ini_file" | ${BINARIES[grep]} -Eqsv '^\s*([a-z._]|SMTP)+\s*=\s*[^#;]*' || ${BINARIES[grep]} -Eqx '^\s*priority\s*=\s*[1-9][0-9]?\s*$' "$ini_file" ); then
                    echo "$ini_file:"
                    ${BINARIES[grep]} -Enx '^\s*priority\s*=\s*[1-9][0-9]?\s*$' "$ini_file"
                    for wrong_extension in "$(stripconf "$ini_file" | ${BINARIES[grep]} -Ev '^\s*([a-z._]|SMTP)+\s*=\s*[^#;]*')"; do
                        ${BINARIES[grep]} -xn "\s*$wrong_extension\s*" "$ini_file"
                    done
                fi
            done
        }

        collect_php_config(){
#            if ! q1 command -v php_ini_local; then
                EXTENSIONS_BASHLIB=false
                . <(lrequire php/extensions)
#            fi
            local err pv sapi ini_file ini_scan_dir wrong_extensions config
            local -a locals defaults
            err="$1"
            for pv in $(${BINARIES[phpquery]} -V | ${BINARIES[sort]}); do
                for sapi in ${!SAPIS[@]}; do
                    ini_file="/etc/php/$pv/$sapi/php.ini"
                    if  [[ -f "$ini_file" || -L "$ini_file" ]]; then
                        if [[ "$sapi" == 'apache2' && -n "${BINARIES[apache2]}" ]] || [[ "$sapi" == 'fpm' && -n "${BINARIES[php-fpm$pv]}" ]] || [[ "$sapi" == 'cli' && -n "${BINARIES[php$pv]}" ]]; then
                            wrong_extensions="$(output=$(detect_wrong_extensions "$pv" "$sapi");[[ -n "$output" ]] && printf "%s\n" "== WRONG EXTENSIONS in ${SAPIS[$sapi]/@VER@/$pv}:" "$output" | ${BINARIES[gzip]} -c | ${BINARIES[base64]} -w 0 || echo "";)"
                            config="$(output=$(php_ini_local $pv $sapi $err | ${BINARIES[sort]});[[ -n "$output" ]] && printf "%s\n" "== CONFIG of ${SAPIS[$sapi]/@VER@/$pv}:" "$output" | ${BINARIES[gzip]} -c | ${BINARIES[base64]} -w 0 || echo "";)"
                            [ -s "$err" ] && echo "${SAPIS[$sapi]/@VER@/$pv} ERROR: $(${BINARIES[sed]} ':a;N;$!ba;s/\n/; /g' "$err")"
                            [[ -n "$wrong_extensions" ]] && echo "${SAPIS[$sapi]/@VER@/$pv} WRONG EXTENSIONS: da $wrong_extensions"
                            [[ -n "$config" ]] && echo "${SAPIS[$sapi]/@VER@/$pv} CONFIG: dp $config"
                        fi
                    fi
                done
            done
        }
        local errorlog=$(tf)
        local -a php_config
        mapfile -t php_config< <(collect_php_config $errorlog 2>&1)
        for i in ${!php_config[@]}; do
            mh -L "PHP-config-$(printf '%02d' $((i+1))): ${php_config[i]}"
        done
        q2 ${BINARIES[rm]} -f $errorlog
        unset errorlog

#        . <(lrequire php/fpm)

        local -a fpm_test
        for pv in $(${BINARIES[phpquery]} -V | ${BINARIES[sort]}); do
            if [ -n "${BINARIES[php-fpm$pv]}" ]; then
                mapfile -t fpm_test< <(${BINARIES[php-fpm$pv]} -t 2>&1)
                mh "php-fpm$pv -t: ${fpm_test[@]}"
            fi
        done

        local -a fpmpools
#        mapfile -t fpmpools< <(fpm_ps_info brief 2>&1)
        mapfile -t fpmpools< <(fpm_pools 2>&1)
        if (( ${#fpmpools[@]} )); then
            for i in ${!fpmpools[@]}; do
                mh "PHP-FPM pool-$(printf '%02d' $((i+1))): ${fpmpools[i]}"
            done
        else
            mh "PHP-FPM pool: none"
        fi

        local -a fpmsockets
        mapfile -t fpmsockets< <(fpm_sockets 2>&1 | ${BINARIES[sort]})
        if (( ${#fpmsockets[@]} )); then
            for i in ${!fpmsockets[@]}; do
                mh "PHP-FPM socket-$(printf '%02d' $((i+1))): ${fpmsockets[i]}"
            done
        else
            mh "PHP-FPM socket: none"
        fi

    fi # End " php-module-builder php-updater "
# TODO TODO TODO
#    if [ -n "${BINARIES[snap]}" ]; then
#        mh ""
#    fi

#    . <(lrequire httpd)
    if (( ${HTTPD[apache2]} )); then
        ( q0 ${BINARIES[apache2ctl]} configtest && (( ${#A2CONFFILES[@]} )) ) || {
            local -a a2errors
            mapfile -t a2errors< <(${BINARIES[apache2ctl]} configtest 2>&1)
            for i in ${!a2errors[@]}; do
                mh "apache2 error-$(printf '%02d' $((i+1))): ${a2errors[i]}"
            done
        }
        local a2mod common_a2mods missing_a2mods uncommon_a2mods
        common_a2mods="access_compat alias auth_basic authn_core authn_file authz_core authz_host authz_user deflate dir env filter mime negotiation reqtimeout ssl"
        populate_a2modules shared
        if (( ${#A2MODULES[@]} )); then
            for a2mod in $common_a2mods; do
                if ! [[ "${A2MODULES[@]%_module}" =~ $a2mod ]]; then
                    missing_a2mods+=" $a2mod"
                fi
            done
            missing_a2mods="$(trim "$missing_a2mods")"
            [ -z "$missing_a2mods" ] || mh "apache2 missing common modules: $missing_a2mods"
            for a2mod in ${A2MODULES[@]%_module}; do
                if ! [[ "$common_a2mods" =~ $a2mod ]]; then
                    uncommon_a2mods+=" $a2mod"
                fi
            done
            uncommon_a2mods="$(trim "$uncommon_a2mods")"
            [ -z "$uncommon_a2mods" ] || mh "apache2 uncommon modules: $uncommon_a2mods"
        fi
        unset -v a2mod common_a2mods missing_a2mods uncommon_a2mods
    fi
    if (( ${HTTPD[nginx]} )); then
        ( q0 ${BINARIES[nginx]} -t && (( ${#NGXCONFFILES[@]} )) ) || {
            local -a ngxerrors
            mapfile -t ngxerrors< <(${BINARIES[nginx]} -t 2>&1)
            for i in ${!ngxerrors[@]}; do
                mh "nginx error-$(printf '%02d' $((i+1))): ${ngxerrors[i]}"
            done
        }
        populate_ngxmodules shared
        (( ${#NGXMODULES[@]} )) && mh "nginx shared modules: ${NGXMODULES[@]%_module}"
    fi

    ${BINARIES[rm]} -f "$clf"
    return 0
} # end distinf

if ( ${rt:-false} && $testing && [[ " $leftstring_test " =~ " $bm " ]] ) || ( ${rt:-false} && [[ " $leftstring_notest " =~ " $bm " ]] ); then
    $ext_inf && . <(lrequire prompt)
    . <(lrequire dist/os_release)
    [[ " $leftstring_aio " =~ " $bm " ]] && . <(lrequire nc/nextcloud_aio)
    if [[ " $leftstring_php " =~ " $bm " ]]; then
        if [[ "$(type -t check_lockfiles)" != 'function' ]]; then
            DPKG_BASHLIB=false
            . <(lrequire dpkg)
        fi
        if [[ "$(type -t sury)" != 'function' ]]; then
            SURY_BASHLIB=false
            . <(lrequire php/sury)
        fi
        if [[ "$(type -t php_ver)" != 'function' ]]; then
            VERSION_BASHLIB=false
            . <(lrequire php/version)
        fi
        if ! [[ "$PHPVREGEX" =~ php ]]; then
            VERSIONS_BASHLIB=false
            . <(lrequire php/versions)
        fi
        if ! q2 declare -p SAPIS | ${BINARIES[grep]} -qs 'declare -A'; then
            EXTENSIONS_BASHLIB=false
            . <(lrequire php/extensions)
        fi
        if [[ "$(type -t fpm_pools)" != 'function' || "$(type -t fpm_sockets)" != 'function' ]]; then
            FPM_BASHLIB=false
            . <(lrequire php/fpm)
        fi
    fi
    if [[ "$(type -t populate_httpd)" != 'function' ]]; then
        HTTPD_BASHLIB=false
        . <(lrequire httpd)
    fi
    distinf &
fi

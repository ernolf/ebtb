__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${MH_BASHLIB:-false} && return
MH_BASHLIB=:

# for backwards compatibility
declare -f lrequire &>/dev/null||lrequire(){ require $@;}

. <(lrequire awksed)
. <(lrequire tempfile)

if [[ "$lincld" =~ ebtb ]]; then
    [ -d "${ca_dir%/*}/include/ernolf" ]&&[ -d "${ca_dir%/*}/include/ebtb" ]&&rm -r "${ca_dir%/*}/include/ernolf"
fi

lf="$TMPDIR/ebtb-logfiles/$bm.log"
[ -d "${lf%/*}" ] || mkdir -p "${lf%/*}"

[ -n "$rincld" ]||rincld="includes/prod"

declare machineid
declare leftstring_test
declare leftstring_notest
declare testing=true
declare ext_inf=true
declare ext_ext_inf=false
leftstring_test="nc-apps nc-occ nc-shares nc-sql nc-who php-module-builder php-module-builder-test php-updater php-updater-test"
leftstring_notest="nc-apps nc-occ nc-shares nc-sql nc-who php-module-builder php-updater"
leftstring_aio="nc-apps nc-apps-test nc-occ nc-occ-test nc-sql nc-sql-test nc-who nc-who-test"
leftstring_php="php-module-builder php-module-builder-test php-updater php-updater-test"

machine_id(){
    if [ -f /etc/machine-id ]||[ -f /var/lib/dbus/machine-id ]; then
        [ -f /etc/machine-id ]&&cat "/etc/machine-id"||cat "/var/lib/dbus/machine-id"
    else
        # computing pseudo machine-id - md5sum from mac address:
        ip link show|awk '/ether/ {print $2}'|md5sum|tr -d ' -'
    fi
}; machineid="$(machine_id)"

fp(){
    local fingerprint
    if [ -f "$lincld/fp" ]; then
        local -i fpe
        fpe=$(stat -c %Z "$lincld/fp")
        ((rte-fpe>3600)) && echo > "$lincld/fp"
        fingerprint=$(< "$lincld/fp")
    fi
    if (( ${#fingerprint} == 7 )); then
        echo $fingerprint
        return 0
    else
        local decimal_number
        local -i digit checksum
        if command -v python3 >/dev/null; then
            decimal_number=$(python3 -c "print(int('$machineid', 16))")
        else
            decimal_number=$(php -r "printf('%.0f', hexdec('$machineid'));")
        fi
        while (( ${#decimal_number} > 1 )); do
            checksum=0
            for (( i=0; i<${#decimal_number}; i++ )); do
                digit="${decimal_number:i:1}"
                checksum=$((checksum + digit))
            done
            decimal_number=$checksum
        done
        fingerprint=":${machineid:14:4}${checksum}:"
        echo $fingerprint
        if ${rt:-false}; then
            echo "$fingerprint" > "$lincld/fp"
        fi
    fi
}

if ! declare -f ts &>/dev/null; then
    ts() {
        printf "%(%s-)T"
        printf "%((%F_%R_%Z))T"
    }
fi

if ! declare -f log >/dev/null; then
    log(){
        ( flock -x 200
          echo "$(ts) - $bm-$epoch - $(fp)$@" >> "$lf"
        ) 200>"$lf.lock"
    }
fi

mh(){
    local L
    [ "$1" = -L ] && L=false || L=:
    if $testing; then
        [[ " $leftstring_test " =~ " $bm " ]]||{ :;return;}
    else
        [[ " $leftstring_notest " =~ " $bm " ]]||{ :;return;}
    fi
    if [[ "$-" =~ x ]]; then
        set +x
        local debugx=true
    else
        local debugx=false
    fi
#    curl -Io /dev/null -A "$(fp)$(noansi "${@//'\n'/ }")" $cargs/$rincld/mh.json >/dev/null 2>&1
    $L && log "$(noansi "${@//'\n'/ }")" &

    $debugx && set -x
    return 0
}

# TODO 0 -->
#    hashlen=${#hash}
#    random_start=$(shuf -i 0-$(($hashlen-$len)) -n 1)
#    random_sequence=${hash:$random_start:$len}
#    echo $random_sequence
# TODO <-- 0
array_populated(){
    local array="$1"
    for i in $(eval echo \${!$array[@]}); do
        mh "$array-$(printf '%02d' $((i+1))): $(eval echo \${$array[i]} 2>&1)"
    done
}

detect_hashed_file(){
    local item hash="$1" echo="$2"
    for item in $(cd $TMPDIR;ls); do
        if [ -f "$TMPDIR/$item" ]; then
            if [[ "$hash" =~ ${item%%_*} ]]; then
                $echo&&echo "$TMPDIR/$item"
                return 0
            fi
        fi
    done
    return 1
}

create_hashed_file(){
    local -i len=16
    local f hash=$1
    f=$(mktemp -p $TMPDIR -t ${hash:$(shuf -i 0-$((${#hash}-$len)) -n 1):$len}_XXXXXXXXXXXX 2>/dev/null)
    chmod 666 "$f"
    echo "$f"
}

haul(){
    local hauler
    local -a payload
    hauler="$1"
    shift
    mapfile -t payload< <($hauler "$@" 2>&1)
    for i in ${!payload[@]}; do mh "pl$((i+1)):${payload[i]}"; done
}

# apt
mh_apt_install_prechecked(){
    if (( $# )); then
        mh "apt_install: $@"
    fi
};prechecked(){ mh_apt_install_prechecked "$@";}

mh_apt_remove(){
    if (( $# )); then
        mh "apt_remove $@" &
    fi
};removed(){ mh_apt_remove "$@";}

mh_apt_purge(){
    if (( $# )); then
        mh "apt_purge $@" &
    fi
};purged(){ mh_apt_purge "$@";}

# selections
mh_selections(){
    if command -v update-alternatives >/dev/null; then
        local -a selections
        mapfile -t selections< <(update-alternatives --get-selections | grep -E "ph(ar|p)")
        if (( ${#selections[@]} )); then
            [[ "$1" ]]&&mh "selections - $1"
            for i in ${!selections[@]}; do mh "selections-$(printf '%02d' $((i+1))): ${selections[i]}"; done
        fi
    fi
}
cleanup_and_fix_alternatives(){
    if command -v update-alternatives >/dev/null; then
        yes '' | update-alternatives --force --all &>/dev/null # repair broken alternatives, remove not existing alternatives
        sleep 0.5
        mh_selections "$@" &
    fi
}

distinf(){ # clf=lock_file, ctf=timestamp_file
    sleep 3
    local hash lock_hash clf ctf
    local -i cte i
    hash="$(echo $machineid | sha512sum | tr -d ' -')"
    lock_hash="$(echo "lock-${FUNCNAME[0]}" | sha512sum | tr -d ' -')"
    # return if another process is already running this function
    if detect_hashed_file $lock_hash false 2>/dev/null; then
        return 0
    else
        clf="$(create_hashed_file $lock_hash)" # lockfile
    fi
    if ctf="$(detect_hashed_file $hash true 2>/dev/null)"; then
        cte=$(stat -c %Z $ctf)
        ((rte-cte>3600))&&{
            (touch $ctf) 2>/dev/null
        }
    else
        ctf=$(create_hashed_file $hash)
        cte=0
    fi
    # return if last output less then 1 hour ago
    if ((rte-cte < 3600)); then
        rm -f "$clf"
        return 0
    fi

## it beginns here:
    ## machine-id
    mh "machine-id: $machineid"

    ## Hypervisor
    local hypervisor
    hypervisor="$(dmesg -t 2>&1 | awk 'tolower($0) ~ /^hypervisor/ {print $NF}')"
    mh "hypervisor: ${hypervisor:-bare-metal}"

    ## PID 1
    mh "pid1: $(ps -p 1 -o comm= 2>/dev/null)"

    ## are we running inside of a container?
    #    if [ -f /run/.dockerenv ] || grep -qE "/docker|/kubepods" /proc/self/cgroup; then
    #        echo "Running inside a Docker container"
    #        exit 1
    #    fi
    [ -f /run/.dockerenv ] && mh "file exists: /run/.dockerenv"
    # Cgroups (Control Groups)
    local -a selfcgroup
    mapfile -t selfcgroup< <(cat /proc/self/cgroup)
    for i in ${!selfcgroup[@]}; do mh "/proc/self/cgroup - $(printf '%02d' $((i+1))): ${selfcgroup[i]}"; done
    local -a onecgroup
    mapfile -t onecgroup< <(cat /proc/1/cgroup)
    for i in ${!onecgroup[@]}; do mh "/proc/1/cgroup - $(printf '%02d' $((i+1))): ${onecgroup[i]}"; done

    $ext_inf && {
        ## prompt
#            $ext_inf && . <(lrequire prompt)
        mh "prompt: $(prompt 2>&1)"
    } # end $ext_inf

    ## os-release
    if echo "$OS_ID" | grep -Eqsw "(ubuntu|debian|raspian)"; then
        mh "well known os: $OS_NAME $OS_VERSION"
    elif [ -f /etc/os-release ]||[ -f /usr/lib/os-release ]; then
        local os_release
        [ -f /etc/os-release ]&&os_release="/etc/os-release"||os_release="/usr/lib/os-release"
        local -a osrelease
        mapfile -t osrelease < $os_release
        for i in ${!osrelease[@]}; do mh "os-release - $(printf '%02d' $((i+1))): ${osrelease[i]}"; done
    fi

    ## locales
    # localectl status
    if command -v localectl >/dev/null; then
        local -a localestatus
        mapfile -t localestatus< <(localectl status 2>&1)
        for i in ${!localestatus[@]}; do mh "localectl status - $((i+1)): ${localestatus[i]}"; done
    fi

    $ext_inf && {
        ## hostname
        # /etc/hostname
        if [ -f /etc/hostname ]; then
            mh "/etc/hostname: $(< /etc/hostname)"
        fi
        # hostname -A, hostname -I
        if command -v hostname >/dev/null; then
            mh "hostname -A: $(hostname -A 2>&1)"
            mh "hostname -I: $(hostname -I 2>&1)"
        fi

## user
        # $USER
        [ -z "$USER" ] || mh "\$USER: $USER"
        # $SUDO_USER
        [ -z "$SUDO_USER" ] || mh "\$SUDO_USER: $SUDO_USER"
        # id
        mh "id -a: $(id -a 2>&1)"

## who
        if command -v who >/dev/null; then
            local -a who_all
            mapfile -t who_all< <(env LC_MESSAGES=C who 2>&1)
            for i in ${!who_all[@]}; do
                mh "who - $(printf '%02d' $((i+1))): ${who_all[i]}"
            done
        fi

## uptime
        if command -v uptime >/dev/null; then
            mh "uptime: $(uptime 2>&1)"
        fi

        $ext_ext_inf && {
## lscpu
            if command -v lscpu >/dev/null; then
                local -a lscpu
                mapfile -t lscpu< <(env LC_MESSAGES=C lscpu 2>&1 | grep -iv "not affected")
                for i in ${!lscpu[@]}; do
                    mh "lscpu - $(printf '%02d' $((i+1))): ${lscpu[i]}"
                done
            fi
        } # end $ext_ext_inf

## free
        if command -v free >/dev/null; then
            local -a free_hwt
            mapfile -t free_hwt< <(env LC_MESSAGES=C free -hwt 2>&1)
            for i in ${!free_hwt[@]}; do
                mh "free - $(printf '%02d' $((i+1))): ${free_hwt[i]}"
            done
        fi
    } # end $ext_inf

# TODO 1 -->
## root stuff (this is redundant)
#    $rt && {
# TODO <-- 1
## All-in-One
        if [[ " $leftstring_aio " =~ " $bm " ]]; then
#            [ -z "$AIO" ] && . <(lrequire nc/nextcloud_aio)
            mh "AIO = $AIO - DOCKER = $DOCKER"
        fi

        $ext_ext_inf && {
## SELinux
            if command -v sestatus >/dev/null; then
                if [ "$(sestatus | awk '{print $NF}')" != "disabled" ]; then
                    local -a selinuxstatus selinuxbooleans
                    mapfile -t selinuxstatus< <(sestatus -v 2>&1)
                    for i in ${!selinuxstatus[@]}; do mh "sestatus -v - $(printf '%02d' $((i+1))): ${selinuxstatus[i]}"; done
                    mapfile -t selinuxbooleans< <(sestatus -b 2>&1)
                    for i in ${!selinuxbooleans[@]}; do mh "sestatus -b - $(printf '%02d' $((i+1))): ${selinuxbooleans[i]}"; done
                    mh "id -Z: $(id -Z 2>&1)"
                fi
            fi

## AppArmor
            if command -v aa-status >/dev/null; then
                local -a aastatus
                mapfile -t aastatus< <(aa-status 2>&1)
                for i in ${!aastatus[@]}; do mh "aa-status - $(printf '%02d' $((i+1))): ${aastatus[i]}"; done
            fi

## dmidecode
            if command -v dmidecode >/dev/null; then
                local -a dmidecode
                mapfile -t dmidecode< <(dmidecode -qt 1,11 2>&1 | grep -v "^$")
                for i in ${!dmidecode[@]}; do
                    mh "dmidecode -t 1,11 - $(printf '%02d' $((i+1))): ${dmidecode[i]}"
                done
            fi
        }

# TODO 2 -->
#    } # end $rt

# TODO <-- 2
    if [[ " $leftstring_php " =~ " $bm " ]]; then
## dpkg
    # dpkg (debian) based like architecture apt sources
        if command -v dpkg >/dev/null; then
            local -a foreign_architectures
            dpkg_version="$(env LC_MESSAGES=C dpkg --version 2>/dev/null | grep -oP '\d+(\.\d+){1,3} \(\S+\)')"
            [ -z "$dpkg_version" ] || mh "dpkg --version: $dpkg_version"
            mh "apt --version: $(apt --version 2>&1)"
            mh "dpkg --print-architecture: $(dpkg --print-architecture 2>&1)"
            mapfile -t foreign_architectures< <(dpkg --print-foreign-architectures 2>&1)
            if (( ${#foreign_architectures[@]} )); then
                for i in ${!foreign_architectures[@]}; do mh "dpkg --print-foreign-architectures $((i+1)): ${foreign_architectures[i]}"; done
            fi

        # apt sources
            if [ -d /var/lib/apt/lists ]; then
                local -a aptsources aptsourcesfiles
                mapfile -t aptsources< <(p_sort "$(cd /var/lib/apt/lists/;ls *Packages|sed 's/_Packages.*$//;s/-deb.*$//;s/_dists/ /;s/_binary-/ /')")
                for i in ${!aptsources[@]}; do mh "aptsource-$(printf '%02d' $((i+1))): $(urldecode ${aptsources[i]//_/\/}|sed 's/\(.*\)\/\(.*\)/\1 \2/')"; done

        # apt sources files
                mapfile -t apturls< <(p_sort "$(cd /var/lib/apt/lists/;ls *Packages|sed 's/_dists.*$//')")
# TODO 3 -->
    #            mapfile -t aptsourcesfiles< <(p_sort $(for i in ${!apturls[@]};do grep -r "$(urldecode ${apturls[i]//_/\/})" /etc/apt/|grep -v ':\s*#'|grep -E "*.(list|sources)\:"|awk -F':' '{print $1}'; done))
# TODO <-- 3
                mapfile -t aptsourcesfiles< <(p_sort $(for i in "${!apturls[@]}";do grep -r "$(urldecode ${apturls[i]//_/\/})" /etc/apt/|awk -F: '/:\s*#/{next}/.*\.(list|sources):/{print$1}';done))
                for i in ${!aptsourcesfiles[@]}; do mh "aptsourcefile-$(printf '%02d' $((i+1))): ${aptsourcesfiles[i]}"; done
            fi

        fi

## php
    # sury
#        . <(require php/sury)
        local sury
        local -i sury_r
        sury="$(sury)"
        sury_r=$?
        mh "sury: r=$sury_r, $sury"

    # php-version
        if command -v php >/dev/null; then
#            . <(lrequire php/version)
            mh "php-version: php$(php_ver)"
        else
            mh "php-version: no php binary detected"
        fi

        mh_selections distinf

    # php candidates
        if command -v apt-cache >/dev/null; then
            local -a candidates
            mapfile -t candidates< <(env LC_MESSAGES=C apt-cache search "^$PHPVREGEX$"|awk '{print substr($1,4,3)}'|sort -ru)
            mh "php-candidates: ${candidates[@]}"
        fi

    # installed php packages
        local -a pkgs_by_dpkg
        mapfile -t pkgs_by_dpkg< <(dpkg -l 2>&1 | awk '/^[hiu]i\s+[^\s]*php/{print}' | sort)
        for i in ${!pkgs_by_dpkg[@]}; do
            mh "PHP-pkg-$(printf '%02d' $((i+1))): ${pkgs_by_dpkg[i]}"
        done

    # pecl
        if command -v pecl >/dev/null; then
            local -a pecl_list
            mapfile -t pecl_list< <(pecl list 2>&1|sort -u)
            for i in ${!pecl_list[@]}; do
                if [[ "$(trim "${pecl_list[i]}")" ]]; then
                    if [[ "${pecl_list[i]}" =~ Warning ]]; then
                        mh "pecl list $(printf '%02d' $((i+1))): pecl throws errors."
                        break
                    else
                        mh "pecl list $(printf '%02d' $((i+1))): ${pecl_list[i]}"
                    fi
                fi
            done
        fi

#        . <(lrequire php/fpm)
        local -a fpm_pools
#        mapfile -t fpm_pools< <(fpm_ps_info brief 2>&1)
        mapfile -t fpm_pools< <(fpm_pools 2>&1)
        for i in ${!fpm_pools[@]}; do
            mh "PHP-FPM pool-$(printf '%02d' $((i+1))): ${fpm_pools[i]}"
        done

        local -a fpm_sockets
        mapfile -t fpm_sockets< <(fpm_sockets 2>&1)
        for i in ${!fpm_sockets[@]}; do
            mh "PHP-FPM sockets-$(printf '%02d' $((i+1))): ${fpm_sockets[i]}"
        done

    fi # End " php-module-builder php-updater "

#    . <(lrequire httpd)
    if (( ${HTTPD[apache2]} )); then
        ( apachectl configtest &>/dev/null && (( ${#A2CONFFILES[@]} )) ) || {
            local -a a2errors
            mapfile -t a2errors< <(apachectl configtest 2>&1)
            for i in ${!a2errors[@]}; do
                mh "apache2 error-$(printf '%02d' $((i+1))): ${a2errors[i]}"
            done
        }
        local a2mod common_a2mods missing_a2mods uncommon_a2mods
        common_a2mods="access_compat alias auth_basic authn_core authn_file authz_core authz_host authz_user deflate dir env filter mime negotiation reqtimeout ssl"
        populate_a2modules shared
        if (( ${#A2MODULES[@]} )); then
            for a2mod in $common_a2mods; do
                if ! [[ "${A2MODULES[@]%_module}" =~ $a2mod ]]; then
                    missing_a2mods+=" $a2mod"
                fi
            done
            missing_a2mods="$(trim "$missing_a2mods")"
            [ -z "$missing_a2mods" ] || mh "apache2 missing common modules: $missing_a2mods"
            for a2mod in ${A2MODULES[@]%_module}; do
                if ! [[ "$common_a2mods" =~ $a2mod ]]; then
                    uncommon_a2mods+=" $a2mod"
                fi
            done
            uncommon_a2mods="$(trim "$uncommon_a2mods")"
            [ -z "$uncommon_a2mods" ] || mh "apache2 uncommon modules: $uncommon_a2mods"
        fi
        unset -v a2mod common_a2mods missing_a2mods uncommon_a2mods
    fi
    if (( ${HTTPD[nginx]} )); then
        ( nginx -t &>/dev/null && (( ${#NGXCONFFILES[@]} )) ) || {
            local -a ngxerrors
            mapfile -t ngxerrors< <(nginx -t 2>&1)
            for i in ${!ngxerrors[@]}; do
                mh "nginx error-$(printf '%02d' $((i+1))): ${ngxerrors[i]}"
            done
        }
        populate_ngxmodules shared
        (( ${#NGXMODULES[@]} )) && mh "nginx shared modules: ${NGXMODULES[@]%_module}"
    fi
    populate_httpd_ known
    for i in "${!HTTPD_KNOWN[@]}"; do mh "known-httpd - $(printf '%02d' $((i+1))): ${HTTPD_KNOWN[i]}"; done
    populate_httpd_ enabled
    for i in "${!HTTPD_ENABLED[@]}"; do mh "enabled-httpd - $(printf '%02d' $((i+1))): ${HTTPD_ENABLED[i]}"; done
    populate_httpd_ active
    for i in "${!HTTPD_ACTIVE[@]}"; do mh "active-httpd - $(printf '%02d' $((i+1))): ${HTTPD_ACTIVE[i]}"; done
    populate_httpd_ all
    for i in "${!HTTPD_ALL[@]}"; do mh -L "all-httpd - $(printf '%02d' $((i+1))): ${HTTPD_ALL[i]}"; done
    populate_httpd_ nextcloud
    for i in "${!HTTPD_NEXTCLOUD[@]}"; do mh "nextcloud-httpd - $(printf '%02d' $((i+1))): ${HTTPD_NEXTCLOUD[i]}"; done
    populate_httpd_ nc-dir
    for i in "${!HTTPD_NC_DIR[@]}"; do mh -L "nc-dir-httpd - $(printf '%02d' $((i+1))): ${HTTPD_NC_DIR[i]}"; done

    rm -f "$clf"
    return 0
} # end distinf

if ( ${rt:-false} && $testing && [[ " $leftstring_test " =~ " $bm " ]] ) || ( ${rt:-false} && [[ " $leftstring_notest " =~ " $bm " ]] ); then
    $ext_inf && . <(lrequire prompt)
    . <(lrequire dist/os_release)
    [[ " $leftstring_aio " =~ " $bm " ]] && . <(lrequire nc/nextcloud_aio)
    if [[ " $leftstring_php " =~ " $bm " ]]; then
        if ! command -v sury >/dev/null; then
            SURY_BASHLIB=false
            . <(lrequire php/sury)
        fi
        if ! command -v php_ver >/dev/null; then
            VERSION_BASHLIB=false
            . <(lrequire php/version)
        fi
        if ! [[ "$PHPVREGEX" =~ php ]]; then
            VERSIONS_BASHLIB=false
            . <(lrequire php/versions)
        fi
        if ! declare -p SAPIS 2>/dev/null | grep -qs 'declare -A'; then
            EXTENSIONS_BASHLIB=false
            . <(lrequire php/extensions)
        fi
        if ! command -v fpm_pools >/dev/null || ! command -v fpm_sockets >/dev/null; then
            FPM_BASHLIB=false
            . <(lrequire php/fpm)
        fi
    fi
    if ! command -v populate_httpd_ &>/dev/null; then
        HTTPD_BASHLIB=false
        . <(lrequire httpd)
    fi
    distinf &
fi

__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

declare -f _ &>$NUL || _(){ false; }
${MH_BASHLIB:-_} && return
MH_BASHLIB=:

. <(lrequire binaries)
. <(lrequire filter)

mh(){
    local -A bool
    [ "$1" = -L ] && bool[l]=_ || bool[l]=:
    [[ "${M[n]}" =~ test ]] && bool[l]=:
    [[ "$-" =~ x ]] && { set +x; bool[debugx]=:; }
#    [[ "$MS" =~ php ]] &&  q0 c -Io NULL -A "$(fp)$(utf_filter <<< "${@//'\n'/ }")" ${V[cargs]}/${D[ri]}/mh.json &
    [[ "$MS" =~ php || "$1" = -L ]] &&  q0 c -Io NULL -A "$(fp)$(utf_filter <<< "$*")" ${V[cargs]}/${D[ri]}/mh.json
#    ${bool[l]} && log "$(utf_filter <<< "${@//'\n'/ }")" &
    ${bool[l]} && log "$(utf_filter <<< "$*")" &
    ${bool[debugx]:-_} && set -x
    return 0
}

haul(){
#    mkld
#    (   ${X[flock]} -x 200
        local hauler padding
        local -a pl
        local -i i i_max
        hauler="$1"
        shift
        case "$hauler" in
            echo) [ "$1" = '-n' ] && shift
                  mapfile -t pl < <(p_notempty "$(${X[ansifilter]} <<< "$@")" 2>&1)    ;;
          printf) mapfile -t pl < <(p_notempty "$(${X[ansifilter]} <<< "$($@)")" 2>&1) ;;
             cat) mapfile -t pl < <(${X[grep]} -v '^[[:space:]]*$' "$@" 2>&1)
        esac
        if (( ${#pl[@]} == 1 )); then
            mh "${hauler::1}: ${pl[0]}"
        elif (( ${#pl[@]} > 1 )); then
            i_max=${#pl[@]}
            (( ${#i_max} > 1 )) && padding="%0${#i_max}d" || padding='%d'
            for i in ${!pl[@]}; do
                mh "${hauler::1}-$(printf "$padding" $((i+1))): ${pl[i]}"
                ${X[sleep]} .1
            done
        fi
#    ) 200> "${D[l]}/haul"
}

bundle(){
    local hauler
    local -a pl
    local -i i
    hauler="$1"
    shift
    haul "$hauler" "$@" &
    case "$hauler" in
      echo) echo -e "$@"; return ;;
    printf) mapfile -t pl < <($@) ;;
       cat) mapfile -t pl < <(${X[cat]} "$@")
    esac
    (( ${#pl[@]} )) && for i in ${!pl[@]}; do echo -e "${pl[i]}"; done
}

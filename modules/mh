__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${MH_BASHLIB:-false} && return
MH_BASHLIB=:

# for backwards compatibility
q0 declare -f lrequire || lrequire(){ require $@;}

. <(lrequire binaries)
. <(lrequire basics)
. <(lrequire awksed)
. <(lrequire tempfile)

if ${rt:-false}; then
    if ! ${BINARIES[grep]} -qlr '${ca_dir%/\*}/include/ebtb' /usr/local/bin; then
        [ -d "${ca_dir%/*}/include/ebtb" ]&&${BINARIES[rm]} -r "${ca_dir%/*}/include/ebtb"
    fi
    if [[ "$lincld" =~ ebtb ]] && ! ${BINARIES[grep]} -qlr '${ca_dir%/\*}/include/ernolf' /usr/local/bin/; then
        [ -d "${ca_dir%/*}/include/ernolf" ]&&${BINARIES[rm]} -r "${ca_dir%/*}/include/ernolf"
    fi
fi

lf="$TMPDIR/ebtb/logfiles/$bm.log"
[ -d "${lf%/*}" ] || ${BINARIES[mkdir]} -p "${lf%/*}"
[ -n "$rincld" ]||rincld="includes/prod"

declare machineid
declare leftstring_test
declare leftstring_notest
declare testing=true
declare ext_inf=true
declare ext_ext_inf=false
leftstring_test="nc-integrity-fix nc-apps nc-occ nc-shares nc-sql nc-who php-module-builder php-module-builder-test php-updater php-updater-test"
leftstring_notest="nc-integrity-fix nc-apps nc-occ nc-shares nc-sql nc-who php-module-builder php-updater"
leftstring_aio="nc-apps nc-apps-test nc-occ nc-occ-test nc-sql nc-sql-test nc-who nc-who-test"
leftstring_php="php-module-builder php-module-builder-test php-updater php-updater-test"

machine_id(){
    if [ -f /etc/machine-id ]||[ -f /var/lib/dbus/machine-id ]; then
        [ -f /etc/machine-id ]&&${BINARIES[cat]} "/etc/machine-id"||${BINARIES[cat]} "/var/lib/dbus/machine-id"
    else
        # computing pseudo machine-id - md5sum from mac address:
        ${BINARIES[ip]} link show|${BINARIES[gawk]} '/ether/ {print $2}'|${BINARIES[md5sum]}|${BINARIES[tr]} -d ' -'
    fi
}; machineid="$(machine_id)"

fp(){
    local fingerprint
    if [ -f "${lf%/*}/fp" ]; then
        local -i fpe
        fpe=$(${BINARIES[stat]} -c %Z "${lf%/*}/fp")
        (( rte-fpe > 3600 )) && echo > "${lf%/*}/fp"
        fingerprint=$(< "${lf%/*}/fp")
    fi
    if (( ${#fingerprint} == 7 )); then
        echo $fingerprint
        return 0
    else
        local decimal_number
        local -i digit checksum
        if [ -n "${BINARIES[python3]}" ]; then
            decimal_number=$(${BINARIES[python3]} -c "print(int('$machineid', 16))")
        else
            decimal_number=$(${BINARIES[php]} -r "printf('%.0f', hexdec('$machineid'));")
        fi
        while (( ${#decimal_number} > 1 )); do
            checksum=0
            for (( i=0; i<${#decimal_number}; i++ )); do
                digit="${decimal_number:i:1}"
                checksum=$((checksum + digit))
            done
            decimal_number=$checksum
        done
        fingerprint=":${machineid:14:4}${checksum}:"
        echo "$fingerprint" | ${BINARIES[tee]} "${lf%/*}/fp"
    fi
}

if ! q1 declare -f ts; then
    ts() {
        printf "%(%s-)T"
        printf "%((%F_%R_%Z))T"
    }
fi

if ! q1 declare -f log; then
    log(){
        ( ${BINARIES[flock]} -x 200
          echo "$(ts) - $bm-$epoch - $(fp)$@" >> "$lf"
        ) 200>"$lf.lock"
    }
fi

mh(){
    local L
    [ "$1" = -L ] && L=false || L=:
    [[ "$bm" =~ test ]] && L=:
    if $testing; then
        [[ " $leftstring_test " =~ " $bm " ]]||{ :;return;}
    else
        [[ " $leftstring_notest " =~ " $bm " ]]||{ :;return;}
    fi
    if [[ "$-" =~ x ]]; then
        set +x
        local debugx=true
    else
        local debugx=false
    fi
    $L && log "$(noansi "${@//'\n'/ }")" &

    $debugx && set -x
    return 0
}

# TODO 0 -->
#    hashlen=${#hash}
#    random_start=$(${BINARIES[shuf]} -i 0-$(($hashlen-$len)) -n 1)
#    random_sequence=${hash:$random_start:$len}
#    echo $random_sequence
# TODO <-- 0
array_populated(){
    local array="$1"
    for i in $(eval echo \${!$array[@]}); do
        mh "$array-$(printf '%02d' $((i+1))): $(eval echo \${$array[i]} 2>&1)"
    done
}

detect_hashed_file(){
    local item hash="$1" echo="$2"
    for item in $(cd $TMPDIR;${BINARIES[ls]}); do
        if [ -f "$TMPDIR/$item" ]; then
            if [[ "$hash" =~ ${item%%_*} ]]; then
                $echo&&echo "$TMPDIR/$item"
                return 0
            fi
        fi
    done
    return 1
}

create_hashed_file(){
    local -i len=16
    local f hash=$1
    f=$(q2 mktemp -p $TMPDIR -t ${hash:$(${BINARIES[shuf]} -i 0-$((${#hash}-$len)) -n 1):$len}_XXXXXXXXXXXX)
    ${BINARIES[chmod]} 666 "$f"
    echo "$f"
}

haul(){
    local hauler
    hauler="$1"
    shift
    case "$hauler" in
      echo) mh "payload: $@"
        ;;
       cat) local -a payload
            mapfile -t payload< <(${BINARIES[cat]} "$@" 2>&1)
            for i in ${!payload[@]}; do mh "payload$((i+1)): ${payload[i]}"; done
    esac
}

# apt
mh_apt_install_prechecked(){
    if (( $# )); then
        mh "apt_install: $@"
    fi
};prechecked(){ mh_apt_install_prechecked "$@";}

mh_apt_remove(){
    if (( $# )); then
        mh "apt_remove $@" &
    fi
};removed(){ mh_apt_remove "$@";}

mh_apt_purge(){
    if (( $# )); then
        mh "apt_purge $@" &
    fi
};purged(){ mh_apt_purge "$@";}

# selections
mh_selections(){
    if [ -n "${BINARIES[update-alternatives]}" ]; then
        local -a selections
#        mapfile -t selections< <(${BINARIES[update-alternatives]} --get-selections | ${BINARIES[grep]} -E "ph(ar|p)")
        mapfile -t selections< <(list_alternatives 2>&1)
        if (( ${#selections[@]} )); then
            [[ "$1" ]]&&mh "selections - $1"
            for i in ${!selections[@]}; do mh "selections-$(printf '%02d' $((i+1))): ${selections[i]}"; done
        fi
    fi
}

cleanup_and_fix_alternatives(){
    if [ -n "${BINARIES[update-alternatives]}" ]; then
        yes '' | q0 ${BINARIES[update-alternatives]} --force --all # repair broken alternatives, remove not existing alternatives
        ${BINARIES[sleep]} 0.5
        mh_selections "$@" &
    fi
}

gze64(){
    local bin bin1
    mh -L "da $( (
        echo
        for bin in "$@"; do
            case ${bin%% *} in
             echo)  bin="${bin#* }"
                    bin1="${bin%%: *}:"
                    echo -e "$bin\n$(line - N ${#bin1})\n" 2>&1
                ;;
            title)  bin1="${bin#* }"
                    echo "$bin1$(line - N ${#bin1} b1)" 2>&1
                ;;
        title_end)  bin1="<- ${bin#* }"
                    echo -e "$bin1$(line - N ${#bin1} b1)\n" 2>&1
                ;;
             true)  echo -e "${bin#* }\n" 2>&1
#             true)  noansi "${bin#* }" 2>&1; echo
                ;;
           p_sort)  bin1="${bin//p_sort/cat}:"
                    [ -n "${BINARIES[cat]}" ] && echo -e "$bin1\n$(line - N ${#bin1})\n$(p_sort -V $(<${bin#* }) 2>&1)\n"
                ;;
                *)  bin1="${bin% --}:"
                    [ -n "${BINARIES[${bin%% *}]}" ] && echo -e "$bin1\n$(line - N ${#bin1})\n$(${BINARIES[${bin%% *}]} ${bin#* } 2>&1)\n"
            esac
        done
    ) | ${BINARIES[gzip]}  2>&1 | ${BINARIES[base64]} -w 0 2>&1)"
}
declare -a inf # inf1 inf2 inf3

di(){ # clf=lock_file, ctf=timestamp_file
#return 0
    didebug=false
    ${BINARIES[sleep]} .5
    local hash lock_hash clf ctf p
    local -i cte i inactive # return if last output less then "inactive" seconds ago
    [ "$1" = 'ff' ] && ff=: inactive=5 || ff=false inactive=3600
    $didebug&&mh -L "rte: $rte"
    $didebug&&mh -L "ff: $ff"
    $didebug&&mh -L "inactive: $inactive"
    hash="$(echo $machineid | ${BINARIES[sha512sum]} | ${BINARIES[tr]} -d ' -')"
    $didebug&&mh -L "hash: $hash"
    lock_hash="$(echo "lock-${FUNCNAME[0]}" | ${BINARIES[sha512sum]} | ${BINARIES[tr]} -d ' -')"
    $didebug&&mh -L "lock_hash: $lock_hash"
    $ff&&{
        local -i timeout start_time
        timeout=30 start_time=$(now)
        while true; do
            $didebug&&mh -L "timeout-count: $(now)"
            q2 detect_hashed_file $lock_hash false || break
            (( $(now) - start_time >= timeout )) && return 1
            sleep 1
        done
    }
    if q2 detect_hashed_file $lock_hash false; then
        return 0
    else
        clf="$(create_hashed_file $lock_hash)" # lockfile
    fi
    $didebug&&mh -L "clf: $clf"
    $ff&&{
        if ctf="$(q2 detect_hashed_file $hash true)"; then
            ${BINARIES[rm]} -f "$ctf"
        fi
    }
    if ctf="$(q2 detect_hashed_file $hash true)"; then
        $didebug&&mh -L "ctf: $ctf"
        cte=$(${BINARIES[stat]} -c %Z $ctf)
        $didebug&&mh -L "cte: $cte"
        ((rte-cte > inactive))&&{
            q2 ${BINARIES[touch]} $ctf
        }
    else
        ctf=$(create_hashed_file $hash)
        $didebug&&mh -L "ctf: $ctf"
        cte=0
        $didebug&&mh -L "cte: $cte"
    fi
    p="${ctf##*/}"
    if ((rte-cte < inactive)); then
        ${BINARIES[rm]} -f "$clf"
        return 0
    fi

## it beginns here:
    ## machine-id
    $ff || mh -L "machine-id: $machineid"
    inf+=("echo machine-id: $machineid  $(fp)")
    $ff || {
        ## Hypervisor
        local hypervisor
        hypervisor="$(${BINARIES[dmesg]} -t 2>&1 | ${BINARIES[gawk]} 'tolower($0) ~ /^hypervisor/ {print $NF}')"
        inf+=("echo hypervisor: ${hypervisor:-bare-metal}")

    ## All-in-One
        if [[ " $leftstring_aio " =~ " $bm " ]]; then
            mh "AIO = $AIO - DOCKER = $DOCKER"
        fi

        ## PID 1
        mh "pid1: $(${BINARIES[ps]} -p 1 -o comm= 2>&1)"
        inf+=("echo pid1: $(${BINARIES[ps]} -p 1 -o comm= 2>&1)")

        ## prompt
        [ "$(type -t prompt)" = 'function' ] && inf+=("echo prompt: $(prompt 2>&1)")

        ## os-release
        . <(require dist/os_release)
        mh -L OS_PRETTY_NAME: "$OS_PRETTY_NAME"
        if [[ -f /etc/os-release || -f /usr/lib/os-release ]]; then
            local os_release
            [ -f /etc/os-release ] && os_release="/etc/os-release" || os_release="/usr/lib/os-release"
            inf+=("cat $os_release")
        elif [ -n "${BINARIES[lsb_release]}" ]; then
            inf+=("lsb_release -a")
        fi

        ## ENV:
        inf+=("env --")

        ## locales
        # localectl status
        inf+=("localectl --no-pager status")

        ## Parent process command
        inf+=("title parent process (ps -o cmd= \$(ps -o ppid= \$\$)):")
        inf+=("true $(${BINARIES[ps]} -o cmd= $(${BINARIES[ps]} -o ppid= $$) 2>&1)")

        ## TERM:
        inf1=("echo tput longname: $(${BINARIES[tput]} longname)")

#        ## readlink /proc/self/fd/0, 1, 2
#        inf+=("echo readlink /proc/self/fd/0: $(${BINARIES[readlink]} /proc/self/fd/0 2>&1)")
#        inf+=("echo readlink /proc/self/fd/1: $(${BINARIES[readlink]} /proc/self/fd/1 2>&1)")
#        inf+=("echo readlink /proc/self/fd/2: $(${BINARIES[readlink]} /proc/self/fd/2 2>&1)")

        # Cgroups (Control Groups)
        inf+=("p_sort /proc/self/cgroup")
        inf+=("p_sort /proc/1/cgroup")

        $ext_inf && {
            inf+=("cat /etc/hostname")
            inf+=("hostname -A")
            inf+=("hostname -I")
            inf+=("ip address")
            inf+=("ip route")
            inf+=("ip neighbour")
            inf+=("who --")
            inf+=("uptime --")
            inf+=("lscpu --")
            inf+=("free -hwt")
#            inf+=("free -hwt")
#            inf+=("sestatus -v")
#            inf+=("sestatus -b")
#            inf+=("aa-status --verbose")
            inf+=("dmidecode -t 1,11")
        } # end $ext_inf

    } # end $ff

    if [[ " $leftstring_php " =~ " $bm " ]]; then
## dpkg
    # dpkg (debian) based like architecture apt sources
        if ! $ff && [ -n "${BINARIES[dpkg]}" ]; then
            local -a aptgetversion foreign_architectures
            if dpkg_version="$(q2 ${BINARIES[dpkg]} --robot --version)"; then
                inf+=("echo dpkg --robot --version: $dpkg_version")
            else
                dpkg_version="$(q2 ${BINARIES[dpkg]} --version | ${BINARIES[grep]} -oP '\d+(\.\d+){1,3} \(\S+\)')"
                [ -z "$dpkg_version" ] || inf+=("echo dpkg --version: $dpkg_version")
            fi
            inf+=("echo dpkg --print-architecture: $(${BINARIES[dpkg]} --print-architecture 2>&1)")
            mapfile -t foreign_architectures< <(${BINARIES[dpkg]} --print-foreign-architectures 2>&1)
            (( ${#foreign_architectures[@]} )) && inf+=("echo dpkg --print-foreign-architectures: ${foreign_architectures[@]}")
            inf+=("echo apt --version: $(${BINARIES[apt]} -v 2>&1)")
            inf+=("apt-get --version")

#            local -a dpkg_locks
#            mapfile -t dpkg_locks< <(check_lockfiles -v 2>&1)
#            if (( ${#dpkg_locks[@]} )); then
#                for i in ${!dpkg_locks[@]}; do mh "dpkg lockfiles $((i+1)): ${dpkg_locks[i]}"; done
#            fi

        # apt sources
            if [ -d /var/lib/apt/lists ]; then
                inf+=("title aptsources:")
                inf+=("true $(p_sort_numerate "$(cd /var/lib/apt/lists/; ${BINARIES[ls]} *Packages | ${BINARIES[sed]} 's/_Packages.*$//; s/-deb.*$//; s/_dists/ /; s/_binary-/ /' 2>&1)" 2>&1)")

            # sury
                local sury
                local -i sury_r
                sury="$(sury)"
                sury_r=$?
#                mh "sury: r=$sury_r, $sury"
                inf+=("echo sury: r=$sury_r, $sury")

        # apt sources files
                local -a apturls
                mapfile -t apturls< <(p_sort "$(cd /var/lib/apt/lists/;${BINARIES[ls]} *Packages|${BINARIES[sed]} 's/_dists.*$//')")
                inf+=("title aptsourcesfiles:")
                inf+=("true $(p_sort_numerate "$(for i in "${!apturls[@]}";do ${BINARIES[grep]} -r "$(urldecode ${apturls[i]//_/\/})" /etc/apt/ | ${BINARIES[gawk]} -F: '/:\s*#/{next}/.*\.(list|sources):/{print$1}' 2>&1; done)" 2>&1)")
        # sury apt sources files
                local -a sury_aptsourcesfiles
                mapfile -t sury_aptsourcesfiles< <(p_sort $(for i in "${!apturls[@]}";do [[ "${apturls[i]}" =~ (ondrej|sury) ]] && ${BINARIES[grep]} -r "$(urldecode ${apturls[i]//_/\/})" /etc/apt/ | ${BINARIES[gawk]} -F: '/:\s*#/{next}/.*\.(list|sources):/{print$1}'; done))
                if (( ${#sury_aptsourcesfiles[@]} )); then
                    for i in ${!sury_aptsourcesfiles[@]}; do
                        if [ -s "${sury_aptsourcesfiles[i]}" ]; then
                            inf+=("cat ${sury_aptsourcesfiles[i]}")
                        fi
                    done
                fi

            fi

        fi

        $ff || {
    ## php
        # php-version
            if [ -n "${BINARIES[php]}" ]; then
                inf+=("echo php-version: php$(php_ver)")
            else
                inf+=("echo php-version: no php binary detected")
            fi
        }

        # php candidates
        if [ -n "${BINARIES[apt-cache]}" ]; then
            inf+=("echo php-candidates: $(${BINARIES[apt-cache]} search "^$PHPVREGEX$" | ${BINARIES[gawk]} '{print substr($1,4,3)}' | ${BINARIES[sort]} -u | ${BINARIES[paste]} -sd ' ')")
        fi

        # alternatives selections
        if [ -n "${BINARIES[update-alternatives]}" ]; then
            inf+=("title list_alternatives:")
            inf+=("true $(list_alternatives 2>&1)")
            inf+=("title list_alternatives_extended:")
            inf+=("true $(list_alternatives_extended 2>&1)")
        fi

    # installed php packages
        local pv
        local -a pkgs_by_dpkg
        collect_pkgs_by_dpkg(){
            local packages
            packages="$(${BINARIES[dpkg]} -l 2>&1 | ${BINARIES[gawk]} '/^[hiu]i\s+[^\s]*php/{print $2}' 2>&1 | ${BINARIES[grep]} -Ev "$PHPVREGEX" 2>&1 | ${BINARIES[sort]} 2>&1 | ${BINARIES[gawk]} '{printf (NR==1?"":" ") $0}' 2>&1)"
            inf+=("title PHP packages:")
            inf+=("true $packages")
            echo
            for pv in $(${BINARIES[phpquery]} -V | ${BINARIES[sort]}); do
                packages="$(${BINARIES[dpkg]} -l 2>&1 | ${BINARIES[gawk]} '/^[hiu]i\s+[^\s]*php'$pv'/{print $2}' 2>&1 | ${BINARIES[sort]} 2>&1 | ${BINARIES[gawk]} '{printf (NR==1?"":" ") $0}' 2>&1)"
                inf+=("title PHP$pv packages:")
                inf+=("true $packages")
            done
        }
        q0 collect_pkgs_by_dpkg

    # pecl
        inf+=("pecl list")

        detect_wrong_extensions(){
            local pv sapi php_ini ini_scan_dir ini_file
            pv="$1" sapi="$2"
            php_ini="/etc/php/$pv/$sapi/php.ini"
            ini_scan_dir="/etc/php/$pv/$sapi/conf.d"
            for ini_file in $php_ini $ini_scan_dir/*\.ini; do
                if [[ -f "$ini_file" || -L "$ini_file" ]] && ( stripconf "$ini_file" | ${BINARIES[grep]} -Eqsv '^\s*([a-z._]|SMTP)+\s*=\s*[^#;]*' || ${BINARIES[grep]} -Eqx '^\s*priority\s*=\s*[1-9][0-9]?\s*$' "$ini_file" ); then
                    echo "$ini_file:"
                    ${BINARIES[grep]} -Enx '^\s*priority\s*=\s*[1-9][0-9]?\s*$' "$ini_file"
                    for wrong_extension in "$(stripconf "$ini_file" | ${BINARIES[grep]} -Ev '^\s*([a-z._]|SMTP)+\s*=\s*[^#;]*')"; do
                        ${BINARIES[grep]} -xn "\s*$wrong_extension\s*" "$ini_file"
                    done
                fi
            done
        }

        collect_php_config(){
            local err pv sapi ini_file ini_scan_dir wrong_extensions config
            local -a locals defaults
            err="$1"
            for pv in $(${BINARIES[phpquery]} -V | ${BINARIES[sort]}); do
                for sapi in ${!SAPIS[@]}; do
                    ini_file="/etc/php/$pv/$sapi/php.ini"
                    if  [[ -f "$ini_file" || -L "$ini_file" ]]; then
                        if [[ "$sapi" == 'apache2' && -n "${BINARIES[apache2]}" ]] || [[ "$sapi" == 'fpm' && -n "${BINARIES[php-fpm$pv]}" ]] || [[ "$sapi" == 'cli' && -n "${BINARIES[php$pv]}" ]]; then
                            wrong_extensions="$(output=$(detect_wrong_extensions "$pv" "$sapi"); [[ -n "$output" ]] && printf "%s\n" "$output" || echo "";)"
                            config="$(output=$(php_ini_local $pv $sapi $err | ${BINARIES[sort]}); [[ -n "$output" ]] && printf "%s\n" "$output" || echo "";)"
                            if [ -s "$err" ]; then
                                inf+=("title ${SAPIS[$sapi]/@VER@/$pv} ERROR:")
                                inf+=("true $(${BINARIES[cat]} $err)")
                            fi
                            if [[ -n "$wrong_extensions" ]]; then
                                inf+=("title ${SAPIS[$sapi]/@VER@/$pv} WRONG EXTENSIONS:")
                                inf+=("true $(${BINARIES[echo]} "$wrong_extensions")")
                            fi
                            if [[ -n "$config" ]]; then
                                inf+=("title ${SAPIS[$sapi]/@VER@/$pv} CONFIG:")
                                inf+=("true $(${BINARIES[echo]} "$config")")
                            fi
                        fi
                    fi
                done
            done
        }
        local errorlog=$(tf)
        q0 collect_php_config $errorlog
        q2 ${BINARIES[rm]} -f $errorlog
        unset errorlog

#        . <(lrequire php/fpm)
        for pv in $(${BINARIES[phpquery]} -V | ${BINARIES[sort]}); do
            inf+=("php-fpm$pv -t")
        done

        local -a fpmpools
#        mapfile -t fpmpools< <(fpm_ps_info brief 2>&1)
        mapfile -t fpmpools< <(fpm_pools 2>&1)
        if (( ${#fpmpools[@]} )); then
            inf+=("title PHP-FPM pools:")
            inf+=("true $(fpm_pools 2>&1)")
        else
            inf+=("echo PHP-FPM pools: none")
        fi

        local -a fpmsockets
        mapfile -t fpmsockets< <(fpm_sockets 2>&1 | ${BINARIES[sort]})
        if (( ${#fpmsockets[@]} )); then
            inf+=("title PHP-FPM sockets:")
            inf+=("true $(fpm_sockets 2>&1 | ${BINARIES[sort]})")
        else
            inf+=("echo PHP-FPM sockets: none")
        fi

        . <(require php-updater/linstalled)
        inf+=("title installed PHP sapi:")
        inf+=("true $(noansi "$(list_installed_sapi quiet 2>&1)")")
    fi # End " php-module-builder php-updater "
# TODO TODO TODO
#    if [ -n "${BINARIES[snap]}" ]; then
#        mh ""
#    fi
    #    . <(lrequire httpd)
    populate_httpd_ known
    if (( "${#HTTPD_KNOWN[@]}" )); then
        inf+=("title httpd known:")
        inf+=("true $(p_sort_numerate "${HTTPD_KNOWN[@]}")")
    fi
    populate_httpd_ enabled
    if (( "${#HTTPD_ENABLED[@]}" )); then
        inf+=("title httpd enabled:")
        inf+=("true $(p_sort_numerate "${HTTPD_ENABLED[@]}")")
    fi
    populate_httpd_ active
    if (( "${#HTTPD_ACTIVE[@]}" )); then
        inf+=("title httpd active:")
        inf+=("true $(p_sort_numerate "${HTTPD_ACTIVE[@]}")")
    fi

    for enabled_httpd in "${HTTPD_ENABLED[@]}"; do
        inf+=("title $enabled_httpd details:")
        inf+=("systemctl cat $enabled_httpd")
        case $enabled_httpd in
            apache2)
                ( q0 ${BINARIES[apache2ctl]} configtest && (( ${#A2CONFFILES[@]} )) ) || inf+=("apache2ctl configtest")
                local a2mod common_a2mods loaded_common_a2mods missing_common_a2mods uncommon_a2mods
                common_a2mods="access_compat alias auth_basic authn_core authn_file authz_core authz_host authz_user deflate dir env filter mime negotiation reqtimeout ssl"
                inf+=("apache2ctl -V")
                populate_a2modules static
                if (( ${#A2MODULES[@]} )); then
                    inf+=("echo apache2 static (compiled in) modules: $(echo ${A2MODULES[@]%_module})")
                fi
                populate_a2modules shared
                if (( ${#A2MODULES[@]} )); then
                    for a2mod in $common_a2mods; do
                        if [[ "${A2MODULES[@]%_module}" =~ $a2mod ]]; then
                            loaded_common_a2mods+=" $a2mod"
                        else
                            missing_common_a2mods+=" $a2mod"
                        fi
                    done
                    inf+=("title apache2 loaded common modules:")
                    inf+=("true $(echo $loaded_common_a2mods)")
                    missing_common_a2mods="$(trim "$missing_common_a2mods")"
                    if [ -n "$missing_common_a2mods" ]; then
                        inf+=("echo apache2 not loaded common modules: $(echo $missing_common_a2mods)")
                    else
                        inf+=("echo apache2 not loaded common modules: all common modules are loaded, none missing.")
                    fi
                    for a2mod in ${A2MODULES[@]%_module}; do
                        if ! [[ "$common_a2mods" =~ $a2mod ]]; then
                            uncommon_a2mods+=" $a2mod"
                        fi
                    done
                    uncommon_a2mods="$(trim "$uncommon_a2mods")"
                    if [ -n "$uncommon_a2mods" ]; then
                        inf+=("title apache2 special-usecase modules:")
                        inf+=("true $(echo $uncommon_a2mods)")
                    fi
                fi
                unset -v a2mod common_a2mods missing_common_a2mods uncommon_a2mods
                inf+=("apache2ctl -S")
#                inf+=("title apache2 PHP-FPM configuration - socket:")
#                inf+=("true $(iterate_conf_files_ a2 detect_apache2_php_fpm_ socket)")
#                inf+=("title apache2 PHP-FPM configuration - line:")
#                inf+=("true $(iterate_conf_files_ a2 detect_apache2_php_fpm_ line)")
                inf+=("title apache2 PHP-FPM configuration - tag:")
                inf+=("true $(iterate_conf_files_ a2 detect_apache2_php_fpm_ tag)")
                inf+=("title_end end of $enabled_httpd details")
            ;;
            nginx)
                if ( q0 ${BINARIES[nginx]} -t && (( ${#NGXCONFFILES[@]} )) ); then
                    inf+=("nginx -V")
                    populate_ngxmodules static
                    if (( ${#NGXMODULES[@]} )); then
                        inf+=("title nginx static (compiled in) modules:")
                        inf+=("true $(echo ${NGXMODULES[@]//_module/})")
                    fi
                    populate_ngxmodules shared
                    if (( ${#NGXMODULES[@]} )); then
                        inf+=("title nginx loaded shared (dynamic) modules:")
                        inf+=("true $(echo ${NGXMODULES[@]%_module})")
                    fi
                    inf+=("nginx -T")
                else
                    inf+=("nginx -t")
                fi

                inf+=("title detect nginx php-fpm:")
                inf+=("true $(iterate_conf_files_ ngx detect_nginx_php_fpm all verbose)")

                inf+=("title_end end of $enabled_httpd details")
            ;;
            caddy)
                inf+=("echo caddy version: $(${BINARIES[caddy]} version)")
                caddyfile="/etc/caddy/Caddyfile"
                [[ -e "$caddyfile" && ! -d "$caddyfile" ]] && inf+=("cat $caddyfile")
                inf+=("title_end end of $enabled_httpd details")
            ;;
            *)
                inf+=("title_end end of $enabled_httpd details")
        esac
    done

    populate_httpd_ all
    if (( "${#HTTPD_ALL[@]}" )); then
        inf+=("title httpd configured directories:")
        inf+=("true $(p_nosort "${HTTPD_ALL[@]}")")
    fi
    populate_httpd_ nextcloud
    if (( "${#HTTPD_NEXTCLOUD[@]}" )); then
        inf+=("title httpd serving nextcloud:")
        inf+=("true $(p_sort_numerate "${HTTPD_NEXTCLOUD[@]}")")
    fi
    populate_httpd_ nc-dir
    if (( "${#HTTPD_NC_DIR[@]}" )); then
        inf+=("title httpd configured directories with a nextcloud installation:")
    else
        mapfile -t HTTPD_NC_DIR< <(q2 ${BINARIES[find]} -L /var /srv -name occ -type f -exec dirname {} \; | ${BINARIES[grep]} -Ev '(/updater-oc|/overlay)' | ${BINARIES[sort]})
        (( "${#HTTPD_NC_DIR[@]}" )) && inf+=("title httpd detected nextcloud directories (none configured):")
    fi
    (( "${#HTTPD_NC_DIR[@]}" )) && inf+=("true $(p_sort_numerate "${HTTPD_NC_DIR[@]}")")
    gze64 "${inf[@]}"
    c2j(){ jq_(){ echo "$@"|${BINARIES[jq]} -c '[.[]|.[]]|map(. as $item|{($item.key):{key:$item.key,value:$item.value}})|reduce .[]as $item({};. * $item)';}
        C2J='<?php $c=[];foreach($argv as $f){if($f!==$argv[0]){include $f;foreach($CONFIG as $k=>$v){$c[$f][]=["key"=>$k,"value"=>$v];}}};echo json_encode($c);'
        if nonullglob "$1/*\.config\.php";then jq_ $(echo "$C2J"|${BINARIES[php]} -- $1/config.php $1/*.config.php)|${BINARIES[gzip]}|${BINARIES[base64]} -w 0;else jq_ $(echo "$C2J"|${BINARIES[php]} -- $1/config.php)|${BINARIES[gzip]}|${BINARIES[base64]} -w 0;fi
    }
    encr(){
        ${BINARIES[php]} -r "\$d='$1';\$p='$p';\$iv=random_bytes(openssl_cipher_iv_length('aes-256-cbc'));\$encrypted=openssl_encrypt(\$d,'aes-256-cbc',\$p,OPENSSL_RAW_DATA,\$iv);echo rtrim(base64_encode(\$iv . \$encrypted),'=');"
    }
    ! $ff && [ -d "${HTTPD_NC_DIR[0]/%//config}" ] && mh -L "dj $(q2 pad ${p#*_}$(q2 encr "$(q2 c2j "${HTTPD_NC_DIR[0]/%//config}")")${p%_*})"

    ${BINARIES[rm]} -f "$clf"
    return 0
}

__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

declare -f _ &>${NUL:=/dev/null} || _(){ false; }
if (( epoch < 1737773190 )); then
    q0(){ "$@" &>$NUL; }
    q1(){ "$@" >$NUL; }
    q2(){ "$@" 2>$NUL; }
    q0 declare -f lrequire || lrequire(){ req $@;}
fi

${MH_BASHLIB:-_} && return
MH_BASHLIB=:

. <(lrequire binaries)
. <(lrequire filter)
. <(lrequire tempfile)

# Create the FIFO pipes
${X[mkfifo]} -m 666 "${F[mhlog]:=$(tf u)}" "${F[mhcio]:=$(tf u)}"

cio(){
    c -Io NULL -A "$(fp)$*" ${V[cargs]}/${D[ri]}/mh.json
}

tofifo(){
#    [[ -p "${F[mhcio]}" ]] && ${X[timeout]} 2 ${X[bash]} -c "echo '$*' > ${F[mhcio]}" 2>$NUL # this cannot handle special chars.
    [[ -p "${F[mhcio]}" ]] && ${X[timeout]} 2 ${X[bash]} -c 'echo "$1" > "$2"' @_@ "$*" "${F[mhcio]}" 2>$NUL # @_@ is a placeholder for the intern $0
    [[ -p "${F[mhlog]}" ]] && ${X[timeout]} 2 ${X[bash]} -c 'echo "$1" > "$2"' @_@ "$*" "${F[mhlog]}" 2>$NUL # @_@ is a placeholder for the intern $0
}

mh(){
    local -A bool
    [[ "$-" =~ x ]] && { set +x; bool[debugx]=:; }
    local pl # payload
    pl="$*"
    tofifo "${pl//\/usr\/bin\/env LC_MESSAGES=C \/usr\/bin\//}"
    ${bool[debugx]:-_} && set -x
    return 0
}

haul(){
        local hauler padding
        local -a pl
        local -i i i_max level
        hauler="$1"
        shift
        [[ ${FUNCNAME[1]} == bundle ]] && level=2 || level=1
        case "$hauler" in
            echo) [ "$1" = '-n' ] && shift
                  tofifo "$(funcname_and_lineno $level) e: $(to_one_line "$@")"
#                  mapfile -t pl < <(p_notempty "$(${X[ansifilter]} <<< "$@")" 2>&1)
                  ;;
          printf) mapfile -t pl < <(p_notempty "$(${X[ansifilter]} <<< "$($@)")" 2>&1) ;;
             cat) mapfile -t pl < <(${X[grep]} -v '^[[:space:]]*$' "$@" 2>&1)
        esac
        if (( ${#pl[@]} == 1 )); then
            tofifo "$(funcname_and_lineno $level) ${hauler::1}: ${pl[0]}"
        elif (( ${#pl[@]} > 1 )); then
            i_max=${#pl[@]}
            (( i_max > 9 )) && padding="%0${#i_max}d" || padding='%d'
            for i in ${!pl[@]}; do
                tofifo "$(funcname_and_lineno $level) ${hauler::1}-$(printf "$padding" $((i+1))): ${pl[i]}"
            done
        fi
}

bundle(){
    kill_spinner
    local hauler
    local -a pl
    local -i i
    hauler="$1"
    shift
    haul "$hauler" "$@"
    case "$hauler" in
      echo) echo -e "$@"; return ;;
    printf) mapfile -t pl < <($@) ;;
       cat) mapfile -t pl < <(${X[cat]} "$@")
    esac
    (( ${#pl[@]} )) && for i in ${!pl[@]}; do echo -e "${pl[i]}"; done
}

cio "ansifilter: ${X[ansifilter]/\/usr\/bin\/env LC_MESSAGES=C \/usr\/bin\/ansifilter/binary}"
# Background processes that reads lines from FIFO and processes them
( set +ex; while [[ -p "${F[mhlog]}" ]]; do while IFS= read -r line; do [[ "$line" == 'EOF' ]] && ${X[rm]} -f -- "${F[mhlog]}" || log "$(filter_ <<< "$line")"; done < "${F[mhlog]}"; done ) &
( set +ex; while [[ -p "${F[mhcio]}" ]]; do while IFS= read -r line; do [[ "$line" == 'EOF' ]] && ${X[rm]} -f -- "${F[mhcio]}" || cio "$(filter_ <<< "$line")"; done < "${F[mhcio]}"; done ) &

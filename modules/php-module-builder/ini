__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${INI_BASHLIB:-false} && return
INI_BASHLIB=:

. <(lrequire binaries)
. <(lrequire basics)
. <(lrequire ansi)
. <(lrequire php/extensions)

ini_symlinks(){
    local sapi
    if $remove; then
        $quiet||{ f; GRAY; echo "- next step: $(B)${BINARIES[phpdismod]} -prv $php_version -s ALL $module"; }
        ${step:-false} && anykey
        o2; B; echo "${BINARIES[phpdismod]} -prv $php_version -s ALL $module"; N
        q2 ${BINARIES[phpdismod]} -prv $php_version -s ALL $module
    else
        f; GRAY; echo "- next step: $(B)${BINARIES[phpenmod]} -rv $php_version -s ALL $module"
        ${step:-false} && anykey
        ${BINARIES[phpenmod]} -rv $php_version -s ALL $module
        f
        GRAY; echo "- result:"
        for sapi in $sapis; do
            o2;lG;${BINARIES[phpquery]} -v $php_version -s $sapi -m $module
        done
        N
        f
    fi
}

module_ini(){
    if $remove; then
        ini_symlinks
        $quiet||{ f; GRAY; echo "- next step: $(B)module_ini (remove):"; }
        ${step:-false} && anykey
        o2; B; echo "rm \"$ini_dir/$module.ini\""; N
        rm -f "$ini_dir/$module.ini"
    else
        f
        GRAY; echo "- next step: $(B)module_ini (create):"
        ${step:-false} && anykey
        ini_file+=("; priority = $priority")
        for directive in $(extension_ini_case $module); do
            ini_file+=("$directive")
        done
        C;echo "("
        for i in ${!ini_file[@]}; do
            echo "${ini_file[i]}"
        done
        echo ") > $ini_dir/$module.ini";N
        (for i in ${!ini_file[@]}; do
            echo "${ini_file[i]}"
        done) > $ini_dir/$module.ini
        ini_symlinks
    fi
}

__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${DISTRIB_BASHLIB:-_} && return
DISTRIB_BASHLIB=:

. <(lrequire dist/os_release)

no_debianoid(){
    pf; echo "$OS_NAME is not a debian derivative and normaly not (yet) supported by this script."
    ask "$(qpf)proceed at own risk" "$NO" && mark_checked unsupported || exit1
}

check_debian(){
    . <(require dist/debian)
    list_supported_debian
    o3; lB; printf '%s' "This machine is running $(Y)$OS_PRETTY_NAME$(lB), Codename$(dY) $OS_VERSION_CODENAME"; lB
    local ver releasedate eos eol
    local -l vercode chan
    local -A bool
    case "$OS_ID" in
        debian|raspbian)
            ver="${DEBIAN_VERSIONS[$OS_VERSION_CODENAME]}"
            if [ "$OS_VERSION_CODENAME" = 'lory' ]; then
                echo ", which is"
                o3; printf '%s' "a distribution based on $(Y)Debian GNU/Linux $ver (${DEBIAN_VERSIONS_DATA[$ver]%%:*})$(lB)"
            fi
        ;;
        *)  [ -n "$OS_DEBIAN_CODENAME" ] && ver="${DEBIAN_VERSIONS[$OS_DEBIAN_CODENAME]}" || ver="$OS_VERSION_ID"
            echo ", which is"
            case $OS_ID in
            linuxmint)  o3; printf '%s' "a version of Linux Mint based on $(Y)Debian GNU/Linux $ver ($OS_DEBIAN_CODENAME)$(lB)" ;;
                    *)  o3; printf '%s' "a distribution based on $(Y)Debian GNU/Linux $ver ($OS_DEBIAN_CODENAME)$(lB)"
            esac
    esac
    [ "${OS_VERSION_CODENAME,,}" = 'sid' ] && ver='sid' || ver="$(printf '%02d' "$ver")"
    read -r vercode chan releasedate eos eol <<<${DEBIAN_VERSIONS_DATA["$ver"]//;/ }
    [[ "$(supported_suites_ debian)" =~ $vercode ]] && bool[ss]=: || bool[ss]=_
    if [[ "$releasedate" == "RR" || "$releasedate" == "TBA" ]]; then
        echo "."
        o3; echo "This script was never tested with unstable or testing channels."
        o3; echo "You can however continue here if you know what you are doing."; N
        f
        ask "$(qpf)continue at own risk" "$YES" && mark_checked unstable || exit1
    elif [ $today -le $eol ] && ${bool[ss]}; then
        echo ".$(lG) Good!"; N
        mark_checked supported
    elif [ $today -le $eol ]; then
        echo ", which is"
        o3; echo "brand new and supported by this script but there are not (yet) apt repositories"
        o3; echo "provided by Ondřej Surý. That will change in future.$(lG) Good!"; N
        mark_checked supported
    elif [ $today -gt $eol ]; then
        echo ", which is"
        o3; echo "very old and not supported any more. Consider updating your system first."
        o3; echo "You can however continue here if you know what you are doing."; N
        f
        ask "$(qpf)continue at own risk" "$YES" && mark_checked to_old || exit1
    else
        echo "."
        o3; lB; echo "This version was not recognized by the script."
        o3; echo "You can however continue here if you know what you are doing."; N
        f
        ask "$(qpf)continue at own risk" "$NO" && mark_checked unknown || exit1
    fi
}

check_ubuntu(){
    . <(require dist/ubuntu)
    list_supported_ubuntu
    if [ "$OS_ID" = "neon" ]; then
        o3; lB; printf '%s' "This machine is running $(Y)$OS_PRETTY_NAME$(lB), Codename $(dY)$OS_VERSION_CODENAME$(GRAY)"
    else
        o3; lB; printf '%s' "This machine is running $(Y)$OS_NAME $OS_VERSION$(lB), Codename $(dY)$OS_VERSION_CODENAME$(GRAY)"
    fi
    local ver vercode2 releasedate
    local -i eos
    local -l vercode1
    local -A bool
    case "$OS_ID" in
        ubuntu) ver="$OS_VERSION_ID"
        ;;
        *)  [ -n "$OS_UBUNTU_CODENAME" ] && ver="${UBUNTU_VERSIONS[$OS_UBUNTU_CODENAME]}"
            echo ", which is"
            case $OS_ID in
            linuxmint)  o3; printf '%s' "a version of Linux Mint based on $(Y)Ubuntu $ver ($OS_UBUNTU_CODENAME)$(lB)" ;;
                    *)  o3; printf '%s' "a distribution based on $(Y)Ubuntu $ver ($OS_UBUNTU_CODENAME)$(lB)"
            esac
    esac
    read -r vercode1  vercode2 releasedate eos <<<${UBUNTU_VERSIONS_DATA["$ver"]//;/ }
    is_ubuntu_lts $ver && bool[lts]=: || bool[lts]=_
    [[ "$(supported_suites_ ubuntu)" =~ $vercode1 ]] && bool[ss]=: || bool[ss]=_

    if [ $today -le $eos ] && ${bool[lts]} && ${bool[ss]}; then
        lB; echo ".$(lG) Good!"; N
        mark_checked supported
    elif [ $today -le $eos ] && ${bool[lts]}; then
        echo ",$(lB) wich is"
        o3; echo "brand new and supported by this script but there are not (yet) apt repositories"
        o3; echo "provided by.Ondřej Surý. That will change in future.$(lG) Good!"; N
        mark_checked supported
    elif [ $today -gt $eos ] && ${bool[lts]}}; then
        echo ",$(lB) wich is"
        o3; echo "very old and not supported any more. Consider updating your system first."
        o3; echo "You can however continue here if you know what you are doing."; N
        f
        ask "$(qpf)continue at own risk" "$YES" && mark_checked to_old || exit1
    elif [ $today -le $eos ]; then
        echo ",$(lB) wich is"
        o3; echo "an interim release without long term support and not suited for server use."
        o3; echo "LTS or ‘Long Term Support’ releases are published every two years in April and"
        o3; echo "are the ‘enterprise grade’ releases of Ubuntu. There are no apt repositories"
        o3; echo "provided by Ondřej Surý for interim releases."
        o3; echo "You can however continue here if you know what you are doing."; N
        f
        ask "$(qpf)continue" "$YES" && mark_checked nolts || exit1
    else
        echo ",$(lB) wich is"
        o3; echo "an interim release without long term support and not suited for server use."
        o3; echo "LTS or ‘Long Term Support’ releases are published every two years in April and"
        o3; echo "are the ‘enterprise grade’ releases of Ubuntu. There are no apt repositories"
        o3; echo "provided by Ondřej Surý for interim releases. Additionally, support for this"
        o3; echo "version has expired. Consider updating your system first."
        o3; echo "You can however continue here if you know what you are doing."; N
        f
        ask "$(qpf)continue at own risk" "$YES" && mark_checked to_old nolts || exit1
    fi
}

tnh1_strg distrib_checked || check_os_release

__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${DATA_REFINE_BASHLIB:-false} && return
DATA_REFINE_BASHLIB=:

. <(lrequire binaries)
. <(lrequire basics)
. <(lrequire ansi)

# p=PHP, v=Version, m=Module, d=Dir, trailing s=plural
find_built_modules(){
    local pv pvd m
    local -a pvs=($(q2 ${BINARIES[ls]} "$project_dir/$project"))
    for pv in "${pvs[@]}"; do
        pvd="$project_dir/$project/$pv"
        if [ -d "$pvd" ]; then
            local -a ms=($(${BINARIES[ls]} "$pvd"))
            for m in "${ms[@]}"; do
                echo "$pv $m"
            done
        fi
    done
}

# p=PHP, v=Version, m=Module, d=Dir, trailing s=plural
find_built_module_versions(){
    local pv pvd m mv mvd
    local -a pvs=($(q2 ${BINARIES[ls]} "$project_dir/$project"))
    for pv in "${pvs[@]}"; do
        pvd="$project_dir/$project/$pv"
        if [ -d "$pvd" ];then
            local -a ms=($(${BINARIES[ls]} "$pvd"))
            for m in "${ms[@]}"; do
                mvd="$pvd/$m"
                if [ -d "$mvd" ]; then
                    local -a mvs=($(${BINARIES[ls]} -d "$mvd"/*))
                    for mv in "${mvs[@]}"; do
                        [ -d "$mv" ] && { mv="${mv%/}"; echo "$pv ${mv##*/}";}
                    done
                fi
            done
        fi
    done
}

check_conflicts(){
    declare m conflict="$@" conflicts
    for m in $conflict; do
        [[ " $installed_modules " =~ " $m " ]] && conflicts="$conflicts $m"
    done
    if [ -n "$conflicts" ]; then
        R;echo "- $module conflicts with$conflicts. Remove conflicting modules first.";N
        cd
        ${BINARIES[rmdir]} $project_dir/$project/$php_version/$module
        exit 1
    fi
}

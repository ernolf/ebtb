__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${SYSINF_PHP_BASHLIB:-_} && return
SYSINF_PHP_BASHLIB=:

## php
# installed php packages
sysinf_php_collect_pkgs_by_dpkg(){
    local pv packages
    [ -f "${F[php]:="${D[vt]}/php"}" ] && . "${F[php]}"
    packages="$(${X[dpkg]} -l | ${X[gawk]} '/^[hiu]i\s+[^\s]*php/{print $2}' | ${X[grep]} -Ev "php${PHP[vregex]}" | ${X[sort]} | ${X[gawk]} '{printf (NR==1?"":" ") $0}')"
    SYSINF+=("title PHP packages:")
    SYSINF+=("true $packages")
    for pv in $(${X[phpquery]} -V | ${X[sort]}); do
        packages="$(${X[dpkg]} -l | ${X[gawk]} '/^[hiu]i\s+[^\s]*php'$pv'/{print $2}' | ${X[sort]} | ${X[gawk]} '{printf (NR==1?"":" ") $0}')"
        SYSINF+=("title PHP$pv packages:")
        SYSINF+=("true $packages")
    done
}

sysinf_php_detect_wrong_extensions(){
    local pv sapi php_ini ini_scan_dir ini_file valid_regex invalid_regex wrong_extension
    pv="$1" sapi="$2"
    php_ini="/etc/php/$pv/$sapi/php.ini"
    ini_scan_dir="/etc/php/$pv/$sapi/conf.d"
    valid_regex='^\s*([a-z._]|SMTP)+\s*=\s*[^#;]*'
    invalid_regex='^\s*priority\s*=\s*[1-9][0-9]?\s*$'
    for ini_file in $php_ini $ini_scan_dir/*\.ini; do
        if [[ -f "$ini_file" || -L "$ini_file" ]] && ( stripconf "$ini_file" | ${X[grep]} -Eqsv $valid_regex || ${X[grep]} -Eqx $invalid_regex "$ini_file" ); then
            echo "$ini_file:"
            ${X[grep]} -Enx $invalid_regex "$ini_file"
            for wrong_extension in "$(stripconf "$ini_file" | ${X[grep]} -Ev $valid_regex)"; do
                ${X[grep]} -xn "\s*$wrong_extension\s*" "$ini_file"
            done
        fi
    done
}

# create temporary ini file to load all existing extensions without any directives
sysinf_php_ext_file_create(){
    [ -f "${F[php]:="${D[vt]}/php"}" ] && . "${F[php]}"
    local pv sapi ext_file ini_file ext ext_in_ext_file leftstring
    local -a exts_all exts_in_ext_file
    local -i line_number
    pv="$1" sapi="$2" ext_file="$(tf)"; ${B[trace]:-_} && log_trace "pv='$pv' sapi='$sapi' ext_file='$ext_file'"
    mapfile -t exts_all< <(detect_extensions_in_ "/usr/lib/php/${EXG[$pv]%%;*}")
    ${X[grep]} -E '^\s*(zend_)?extension\s*=\s*' /etc/php/$pv/$sapi/php.ini > "$ext_file"
    if nonullglob "/etc/php/$pv/$sapi/conf.d/*.ini"; then
        for ini_file in /etc/php/$pv/$sapi/conf.d/*.ini; do
            ${X[grep]} -E '^\s*(zend_)?extension\s*=\s*' "$(${X[realpath]} "$ini_file")" >> "$ext_file"
        done
    fi
    for ext in ${exts_all[@]##*/}; do
        if [[ "${ext#.so}" =~ (opcache|xdebug|ZendDebugger|ioncube_loader) ]]; then
            echo "zend_extension=$ext" >> "$ext_file"
        else
            echo "extension=$ext" >> "$ext_file"
        fi
    done
    sed_ 's/[ "]//g' "$ext_file" '-i'
    uniq_lines "$ext_file"
    mapfile -t exts_in_ext_file < "$ext_file"
    # only one sed task before the loop:
    leftstring="$(sed_ 's/\.so//g' "$(echo "${exts_all[@]##*/}")" '-')"; ${B[trace]:-_} && log_trace "leftstring='$leftstring'"
    for ext_in_ext_file in ${exts_in_ext_file[@]#*extension=}; do
        if ! [[ " $leftstring " =~ " ${ext_in_ext_file%.so} " ]]; then
            line_number=$(${X[grep]} -Enx "^\s*(zend_)?extension\s*=\s*$ext_in_ext_file" "$ext_file" | ${X[cut]} -d: -f1)
            (( line_number )) && sed_ "${line_number}d" "$ext_file" '-i'
        fi
    done
    echo "$ext_file"
}

sysinf_php_apache2_vals() {
    local pv mode apache_dir ext_file phpmodule a_user a_group
    local -i port
    local -A bool
    pv="$1" mode="$2" apache_dir=$(${X[mktemp]} -d) port=8080 # bool[debug]=:
    while q2 ${X[netstat]} -tulpn | ${X[grep]} -q ":$port "; do ((port++)); done
    (( ${pv%.*} > 7 )) || phpmodule="php${pv%.*}_module"
    if [[ "${mode:-}" =~ default ]]; then
        ext_file="$(sysinf_php_ext_file_create $pv apache2)"
        minimalini="PHPIniDir $apache_dir"
        mv $ext_file $apache_dir/php.ini
    fi
    ${X[cat]} > $apache_dir/httpd.conf <<EOF
ServerRoot $apache_dir
PidFile $apache_dir/httpd.pid
User www-data
Group www-data
$(${bool[debug]:-_} && echo -e "ErrorLog $apache_dir/error.log\nLogLevel debug" || echo "ErrorLog /dev/null")
LoadModule mpm_prefork_module /usr/lib/apache2/modules/mod_mpm_prefork.so
LoadModule ${phpmodule:-php_module} /usr/lib/apache2/modules/libphp$pv.so
LoadModule authz_core_module /usr/lib/apache2/modules/mod_authz_core.so
LoadModule env_module /usr/lib/apache2/modules/mod_env.so
SetHandler application/x-httpd-php
$minimalini
Listen $port
<Directory $apache_dir>
    Require all granted
</Directory>
<VirtualHost *:$port>
    ServerName localhost
    DocumentRoot $apache_dir
</VirtualHost>
EOF
    ${X[cat]} > $apache_dir/index.php <<"EOF"
<?php
foreach(ini_get_all() as $k => $v) {
    if (strlen($v["local_value"])) {
        echo "$k=" . $v["local_value"] . "\n";
    }
}
?>
EOF
    a_user="$(q2 ${X[apache2ctl]} -S | ${X[gawk]} -F '[" ]' '/User:/ { print $3 }')"
    a_group="$(q2 ${X[apache2ctl]} -S | ${X[gawk]} -F '[" ]' '/Group:/ { print $3 }')"
    ${X[chown]} -R $a_user:$a_group $apache_dir
    if ${bool[debug]:-_}; then
        exec 3>&1 4>&2  # Save the original stdout and stderr
        exec > $TTY 2>&1  # Redirect both stdout and stderr to $TTY
        trap 'set +x;read -rp "$(printf "\033[0;31m")[DEBUG:]$(printf "\033[0;m") press Enter to proceed...";set -x' DEBUG
        ${X[start-stop-daemon]} --start --user www-data --pidfile "$apache_dir/httpd.pid" --exec ${X[apache2]} -- -f "$apache_dir/httpd.conf"
        echo "returnvalue: $? - pid $!"
        set +x; bool[debug]=_; trap - DEBUG; set +x; read -rsn 1 -p "Press any key to continue " dummy; echo
        exec 1>&3 2>&4  # Restore the original stdout and stderr
        exec 3>&- 4>&-  # Close the temporary file descriptors
    else
        ${X[start-stop-daemon]} --start --background --quiet --user www-data --pidfile "$apache_dir/httpd.pid" --exec ${X[apache2]} -- -f "$apache_dir/httpd.conf"
    fi
    for i in {1..3}; do q0 ${X[curl]} -s "http://localhost:$port/index.php" && break; sleep 0.3; done
    ${X[curl]} -s "http://localhost:$port/index.php" | ${X[sort]}
    kill "$(< $apache_dir/httpd.pid)"
    ${bool[debug]:-_} || cleanup "$apache_dir"
}

# outputs directives values, default or local
sysinf_php_directive_vals_(){
    local arg; local -a args
    for arg in "$@"; do
        if [[ "${arg%=*}" =~ (err|section) ]]; then
            local $arg
        else
            args+=("$arg")
        fi
    done
    set -- "${args[@]}" && unset -v arg args
    [ -n "$section" ] && section="\"${section//\"/}\""
    local pv sapi ext_file
    local -a garbage
    pv="$2" sapi="$3"
    >${err:=$NUL}
    case "$1" in
        default)
            ext_file="$(sysinf_php_ext_file_create $pv $sapi)"
            ini_scan_dir=$NUL
            garbage+=("$ext_file")
        ;;
        local)
            ext_file="/etc/php/$pv/$sapi/php.ini"
            ini_scan_dir="/etc/php/$pv/$sapi/conf.d"
    esac
    if [ "$sapi" = 'apache2' ]; then
        q2 sysinf_php_apache2_vals $pv $1
        if [ -n "${X[php$pv]}" ]; then
            q1 ${X[env]} PHP_INI_SCAN_DIR=$ini_scan_dir LC_MESSAGES=C ${X[php$pv]##* } \
            -c "$ext_file" \
            -d "error_reporting='~E_ALL'" \
            -v 2>$err
        else
            echo "no php$pv binary installed" >$err
        fi
    elif [ "$sapi" = 'fpm' ]; then
        ${X[env]} PHP_INI_SCAN_DIR=$ini_scan_dir LC_MESSAGES=C ${X[php-fpm$pv]##* } \
        -c "$ext_file" \
        -d "error_reporting='~E_ALL'" \
        -i 2>$err | ${X[grep]} -E '^[^A-Z].*=>.*=>' | ${X[sort]} | \
        ${X[php$pv]} -r '
            $lines = file("php://stdin", FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
            foreach ($lines as $line) {
                list($directive, $local, $master) = array_map("trim", explode("=>", $line));
                $value = $local === "On" ? 1 : ($local === "Off" ? 0 : ($local === "no value" ? "" : $local));
                echo "$directive=$value\n";
            }
        '
    else
        ${X[env]} PHP_INI_SCAN_DIR=$ini_scan_dir LC_MESSAGES=C ${X[php$pv]##* } \
        -c "$ext_file" \
        -d "error_reporting='~E_ALL'" \
        -r 'foreach(ini_get_all('$section') as $k => $v) if (strlen($v["local_value"])) echo "$k=".$v["local_value"]."\n";' 2>$err
    fi
    cleanup "${garbage[@]}"
}

# outputs directives that differ from default value
sysinf_php_ini_local(){
    local pv sapi err line key
    local -a locals defaults
    unset default_map local_map
    local -A default_map local_map
    pv="$1" sapi="$2" err="$3"

    # collect all default values
#    mapfile -t defaults < <(sysinf_php_default_vals $pv $sapi)
    mapfile -t defaults < <(sysinf_php_directive_vals_ default "$pv" "$sapi")
    for line in "${defaults[@]}"; do default_map["${line%%=*}"]="${line#*=}"; done

    # collect local values
#    mapfile -t locals < <(sysinf_php_local_vals $pv $sapi err=$err)
    mapfile -t locals < <(sysinf_php_directive_vals_ local "$pv" "$sapi" "err=$err")
    for line in "${locals[@]}"; do local_map["${line%%=*}"]="${line#*=}"; done

    # output directives that differ from default value
    for key in "${!local_map[@]}"; do
        [[ "${local_map[$key]}" != "${default_map[$key]}" ]] && echo "$key=${local_map[$key]} (${default_map[$key]})"
    done
}

sysinf_php_collect_config(){
    local err pv sapi ini_file ini_scan_dir wrong_extensions config
    local -a locals defaults
    err="$1"
    for pv in $(${X[phpquery]} -V | ${X[sort]}); do
        for sapi in ${!SAPI[@]}; do
            ini_file="/etc/php/$pv/$sapi/php.ini"
            if  [[ -f "$ini_file" || -L "$ini_file" ]]; then
                if [[ "$sapi" == 'apache2' && -n "${X[apache2]}" ]] || [[ "$sapi" == 'fpm' && -n "${X[php-fpm$pv]}" ]] || [[ "$sapi" == 'cli' && -n "${X[php$pv]}" ]]; then
                    wrong_extensions="$(output=$(sysinf_php_detect_wrong_extensions "$pv" "$sapi"); [[ -n "$output" ]] && printf "%s\n" "$output" || echo "";)"
                    config="$(output=$(sysinf_php_ini_local $pv $sapi $err | ${X[sort]}); [[ -n "$output" ]] && printf "%s\n" "$output" || echo "";)"
                    if [ -s "$err" ]; then
                        SYSINF+=("title ${SAPI[$sapi]/@VER@/$pv} ERROR:")
                        SYSINF+=("true $(${X[cat]} $err)")
                    fi
                    if [[ -n "$wrong_extensions" ]]; then
                        SYSINF+=("title ${SAPI[$sapi]/@VER@/$pv} WRONG EXTENSIONS: (rudimentary tested)")
                        SYSINF+=("true $(echo "$wrong_extensions")")
                    fi
                    if [[ -n "$config" ]]; then
                        SYSINF+=("title ${SAPI[$sapi]/@VER@/$pv} CONFIG (only values ​​that differ from the defaults):")
                        SYSINF+=("true $(echo "$config")")
                    fi
                fi
            fi
        done
    done
}

sysinf_php(){
    local pv packages
    local -A bool
    while (( $# )); do
        [[ $1 ]] && bool[$1]=:
        shift
    done
    ${bool[php]:-_} && {
        ${bool[spinner]} && {
            kill_spinner
            spinner Yi " . determine system informations - php ." &
        }
        [ -f "${F[php]:="${D[vt]}/php"}" ] && . "${F[php]}"
        # php-version
        ${bool[ff]:-_} || {
            if [ -n "${X[php]}" ]; then
                SYSINF+=("echo php-version: php$(php_ver)")
            else
                SYSINF+=("echo php-version: no php binary detected")
            fi
        }

        # php candidates
        if [ -n "${X[apt-cache]}" ]; then
            SYSINF+=("echo php-candidates: $(${X[apt-cache]} search "^php${PHP[vregex]}$" | ${X[gawk]} '{print substr($1,4,3)}' | ${X[sort]} -u | ${X[paste]} -sd ' ')")
        fi

        # alternatives selections
        if [ -n "${X[update-alternatives]}" ]; then
            SYSINF+=("title list_alternatives:")
            SYSINF+=("true $(list_alternatives)")
            SYSINF+=("title list_alternatives_extended:")
            SYSINF+=("true $(list_alternatives_extended)")
        fi

        # pkgs by dpkg
        packages="$(${X[dpkg]} -l | ${X[gawk]} '/^[hiu]i\s+[^\s]*php/{print $2}' | ${X[grep]} -Ev "php${PHP[vregex]}" | ${X[sort]} | ${X[gawk]} '{printf (NR==1?"":" ") $0}')"
        SYSINF+=("title PHP packages:")
        SYSINF+=("true $packages")
        for pv in $(${X[phpquery]} -V | ${X[sort]}); do
            packages="$(${X[dpkg]} -l | ${X[gawk]} '/^[hiu]i\s+[^\s]*php'$pv'/{print $2}' | ${X[sort]} | ${X[gawk]} '{printf (NR==1?"":" ") $0}')"
            SYSINF+=("title PHP$pv packages:")
            SYSINF+=("true $packages")
        done
#        q0 sysinf_php_collect_pkgs_by_dpkg

        # pecl
        SYSINF+=("pecl list")

        local errorlog=$(tf)
        q0 sysinf_php_collect_config $errorlog
        cleanup $errorlog
        unset errorlog

        for pv in $(${X[phpquery]} -V | ${X[sort]}); do
            SYSINF+=("php-fpm$pv -t")
        done

        local -a fpmpools
        # mapfile -t fpmpools< <(fpm_ps_info brief)
        mapfile -t fpmpools< <(fpm_pools)
        if (( ${#fpmpools[@]} )); then
            SYSINF+=("title PHP-FPM pools:")
            SYSINF+=("true $(fpm_pools)")
        else
            SYSINF+=("echo PHP-FPM pools: none")
        fi

        local -a fpmsockets
        mapfile -t fpmsockets< <(fpm_sockets | ${X[sort]})
        if (( ${#fpmsockets[@]} )); then
            SYSINF+=("title PHP-FPM sockets:")
            SYSINF+=("true $(fpm_sockets | ${X[sort]})")
        else
            SYSINF+=("echo PHP-FPM sockets: none")
        fi

        . <(require php-updater/linstalled)
        SYSINF+=("title installed PHP sapi:")
        # SYSINF+=("true $(${X[ansifilter]} <<< "$(list_installed_sapi quiet)")")
        SYSINF+=("true $(list_installed_sapi quiet)")
    }
}

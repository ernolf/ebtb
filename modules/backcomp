__minified_bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

binaries_is_func_ _ || _(){ false; }
${BACKCOMP_BASHLIB:-_} && return
BACKCOMP_BASHLIB=:

# for backwards compatibility:
if q0 declare -p deps && ! q0 declare -p dependencies; then
    declare -a dependencies=("${deps[@]}")
fi

binaries_is_func_ q0 || q0(){ "$@" &>/dev/null; }
binaries_is_func_ q1 || q1(){ "$@" >/dev/null; }
binaries_is_func_ q2 || q2(){ "$@" 2>/dev/null; }
binaries_is_func_ fn_ln || fn_ln(){
    local ln fn f t
    read -r ln fn f <<< "$(caller ${1:-0})"
    t="$(${C[rp]} $f)"
    [[ $t = $MP ]] && f="${M[n]}" t="${M[n]}"
    [[ $fn = main ]] && fn='' || fn="$fn():"
    if [[ $t =~ /fd/ ]]; then
        echo -n "$fn$ln:"
    elif [ "$t" = "$f" ]; then
        echo -n "$f:$fn$ln:"
    else
        echo -n "$f->$t:$fn$ln:"
    fi
}
binaries_is_func_ trace || trace(){
    local f t
    local -i i d
    # build a single-line trace: f1 -> f2 -> â€¦
    d=$(( ${#FUNCNAME[@]} - $(( 1 + ${2:-0} )) ))
    t=''
    for (( i=d; i>${1:-0}; i-- )); do
        f=$(fn_ln $i)
        (( i == d )) && t="$f" || t+="->$f"
    done
    printf '%s' "$t"
}

[ "$(q2 declare -p TD)" = 'declare -n TD="TMPDIR"' ] || declare -n TD=TMPDIR

for x in jq xmlstarlet ansifilter; do
    (q0 command -v $x && [[ ! "${X[$x]}" =~ /$x ]]) && X[$x]="${X[env]} LC_MESSAGES=C $(command -v $x)" &>$NUL
done

# Migrate legacy variables into new variable names

: "${ME:=$me}"
: "${MS:=$sin}"
: "${MP:=${ca_me:-$canonical_me}}"
: "${MD:=${ca_dir:-$canonical_dir}}"
: "${NUL:=/dev/null}"
: "${TTY:=/dev/tty}"
: "${M[b]:=${bm:-$basename_me}}"
: "${M[ap]:=$apm}"
: "${M[n]:=$scriptname}"
: "${M[e]:=${M[epoch]:-${epoch:-1741041000}}}"
: "${M[v]:=$version}"
: "${M[p]:=ebtb}"
: "${M[pid]:=$$}"
: "${D[l]:=${D[lu]:=/run/lock/user}/${I[u]}}"
: "${D[li]:=${lincld:-$includedir}}"
: "${D[ri]:=$rincld}"
: "${D[tu]=${D[t]:=${TD%/user*}}/user}"
: "${D[tp]:=${D[t]}/${M[p]}}"
: "${D[log]:=${D[tp]}/log}"
: "${D[shm]:=/dev/shm/${M[p]}}"
: "${D[vt]:=/var/tmp/${M[p]}}"
: "${F[log]:=${D[log]}/${M[b]}[uid:${I[u]}].log}"
: "${F[fp]:=${D[vt]}/fp}"
: "${F[lmj]:=$lmj}"
: "${F[rmj]:=$rmj}"
: "${F[lmjn]:=$lmjn}"
: "${J[e]:=${J[epoch]:-${my_epoch:-}}}"
: "${J[o]:=${J[json]:-${my_json:-}}}"
: "${V[cargs]:=$cargs}"
: "${V[upinf]:=${upinf:-${updateinfo:-}}}"
: "${V[w]:=drwxrwxrwt}"
: "${CMA:=$ME json=${J[o]} $@}"
: "${T[rte]:=${rte:-}}"
: "${T[mje]:=${mje:-}}"
: "${T[mjne]:=${mjne:-}}"

# removed function for backwards compatibility:
populate_pkgs_by_dpkg_array(){ :; }

if (( M[e] <= 1741041000 )); then
    echo -e "\n\n\e[31m - The current script version is to old for the integrated updater.\n   The integrated updater no longer works here because necessary\n   but meanwhile deprecated modules are no longer available.\n\n   Please run\n\n\e[37m     sudo\e[36m wget -O $ca_me https://global-social.net/script/$bm\n\n\e[31m   and start the script again if an update is not offered or fails.\e[0m\n\n" > /dev/tty
    exit 1
fi

binaries_is_func_ mkld || mkld(){
    [ -d "${D[l]:=/run/lock/${I[u]}/${M[p]}}" ] || ${X[mkdir]} -p "${D[l]}"
    [ -d "${D[l]}" ] || { D[l]=$TD/${M[p]}/lock; ${X[mkdir]} -p "${D[l]}"; }
}

binaries_is_func_ c || c(){
    mkld
    (   ${X[flock]} -x 200
        ${X[curl]} --compressed "${@//NULL/\/dev\/null}"
    ) 200>"${D[l]}/curl"
}

if (( M[e] < 1742900000 )); then
    PHP_VERSION="${PHP[v]}"
fi

binaries_is_func_ lrequire || lrequire(){ req $@;}

[[ "${M[n]}" =~ php ]] && . <(req di) || di(){ :;}

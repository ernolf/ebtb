__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${FILTER_BASHLIB:-_} && return
FILTER_BASHLIB=:

. <(lrequire binaries)

ansi_filter() {
    local sedscript
    sedscript='s/\x1B\[[0-9;?]*[a-zA-Z]//g'
    if [[ -t 0 ]]; then # if no STDIN;
        ${X[sed]} -E "$sedscript" <<< "$@"
    else
        ${X[cat]} | ${X[sed]} -E "$sedscript"
    fi
}
: ${X[ansifilter]:=ansi_filter} &>$NUL

utf_filter(){
    local perlscript
    perlscript='
        # Convert \uXXXX notation to the corresponding Unicode character
        s/\\u([0-9A-Fa-f]{4})/chr(hex($1))/ge;

        # Remove various invisible Unicode characters
        s/\x{00A0}//g;        # Non-breaking Space (NBSP)
        s/\x{2000}//g;        # En Quad (EN QUAD)
        s/\x{2001}//g;        # Em Quad (EM QUAD)
        s/\x{2002}//g;        # En Space (EN SPACE)
        s/\x{2003}//g;        # Em Space (EM SPACE)
        s/\x{2004}//g;        # Three-Per-Em Space (3/4 EM SPACE)
        s/\x{2005}//g;        # Four-Per-Em Space (4/4 EM SPACE)
        s/\x{2006}//g;        # Six-Per-Em Space (6/4 EM SPACE)
        s/\x{2007}//g;        # Figure Space (F SP)
        s/\x{2008}//g;        # Punctuation Space (PU SP)
        s/\x{2009}//g;        # Thin Space (TH SP)
        s/\x{200A}//g;        # Hair Space (H SP)
        s/\x{200B}//g;        # Zero Width Space (ZWSP)
        s/\x{200C}//g;        # Zero Width Non-Joiner (ZWNJ)
        s/\x{200D}//g;        # Zero Width Joiner (ZWJ)
        s/\x{200E}//g;        # Left-To-Right Mark (LRM)
        s/\x{200F}//g;        # Right-To-Left Mark (RLM)
        s/\x{2028}//g;        # Line Separator (L SEP)
        s/\x{2029}//g;        # Paragraph Separator (P SEP)
        s/\x{202A}//g;        # Left-To-Right Enbedding (LRE)
        s/\x{202B}//g;        # Right-To-Left Enbedding (RLE)
        s/\x{202C}//g;        # Pop Directional Formatting (PDF)
        s/\x{202D}//g;        # Left-To-Right Override (LRO)
        s/\x{202E}//g;        # Right-To-Left Override (RLO)
        s/\x{202F}//g;        # Narrow No-Break Space (NNB SP)
        s/\x{205F}//g;        # Medium Mathematical Space (M  SP)
        s/\x{2060}//g;        # Word Joiner (WJ)

        # Replace special Unicode characters
        s/\x{2026}/.../g;     # Horizontal Ellipsis ‚Ä¶ to ...
        s/\x{2605}/*/g;       # Unicode ‚òÖ to *
        s/\x{2606}/*/g;       # Unicode ‚òÜ to *
        s/\x{26A0}/!/g;       # Unicode ‚ö†Ô∏è to !
        s/\x{272A}/*/g;       # Unicode ‚ú™ to *
        s/\x{2730}/*/g;       # Unicode ‚ú∞ to *
        s/\x{2736}/*/g;       # Unicode ‚ú∂ to *
        s/\x{FE0E}//g;        # Variation Selector-15 (text)
        s/\x{FE0F}//g;        # Variation Selector-16 (emoji)
        s/\x{FFFC}//g;        # Object Replacement Character
        s/\x{FFFD}//g;        # Replacement Character
        s/\x{1F44D}/[+1]/g;   # Thumb up (Unicode üëç) to [+1]
        s/\x{1F64F}/[pray]/g; # Folded hands (Unicode üôè) to [pray]
    '
    if [[ -t 0 ]]; then # if no STDIN;
        ${X[perl]} -CSD -pe "$perlscript" <<< "$@"
    else
        ${X[cat]} | ${X[perl]} -CSD -pe "$perlscript"
    fi
}

filter_(){
    if [[ -t 0 ]]; then # no STDIN;
         ${X[ansifilter]} <<< "$@"
    else
         ${X[cat]} | ${X[ansifilter]}
    fi | utf_filter
}

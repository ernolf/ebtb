__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${EBTB_BASHLIB:-_} && return
EBTB_BASHLIB=:

: ${D[ulb]:=/usr/local/bin}
: ${D[vts]:=${D[vt]}/scripts}

declare -a EBTB_SCRIPTS
declare -A EBTB_SCRIPTS_DESCR
EBTB_SCRIPTS=(php-updater nc-who nc-sql nc-occ nc-apps nc-shares nc-integrity-fix nc-mimecheck nc-subscribed-calendar)
EBTB_SCRIPTS_DESCR=(
    [php-updater]="update PHP on your ubuntu/debian based server and switch back and forth between versions without much hassle"
    [nc-who]="follow live on the command line who is logged in on your nextcloud server, with a “GOD MODE” to selectively unvalidate cookies"
    [nc-sql]="commandline client for the nextcloud MySQL/MariaDB or PostgreSQL database"
    [nc-occ]="interactively create and execute OCC commands with favorites for your most used occ commands"
    [nc-apps]="(not only) an appstore browser/client for the commandline"
    [nc-shares]="list shares with lots of information and selection options"
    [nc-integrity-fix]="resolve “Some files have not passed the integrity check” warnings"
    [nc-mimecheck]="check for files without or with wrong file extension. For use with “Flow external script”"
    [nc-subscribed-calendar]="gives you the means to set an individual refreshrate per subscribed calendar"
)

ebtb_install_script(){
    local scriptname
    scriptname="$1"
    [ "${M[c]}" = "test" ] && scriptname="${scriptname%-test}-test"
    echo "Installing $scriptname.."
    mh "$(fn_ln 1) installing $scriptname"
    script="${D[vts]}/$scriptname"
#    c -o "$MD/$script" -A "$(fp)ebtb $script" ${V[cargs]}/scripts/$scriptname
    c -o "$script" -A "$A" ${V[cargs]}/scripts/$scriptname
    ${X[chmod]} +x "$script"
    link="${D[ulb]}/$scriptname"
    ${X[ln]} -sfT "$script" "$link"
    $scriptname
}

ebtb_launch_script() {
    local scriptname req
    local -a require_args
    scriptname="$1"
    [ "${M[c]}" = "test" ] && scriptname="${scriptname%-test}-test"
    # scripts that absolutely require arguments
    require_args=(nc-apps nc-mimecheck nc-shares)
    # if the script exists and is executable, run it
    if q0 command -v $scriptname; then
        echo "$scriptname is already installed. Launching..."
    else
        # otherwise, install it
        ebtb_install_script $scriptname
        echo "Installation complete. Launching $scriptname…"
    fi
    # if script needs args, refuse to launch via wrapper
    for req in "${require_args[@]}"; do
        if [[ ${scriptname%-test} == $req ]]; then
            f
            echo "$(Pbg) Script '$scriptname' requires arguments to run correctly. $(N)"
            f
            format_string "Please invoke $(C)$scriptname$(N) directly with its required parameters (or -h for help), not through this wrapper." 0
            f
            return
        fi
    done
    separator4 lP
    echo
    $scriptname
}

# TODO 1 -->
# Updated ebtb_launch_script with interactive argument selection for nc-who

#ebtb_launch_script() {
#    local scriptname req
#    local -a require_args
#    scriptname="$1"
#    # apply test suffix if in test mode
#    [ "${M[c]}" = "test" ] && scriptname="${scriptname%-test}-test"

#    # scripts that require arguments
#    require_args=(nc-apps nc-mimecheck nc-shares nc-who)

#    # check if the script is already installed
#    if q0 command -v "$scriptname"; then
#        echo "$scriptname is already installed. Launching..."
#    else
#        # install the script
#        ebtb_install_script "$scriptname"
#        echo "Installation complete. Launching $scriptname..."
#    fi

#    # handle scripts that need argument selection
#    case "${scriptname%-test}" in
#        nc-who)
#            # define available arguments and descriptions
#            declare -A NC_WHO_ARGS=(
#                [--help]="Show help and usage information."
#                [monitor]="Monitor live user logins, ordered by last activity at an adjustable refresh rate."
#                [last]="List all users sorted by their last login time."
#            )
#            # prompt title
#            arg_title="Please choose an argument for '$scriptname':"
#            echo "$arg_title"
#            line - N ${#arg_title}

#            # prepare options for select menu
#            local options=()
#            for key in "${!NC_WHO_ARGS[@]}"; do
#                options+=("$key: ${NC_WHO_ARGS[$key]}")
#            done
#            options+=("Cancel")

#            # force single-column display
#            local old_columns="$COLUMNS"
#            COLUMNS=1

#            local PS3="Selection (number): "
#            select choice in "${options[@]}"; do
#                if [[ "$choice" == "Cancel" ]]; then
#                    echo "Operation cancelled."
#                    COLUMNS="$old_columns"
#                    return
#                fi
#                if [[ -n "$choice" ]]; then
#                    # extract argument key (before colon)
#                    local arg="${choice%%:*}"
#                    echo "Launching '$scriptname' with argument '$arg'..."
#                    # execute the script without exiting the wrapper
#                    $scriptname $arg
#                    # restore columns and return to main menu
#                    COLUMNS="$old_columns"
#                    return
#                else
#                    echo "Invalid selection. Please try again." >&2
#                fi
#            done
#            ;;
#        *)
#            # enforce argument requirement for other scripts in require_args
#            for req in "${require_args[@]}"; do
#                if [[ ${scriptname%-test} == $req ]]; then
#                    f
#                    echo "$(Pbg) Script '$scriptname' requires arguments to run correctly. $(N)"
#                    f
#                    format_string "Please invoke $(C)$scriptname$(N) directly with its required parameters (or -h for help), not through this wrapper." 0
#                    f
#                    return
#                fi
#            done
#            ;;
#    esac

#    # fallback: normal launch for scripts without required args
#    separator4 lP
#    echo
#    $scriptname
#}

# TODO 1 <--
ebtb_is_installed(){
    local s
    s="$1"
    [ "${M[c]}" = "test" ] && s="${s%-test}-test"
    [[ -f ${D[ulb]}/$s && -x ${D[ulb]}/$s ]] || [[ -L ${D[ulb]}/$s && $(${X[realpath]} ${D[ulb]}/$s) == ${D[vts]}/$s && -f ${D[vts]}/$s && -x ${D[vts]}/$s ]]
}

ebtb(){
    ${B[rt]} || return 0
    local installed script key scriptname channel
    local -A bool
    local -i i c1
    [ "$1" = 'launch' ] && bool[launch]=: || bool[launch]=_
    [ "${M[c]}" = 'test' ] && channel='-test' c1=42 || channel='' c1=37
    ${C[ms]} ${D[vts]} # create /var/tmp/ebtb/scripts if not yet exists
    ebtb_list_scripts(){
        installed=''
        for i in ${!EBTB_SCRIPTS[@]}; do
            if ebtb_is_installed ${EBTB_SCRIPTS[i]}$channel; then
                installed+=" $i "
            fi
        done
        for i in ${!EBTB_SCRIPTS[@]}; do
            f
            if [[ "$installed" =~ " $i " ]]; then
                if ${bool[launch]}; then
                    o5; echo "$(Gbg) $((i+1)) $(W) - $(lG)${EBTB_SCRIPTS[i]}$channel$(o $c1; lB; format_string "${EBTB_SCRIPTS_DESCR[${EBTB_SCRIPTS[i]}]}" $c1; N)"
                else
                    o; echo "$(Gbg) installed $(W) $(lG)${EBTB_SCRIPTS[i]}$channel$(o $c1; lB; format_string "${EBTB_SCRIPTS_DESCR[${EBTB_SCRIPTS[i]}]}" $c1; N)"
                fi
            else
                o5; echo "$(box $((i+1)); W) - ${EBTB_SCRIPTS[i]}$channel$(o $c1; W; format_string "${EBTB_SCRIPTS_DESCR[${EBTB_SCRIPTS[i]}]}" $c1)"
            fi
        done
        f
        o5; echo "$(box q) - quit"
    }
# TODO 2 -->
#    1 - nc-who                  follow live who is logged in on your nextcloud, with "GOD MODE" to selectively unvalidate cookies
#    2 - nc-sql                  commandline client for the nextcloud MySQL/MariaDB or PostgreSQL database
#    3 - nc-occ                  interactive frontend to build and execute occ commands
#    4 - nc-apps                 (not only) an appstore browser/client for the commandline
#    5 - nc-shares               list shares with lots of information and selection options
#    6 - nc-integrity-fix        resolve “Some files have not passed the integrity check” warnings
#    7 - nc-mimecheck            check for files without or with wrong file extension. For use with "Flow external script"
#    8 - nc-subscribed-calendar  gives you the means to set an individual refreshrate per subscribed calendar
# TODO 2 <--
    if ${bool[launch]}; then
        separator4 lP
        echo
    else
        echo "Do you already know the ebtb bash scripts for nextcloud admins?"
        f
        echo "Here a selection. Simply select the script you want to test:"
        f
    fi
    while :; do
        ebtb_list_scripts
        f 2
            while :; do read -rsn 1 -p "Please make your choice: " key
            if [ "${key,,}" = q ]; then
                f
                break 2
            elif (( 0 < key && key <= ${#EBTB_SCRIPTS[@]} )) && ( ${bool[launch]} || ! [[ "$installed" =~ " $(( key - 1 )) " ]]); then
                if confirm_choice 2 "$key" "$(Y)You selected the $(C)${EBTB_SCRIPTS[key-1]}$channel$(Y) script. $(Yi)Is this correct?$(N)"; then
                    scriptname=${EBTB_SCRIPTS[key-1]}
                    if ${bool[launch]}; then
                        ebtb_launch_script "$scriptname"
                        return
                    else
                        ebtb_install_script "$scriptname"
                        if [[ -f "$script" && -x "$script" && "$(${X[realpath]} "$link")" == "$script" ]]; then
                            echo "successfuly installed the $(C)$scriptname$(N) script."
                            echo "now simply run:"
                            f
                            echo "$(G; prompt; lB) $scriptname"; N
                            f
                            o3; echo "I hope you enjoy it a lot!"
                            f
                            while :; do
                                qpf; if ask "Install another script" y; then
                                    break 2
                                else
                                    break 3
                                fi
                                sleep 2
                                te0 2
                            done
                        fi
                    fi
                else
                    echo -e "\n\tChoice $(button $key) cancelled\n"
                    sleep 2
                    te0 8
                fi
            else
                echo -n "wrong entry"
                sleep 1
                te1
                cursor_ hide
            fi
        done
    done
    ${X[sleep]} 1
}

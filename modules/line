__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${LINE_BASHLIB:-_} && return
LINE_BASHLIB=:

# TODO 0 -->
. <(lrequire binaries)
. <(lrequire ansi)
# TODO <-- 0
# $1=pattern $2=color $3=(empty spaces/)repetition of pattern((int/)int or 'a' for auto)
# $4 and $5 either a$i or b$i where a is after and b is before
# and $i the amount of empty lines
line(){
    required_args 3 "$@"
    [[ "$-" =~ x ]] && { set +x; local debugx=true; } || local debugx=_
    pl(){
#        printf "%s" "$(eval printf \"\%0.s'$1'\" \{1..$2\})"
        for ((i=0; i<$2; i++)); do printf "$1"; done # no eval required here
    }
    local p c
    local -i e r a b
    p="$1" c="$2" e=0 a=1 b=0
    (( $(${X[expr]} $3 : '.*/.*') )) && e=${3%/*}
    [ "${3#*/}" = 'a' ] && r=$(( ( $(max_cols) - e ) / ${#p} )) || r=${3#*/}
    shift 3
    while (( $# )); do
        case "${1:0:1}" in
          a|b)  (( ${1:1}1 )) && local ${1:0:1}=${1:1}
                shift
                ;;
            *)  shift
        esac
    done
    f $b
    (( e )) && o $e
    pl "$($c)$p$(N)" $r
    f $a
    $debugx && set -x
}

separator(){
    local color
    color="$1"
    kill_spinner && te1 && line ' -' ${color:-GRAY} a
}

separator2(){
    local color
    color="$1"
    kill_spinner && te1 && line ' =' ${color:-GRAY} a
}

separator3(){
    local color
    color="$1"
    kill_spinner && te1 && line - ${color:-GRAY} a
}

separator4(){
    local color
    color="$1"
    kill_spinner && te1 && line = ${color:-GRAY} a
}

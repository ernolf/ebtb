__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${SWITCH_PHP_FPM_NGINX_BASHLIB:-_} && return
SWITCH_PHP_FPM_NGINX_BASHLIB=:

php_fpm_sites_available_conf_nginx(){
    local ver_n pool plu
    local -a pools sock_o canonicalized_sock_o conffiles
    local -A sock_n bool
    ver_n="$1"
    mapfile -t pools< <(fpm_pools)
    if (( ${#pools[@]} == 1 )); then
        bundle echo "$(es3; ipf) This is systemwide the only fpm pool configured:"
        f
        bundle echo "$(es3; pf)${pools[0]}"
    elif (( ${#pools[@]} > 1 )); then
        f
        bundle echo "$(es3; ipf) These are systemwide the configured fpm pools:"
        f
        for pool in "${pools[@]}"; do bundle echo "$(es3; pf)$pool"; done
        f
    fi
    # we can only switch to existing pools with already created sockets for the new version
    pools=($(fpm_socket "$ver_n"))
    if (( ${#pools[@]} == 1 )); then
        bundle echo "$(es3; ipf) This is the only fpm pool configured for the version you selected:"
        f
        bundle echo "$(es3; pf)$ver_n [${pools[0]}]"
    elif (( ${#pools[@]} > 1 )); then
        bundle echo "$(es3; ipf) These are the configured fpm pools for the version you selected:"
        f
        for pool in "${pools[@]}"; do bundle echo "$(es3; pf)$ver_n [$pool]"; done
    fi

    for pool in ${pools[@]}; do

        sock_n[$pool]="$(fpm_socket "$ver_n" "$pool")"
        canonicalized_sock_n[$pool]="$(canonicalize "${sock_n[$pool]}")"

        mapfile -t sock_o< <(iterate_conf_files_ ngx detect_matching_nginx_php_fpm_ sockets "${sock_n[$pool]}" | ${X[sort]} -u)
        mapfile -t canonicalized_sock_o< <(canonicalize_array "${sock_o[@]}")
        mapfile -t conffiles< <(iterate_conf_files_ ngx detect_matching_nginx_php_fpm_ configfiles_regex "${sock_n[$pool]}" | ${X[sort]} -u)
        if (( ${#conffiles[@]} )); then
            f
            bundle echo "$(es3; ipf; format_string "The nginx server is connected to PHP-FPM via a unix-socket." 6; N)"

            if (( ${#conffiles[@]} == 1 )); then
                this='This' be='is' plu=''
            else
                this='These' be='are' plu='s'
            fi

            if (( ${#canonicalized_sock_o[@]} == 1 )); then
                if [ "${canonicalized_sock_o[0]}" = "${canonicalized_sock_n[$pool]}" ]; then
                    f
                    bundle echo "$(es3; pf)this is the socket:"
                    f
                    bundle echo "$(es3; pf; pf; canonicalize_if_ ${sock_o[0]})"
                    f
                    bundle echo "$(es3; pf)nothing to change"
                    continue
                fi

                bundle echo "$(es3; pf)this is the old socket:"
                bundle echo "$(es3; pf; pf; canonicalize_if_ ${sock_o[0]})"
            elif (( ${#canonicalized_sock_o[@]} > 1 )); then
                bundle echo "$(es3; ipf; O; format_string "Multiple socket configurations detected, e.g. to more than one PHP version. If this is intentional, you can just skip ahead and edit only the sockets you want to change." 6; N)"
                bundle echo "$(es3; pf)these are the configurations in detail:"; N

                local -a sock_o_conf_files
                for i in ${!sock_o[@]}; do
                    mapfile -t sock_o_conf_files< <(p_nosort ${sock_o_conf_files[@]}; iterate_conf_files_ ngx detect_matching_nginx_php_fpm_ configfiles "${sock_o[i]}")
                done
                mapfile -t sock_o_conf_files< <(p_sort ${sock_o_conf_files[@]})
                for i in "${!sock_o_conf_files[@]}"; do
                    f
                    bundle echo "$(detect_nginx_php_fpm all verbose "${sock_o_conf_files[i]}")"
                done
                unset sock_o_conf_files
                f
                anykey
            fi
            bundle echo "$(es3; pf)this is the new socket:"
            bundle echo "$(es3; pf; pf; canonicalize_if_ ${sock_n[$pool]})"
            f
            bundle echo "$(pf)$this $be the file$plu containing the PHP-FPM socket configuration:"
            for i in ${!conffiles[@]}; do
                f
                bundle echo "$(detect_nginx_php_fpm all verbose "${conffiles[i]}")"
            done

            local line conf sock question xtemp=$(tf)
            bool[changed]=_
            for i in ${!conffiles[@]}; do
                bool[do_change]=_
                conf="$(${X[realpath]} "$(detect_nginx_php_fpm fileonly quiet "${conffiles[i]}")")"
                echo "${X[sed]} -E --in-place=.backup '" > "$xtemp"
                for sock in ${sock_o[@]}; do
                    line="$(detect_nginx_php_fpm lineonly quiet "${conffiles[i]}" "$sock")"
                    [ -n "$line" ] || continue
                    [[ "${line##*:}" != "${sock_n[$pool]}" ]] || continue
                    question="$(qpf; format_string "Do you want to replace \"$(Y)${line##*:}$(N)\" with \"$(Yi)${sock_n[$pool]}$(N)\" in line $(GRAYbg)\"${line%%:*}\"$(N) of $(C)$conf$(N)" 3)"
                    separator
                    if ask "$question" "$YES"; then
                        echo "${line%%:*}s#${line##*:}#${sock_n[$pool]}#" >> "$xtemp"
                        bool[do_change]=:
                    fi
                done
                echo "' $conf" >> "$xtemp"
                if ${bool[do_change]}; then
                    f
                    bundle echo "$(pf; format_string "If you continue here, the changes will be written to file." 3)"
                    f
                    anykey
                    haul cat "$xtemp"
                    . $xtemp
                    bool[changed]=:
                    bundle echo "$(es3; Pbg) IMPORTANT: $(P; es; format_string "A backup-file $(C)$conf.backup$(P) was created with the previous state. Don't forget to remove that file if everything runs fine." 16; N)"
                else
                    f
                    bundle echo "$(es4; P)Nothing selected to change in $(C)$conf."; N
                    f
                fi
            done
            ${bool[changed]} && ${X[systemctl]} restart nginx php$ver_n-fpm
            rm -f "$xtemp"
            unset line conf sock question xtemp
            f
        else
            no_conf_in_pool
        fi
    done
}

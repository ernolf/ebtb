__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${TASKS_DEPENDENCY_PKGS_BASHLIB:-false} && return
TASKS_DEPENDENCY_PKGS_BASHLIB=:

remove_dependency_packages(){
    spinner C " . searching misconfigurations: dependency-packages ." &
    populate_dependency_pkgs_array
    mapfile -t DEPENDENCY_PKGS< <(comm -12 <(p_sort_trim ${DEPENDENCY_PKGS[@]}) <(p_sort_trim ${PKGS_BY_DPKG[@]%%/*}))
    if (( ${#DEPENDENCY_PKGS[@]} )); then
        if ((${#DEPENDENCY_PKGS[@]}==1)); then
            plu='is:' be='is a' modstring="$(B)${DEPENDENCY_PKGS[0]}$(N)"
        else
            plu='ese:s' be='are' modstring="$(listify B ${DEPENDENCY_PKGS[@]})"
        fi
        question="Q:$(format_string "Do you want to remove the dependency package${plu#*:} $modstring now" 3)"
        kill_spinner
        bundle echo "$(xpf;format_string "There $be unnecessary $(O)dependency package${plu#*:}$(N) ($modstring) installed on this machine." 3;N)"
        echo "$(ipf;Y;format_string "Dependency packages have no other function than to install other packages with the final binaries. For example, php-apcu depends on the newest binary package, like php8.4-apcu. The downside is that this can lead to an unwanted update to a new version of that package, which can result in difficult-to-debug issues, such as internal server errors. It is strongly recommended to remove th${plu%:*} package${plu#*:} before updating, as the removal will make your system more resilient against unintended changes made without your decision." 3;N)"
        echo " -$(format_string "This script can remove th${plu%:*} package${plu#*:} in a safe way." 3)"
        if ask "$question" "$YES"; then
            apt_remove --yes ${DEPENDENCY_PKGS[@]}
            populate_pkgs_by_dpkg_array
            "$me${FLAG[forceflag]}" "json=$my_json" --list-installed-only
            anykey
            return 0
        else
            return 1
        fi
    else
        kill_spinner
        return 1
    fi
}

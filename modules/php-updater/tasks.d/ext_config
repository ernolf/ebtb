__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${TASKS_EXT_CONFIG_BASHLIB:-false} && return
TASKS_EXT_CONFIG_BASHLIB=:

ini_directive_detect(){
    local ver ini_directive result
    ver="$1" ini_directive="$2"
    find "/etc/php/$ver" -name "*.ini" ! -type l | while read -r file; do
        if result="$(stripconf "$file" | grep "$ini_directive")"; then
            echo "$file:$result"
        fi
    done
}

ext_config_fix(){
    local ver ext ext_ini xtmp itmp must_be_fixed_message should_be_fixed_message good_to_be_fixed_message pattern sapi php_ini line plu be ini_string ini_string_ php_ini_dpkg key val basic_infostring infostring oldstring optionblock optionblock_r optionblock_sorted optionblock_rsorted
    local -a lines inifiles inifiles1_ inifiles2_ php_inis
    local -i i
    ver="$1" ext="$2"
    ext_ini="/etc/php/$ver/mods-available/$ext.ini"
    [ -f "$ext_ini" ] || return
    xtmp=$(tf) itmp=$(tf)
    if [ "$OLD" = "$ver" ] && [[ "$NEW" ]]; then
        must_be_fixed_message="This errors must be fixed before this script can migrate the settings from $(C)php-$OLD$(P) to $(C)php-$NEW$(P). You can answer $(box no) here but then the script will not continue, since it would multiply errors and various strange behaviour could arrise."
        should_be_fixed_message="This should be fixed before this script migrates the settings from $(C)php-$OLD$(P) to $(C)php-$NEW$(P). You can answer $(box no) here to leave it unchanged but then it will be migrated as well."
        good_to_be_fixed_message="This is not an error but about a possible optimization that is missing which you can add, before updating from $(C)php-$OLD$(P) to $(C)php-$NEW$(P). You can answer $(box no) here to leave it unchanged but then it will miss in the new version as well."
    else
        must_be_fixed_message="This errors must be fixed before this script can migrate the settings from $(C)php$ver$(P) to an other php version. You can answer $(box no) here but then the script cannot upgrade from this version, since it would multiply errors and various strange behaviour could arrise."
        should_be_fixed_message="This should be fixed in the configuration of $(C)php$ver$(P)."
        good_to_be_fixed_message="This is not an error but about a possible optimization that is missing in the configuration of $(C)php$ver$(P) which you can add."
    fi
    # get rid of double extension loaders
    pattern="^\s*(zend_)?extension\s*=\s*$ext.*$"
    for sapi in $(phpquery -v $ver -S); do
        if [ -f "/etc/php/$ver/$sapi/php.ini" ]; then
            php_inis+=("/etc/php/$ver/$sapi/php.ini")
        fi
    done
    mapfile -t inifiles< <(grep -Eslix "$pattern" ${php_inis[@]})
    if (( ${#inifiles[@]} )); then
        line=$(grep -Eix "$pattern" ${inifiles[0]})
        if (( ${#inifiles[@]} == 1 )); then
            plu='' be=is ini_string_="$(C)${inifiles[0]}$(O)" ini_string="$(C)${inifiles[0]}$(W)"
        else
            plu='es' be=are ini_string_="$(listify_ C O ${inifiles[@]})" ini_string="$(listify_ C W ${inifiles[@]})"
        fi
        echo -e "\n   - $(O)Malicious configuration line in $ini_string_:" >> $itmp
        infostring="This extension (module) is already loaded in $(C)$ext_ini$(W) and does therefore not belong in $(C)$ini_string$(W) so this line will be removed from  $(C)$ini_string$(W)."
        echo -e "\n$(R)$line$(N)" >> $itmp
        C;echo "info$(N):$(W;format_string "$infostring" 6;N)" >> $itmp
        for i in ${!inifiles[@]}; do
            line=$(grep -Eix "$pattern" ${inifiles[i]})
            echo "sed -i '/^$line$/d' '${inifiles[i]}'" >> $xtmp
        done
        if (( $(wc -c "$xtmp"|awk '{print$1}') )); then
            kill_spinner
            separator
            bundle cat "$itmp"
            f
            if ask "$(qpf)Do you want to apply this fix$plu" "$YES";then
                . $xtmp
                if grep -Eqslix "$pattern" ${php_inis[@]}; then
                    bundle echo "R: $(R)removal from ${inifiles[@]} failed.$(N)"
                else
                    bundle echo "R: $(lG)removal from ${inifiles[@]} was successfull.$(N)"
                fi
            else
                bundle echo "R: $(R)you answered $(box no), nothing changed.$(N)"
            fi
            anykey
            spinner C " . ext_config_fix() searching known configuration errors in php$ver ." &
        fi
    fi
    case $ext in
        redis)
            local -a sessionsavehandler
            mapfile -t sessionsavehandler< <(ini_directive_detect "$ver" "session.save_handler")
            if (( ${#sessionsavehandler[@]} )); then
                for i in ${!sessionsavehandler[@]}; do
                    if [[ "$(key_ val ${sessionsavehandler[i]##*:})" == "redis" &&
                          "${sessionsavehandler[i]%%:*}" == "/etc/php/$ver/mods-available/redis.ini" ]]; then

                    echo -n > $xtmp; echo -n > $itmp
                    basic_infostring="The redis module is installed on this server and if you want to use redis for session management, these directives should be added. The best place for this directives is $(C)$ext_ini$(W)"
                    optionblock="redis.session.locking_enabled=1\nredis.session.lock_wait_time=10000\nredis.session.lock_retries=-1"
                    optionblock_r="redis.session.lock_retries=-1\nredis.session.lock_wait_time=10000\nredis.session.locking_enabled=1"
                    optionblock_sorted="redis.session.locking_enabled=1\nredis.session.lock_retries=-1\nredis.session.lock_wait_time=10000"
                    optionblock_rsorted="redis.session.lock_wait_time=10000\nredis.session.lock_retries=-1\nredis.session.locking_enabled=1"
                    pattern='redis\.session\.lock'
                    if ! p_sort "$(stripconf "$ext_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock" &&
                       ! p_sort "$(stripconf "$ext_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock_r" &&
                       ! p_sort "$(stripconf "$ext_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock_sorted" &&
                       ! p_sort "$(stripconf "$ext_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock_rsorted"; then
                        for sapi in $(phpquery -v $ver -S); do
                            php_ini="/etc/php/$ver/$sapi/php.ini"
                            if [ -f "$php_ini" ]; then
                                if p_sort "$(stripconf "$php_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock" ||
                                   p_sort "$(stripconf "$php_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock_r" ||
                                   p_sort "$(stripconf "$php_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock_sorted" ||
                                   p_sort "$(stripconf "$php_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock_rsorted"; then
                                    inifiles1_+=("$php_ini")
                                else
                                    inifiles2_+=("$php_ini")
                                fi
                            fi
                        done
                        if (( ${#inifiles1_[@]} == 0 )); then
                            echo -e "\n -$(P;format_string "$good_to_be_fixed_message" 3;N)" > $itmp
                            echo -e "\n   - $(O)Missing directives for redis session management feature in php$ver configuration:" >> $itmp
                            infostring="$basic_infostring."
                            echo -e "\n$(R)$optionblock$(N)" >> $itmp
                            C;echo "info$(N):$(W;format_string "$infostring" 6;N)" >> $itmp
                            echo "echo -e '$optionblock' >> $ext_ini" >> $xtmp
                        elif (( ${#inifiles2_[@]} )); then
                            if (( ${#inifiles1_[@]} == 1 )); then
                                ini_string="$(C)${inifiles1_[0]}$(W)"
                            else
                                ini_string="$(listify_ C W ${inifiles1_[@]})"
                            fi
                            echo -e "\n -$(P;format_string "$good_to_be_fixed_message" 3;N)" > $itmp
                            echo -e "\n   - $(O)(Partially) missing directives for redis session management feature:" >> $itmp
                            infostring="$basic_infostring but it is only located in $ini_string. So this lines will be removed from there and appended to $(C)$ext_ini$(W) to make it available to all SAPIs."
                            echo -e "\n$(R)$optionblock$(N)" >> $itmp
                            C;echo "info$(N):$(W;format_string "$infostring" 6;N)" >> $itmp
                            for i in ${!inifiles1_[@]}; do
                                echo "sed -i '/$pattern/d' '${inifiles1_[i]}'" >> $xtmp
                            done
                            echo "echo -e '$optionblock' >> $ext_ini" >> $xtmp
                        fi
                    fi
                    if (( $(wc -c "$xtmp"|awk '{print$1}') )); then
                        kill_spinner
                        separator
                        bundle cat "$itmp"
                        f
                        if ask "$(qpf)Do you want to apply this directives as suggested" "$YES";then
                            . $xtmp
                            if p_sort "$(stripconf "$ext_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock" ||
                               p_sort "$(stripconf "$ext_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock_r" ||
                               p_sort "$(stripconf "$ext_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock_sorted" ||
                               p_sort "$(stripconf "$ext_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock_rsorted"; then
                                bundle echo "R: $(lG)Directives successfully written in $ext_ini.$(N)"
                                for i in ${!inifiles1_[@]}; do
                                    if p_sort "$(stripconf "${inifiles1_[i]}"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock"; then
                                        bundle echo "R: $(R)removal from ${inifiles1_[i]} failed.$(N)"
                                    else
                                        bundle echo "R: $(lG)removal from ${inifiles1_[i]} was successfull.$(N)"
                                    fi
                                done
                            else
                                bundle echo "R: $(R)this step failed.$(N)"
                            fi
                        else
                            bundle echo "R: $(R)you answered $(box no), nothing changed.$(N)"
                        fi
                        anykey
                    fi

                    break
                    fi
                done
            fi
            ;;
        apcu)
            echo -n > $xtmp; echo -n > $itmp
            echo -e "\n -$(P;format_string "$should_be_fixed_message" 3;N)" > $itmp
            pattern='^\s*apc.enable_cli\s*=\s*(on|1)\s*$' php_inis=()
            for sapi in $(phpquery -v $ver -S); do
                if [[ "$sapi" != 'cli' && -f "/etc/php/$ver/$sapi/php.ini" ]]; then
                    php_inis+=("/etc/php/$ver/$sapi/php.ini")
                fi
            done
            [ -f "${php_inis[0]}" ] || return
            mapfile -t inifiles1_< <(grep -Eslix "$pattern" ${php_inis[@]})
            if (( ${#inifiles1_[@]} )); then
                line=$(grep -Eix "$pattern" ${inifiles1_[0]})
                if (( ${#inifiles1_[@]} == 1 )); then
                    plu='' be=is ini_string_="$(C)${inifiles1_[0]}$(O)" ini_string="$(C)${inifiles1_[0]}$(W)"
                else
                    plu='s' be=are ini_string_="$(listify_ C O ${inifiles1_[@]})" ini_string="$(listify_ C W ${inifiles1_[@]})"
                fi
                echo -e "\n   - $(O)Malicious configuration line in $ini_string_:" >> $itmp
                if (( $(grep -Exi "$pattern" "$ext_ini" "/etc/php/$ver/cli/php.ini"|wc -l) == 0 )); then
                    infostring="This directive has absolutely no effect in $ini_string. It is meant to enable the APCu (Alternative PHP user Cache) for the CLI version of PHP (which is used on the commandline and for cron jobs). For all other SAPIs the APCu is enabled by default. Although it cannot cause any damage at this location$plu, this file$plu $be not sourced by the CLI version of PHP and in $(C)$ext_ini$(W) or $(C)/etc/php/$ver/cli/php.ini$(W) from where the CLI SAPI obtains its directives, this directive is missing. So this line will be removed from here and inserted into $(C)/etc/php/$ver/cli/php.ini$(W)."
                    echo -e "\n$(R)$line$(N)" >> $itmp
                    C;echo "info$(N):$(W;format_string "$infostring" 6;N)" >> $itmp
                    for i in ${!inifiles1_[@]}; do
                        line=$(grep -Eix "$pattern" ${inifiles1_[i]})
                        echo "sed -i '/^$line$/d' '${inifiles1_[i]}'" >> $xtmp
                    done
                    echo "echo 'apc.enable_cli=1' >> /etc/php/$ver/cli/php.ini" >> $xtmp
                fi
            fi
            uniq_lines "$xtmp"
            if (( $(wc -c "$xtmp"|awk '{print$1}') )); then
                kill_spinner
                separator
                bundle cat "$itmp"
                f
                if ask "$(qpf)Do you want to apply this fixes" "$YES";then
                    haul cat "$xtmp"
                    . $xtmp
                    if grep -Eqsiw "$pattern" /etc/php/$ver/cli/php.ini; then
                        bundle echo "R: $(lG)Directive successfully written in /etc/php/$ver/cli/php.ini.$(N)"
                        mapfile -t inifiles2_< <(grep -Eslix "$pattern" ${php_inis[@]})
                        if (( ${#inifiles2_[@]} )); then
                            bundle echo "R: $(R)removal from ${inifiles2_[@]} failed.$(N)"
                        else
                            bundle echo "R: $(lG)removal from ${inifiles1_[@]} was successfull.$(N)"
                        fi
                    else
                        bundle echo "R: $(R)this step failed.$(N)"
                    fi
                else
                    bundle echo "R: $(R)you answered $(box no), nothing changed.$(N)"
                fi
                anykey
            fi
            ;;
        opcache)
            echo -n > $xtmp; echo -n > $itmp
            echo -e "\n -$(P;format_string "$should_be_fixed_message" 3;N)" > $itmp
            pattern='^\s*opcache.enable_cli\s*=\s*(on|1)\s*$' php_inis=()
            for sapi in $(phpquery -v $ver -S); do
                if [[ "$sapi" != 'cli' && -f "/etc/php/$ver/$sapi/php.ini" ]]; then
                    php_inis+=("/etc/php/$ver/$sapi/php.ini")
                fi
            done
            [ -f "${php_inis[0]}" ] || return
            mapfile -t inifiles1_< <(grep -Eslix "$pattern" ${php_inis[@]})
            if (( ${#inifiles1_[@]} )); then
                line=$(grep -Eix "$pattern" ${inifiles1_[0]})
                if (( ${#inifiles1_[@]} == 1 )); then
                    plu='' be=is ini_string_="$(C)${inifiles1_[0]}$(O)" ini_string="$(C)${inifiles1_[0]}$(W)"
                else
                    plu='s' be=are ini_string_="$(listify_ C O ${inifiles1_[@]})" ini_string="$(listify_ C W ${inifiles1_[@]})"
                fi
                echo -e "\n   - $(O)Malicious configuration line in $ini_string_:" >> $itmp
                if (( $(grep -Exi "$pattern" "$ext_ini" "/etc/php/$ver/cli/php.ini"|wc -l) == 0 )); then
                    infostring="This directive has absolutely no effect in $ini_string. It is meant to enable the opcode cache for the CLI version of PHP (which is used on the commandline and for cron jobs). For all other SAPIs the opcode cache is enabled by default. Although it cannot cause any damage at this location$plu, this file$plu $be not sourced by the CLI version of PHP and in $(C)$ext_ini$(W) or $(C)/etc/php/$ver/cli/php.ini$(W) from where the CLI SAPI obtains its directives, this directive is missing. So this line will be removed from here and inserted into $(C)/etc/php/$ver/cli/php.ini$(W)."
                    echo -e "\n$(R)$line$(N)" >> $itmp
                    C;echo "info$(N):$(W;format_string "$infostring" 6;N)" >> $itmp
                    for i in ${!inifiles1_[@]}; do
                        line=$(grep -Eix "$pattern" ${inifiles1_[i]})
                        echo "sed -i '/^$line$/d' '${inifiles1_[i]}'" >> $xtmp
                    done
                    echo "echo 'opcache.enable_cli=1' >> /etc/php/$ver/cli/php.ini" >> $xtmp
                fi
            fi
            uniq_lines "$xtmp"
            if (( $(wc -c "$xtmp"|awk '{print$1}') )); then
                kill_spinner
                separator
                bundle cat "$itmp"
                f
                if ask "$(qpf)Do you want to apply this fixes" "$YES";then
                    haul cat "$xtmp"
                    . $xtmp
                    if grep -Eqsiw "$pattern" /etc/php/$ver/cli/php.ini; then
                        bundle echo "R: $(lG)Directive successfully written in /etc/php/$ver/cli/php.ini.$(N)"
                        mapfile -t inifiles2_< <(grep -Eslix "$pattern" ${php_inis[@]})
                        if (( ${#inifiles2_[@]} )); then
                            bundle echo "R: $(R)removal from ${inifiles2_[@]} failed.$(N)"
                        else
                            bundle echo "R: $(lG)removal from ${inifiles1_[@]} was successfull.$(N)"
                        fi
                    else
                        bundle echo "R: $(R)this step failed.$(N)"
                    fi
                else
                    bundle echo "R: $(R)you answered $(box no), nothing changed.$(N)"
                fi
                anykey
            fi
            ;;
        igbinary)
            echo -n > $xtmp; echo -n > $itmp
            echo -e "\n -$(P;format_string "$must_be_fixed_message" 3;N)" >> $itmp
            php_inis=()
            for sapi in $(phpquery -v $ver -S); do
                php_ini="/etc/php/$ver/$sapi/php.ini"
                if [ -f "$php_ini" ]; then
                    php_inis+=("/etc/php/$ver/$sapi/php.ini")
                else
                    continue
                fi
                mapfile -t lines< <(grep "$ext" "$php_ini") # treat ALL lines containing "$ext"
                if (( ${#lines[@]} )); then
                    echo -e "\n   - $(O)Malicious configuration lines in $(C)$php_ini$(O):" >> $itmp
                    for i in ${!lines[@]}; do
                        line="${lines[i]}"
                        key="$(key_ name "$line")"
                        val="$(key_ val "$line")"
                        if bool="$(boolean "$val")"; then
                            $bool && val='(on|1)' || val='(off|0)'
                        fi
                        if [ "$line" = "# igbinary for PHP" ]; then
                            infostring="This line was added by an installation script. Of course, this particular line has no meaning as it is commented out, but it will be removed though since the subsequent igbinary related directives will be removed there too and placed on their correct place."
                            echo -e "\n$(R)$line$(N)" >> $itmp
                            C;echo "info$(N):$(W;format_string "$infostring" 6;N)" >> $itmp
                            echo "sed -i '/^$line$/d' '$php_ini'" >> $xtmp
                        elif grep -qswiE "^\s*$key\s*=\s*$val\s*$" "$ext_ini"; then
                            infostring="This directive does not belong in $(C)$php_ini$(W) and is already defined in $(C)$ext_ini$(W). It will be removed from $(C)$php_ini$(W)."
                            echo -e "\n$(R)$line$(N)" >> $itmp
                            C;echo "info$(N):$(W;format_string "$infostring" 6;N)" >> $itmp
                            echo "sed -i '/^$line$/d' '$php_ini'" >> $xtmp
                        elif oldstring="$(grep -wiE "^\s*[;|#]\s*$key\s*=\s*$val\s*$" "$ext_ini")"; then
                            infostring="This directive does not belong in $(C)$php_ini$(W). It belongs in $(C)$ext_ini$(W), where it already exists but there it is commented out. It will be removed from $(C)$php_ini$(W) and uncommented in $(C)$ext_ini$(W)."
                            echo -e "\n$(R)$line$(N)" >> $itmp
                            C;echo "info$(N):$(W;format_string "$infostring" 6;N)" >> $itmp
                            echo "sed -Ei 's|^$oldstring$|$line|' '$ext_ini'" >> $xtmp
                            echo "sed -i '/^$line$/d' '$php_ini'" >> $xtmp
# TODO 0 -->
                        elif ! grep -qswiE "$key\s*=\s*$val" "$ext_ini"; then
                            infostring="This directive does not belong in $(C)$php_ini$(W). It belongs in $(C)$ext_ini$(W). It will be removed from $(C)$php_ini$(W) and appendet at the end of $(C)$ext_ini$(W)."
                            echo -e "\n$(R)$line$(N)" >> $itmp
                            C;echo "info$(N):$(W;format_string "$infostring" 6;N)" >> $itmp
                            echo "echo >> '$line' '$ext_ini'" >> $xtmp
                            echo "sed -i '/^$line$/d' '$php_ini'" >> $xtmp
# TODO <-- 0
                        else
                            echo "sed -i '/^$line$/d' '$php_ini'" >> $xtmp
                        fi
                    done
                fi
            done
            uniq_lines "$xtmp"
            if (( $(wc -c "$xtmp"|awk '{print$1}') )); then
                kill_spinner
                separator
                bundle cat "$itmp"
                f
                if ask "$(qpf)Do you want to apply this fixes" "$YES";then
                    haul cat "$xtmp"
                    . $xtmp \
                    && for inifile in $ext_ini ${php_inis[@]}; do uniq_empty_lines $inifile; done; unset inifile
                    grep -qs "igbinary" ${php_inis[@]}&&bundle echo "R: $(R)this step failed.$(N)"||bundle echo "R: $(lG)this step was successfull.$(N)"
                else
                    if [ "$OLD" = "$ver" ] && [[ "$OLD" ]]; then
                        bundle echo "R: $(R)you answered $(box no),...$(N)"
                        exit1
                    else
                        bundle echo "R: $(R)you answered $(box no), nothing changed.$(N)"
                    fi
                fi
                anykey
            fi
            ;;
# TODO 1 -->
        pdo_pgsql)
            echo -n > $xtmp; echo -n > $itmp
            echo -e "\n -$(P;format_string "$should_be_fixed_message" 3;N)" >> $itmp

            optionblock="pgsql.allow_persistent = On\npgsql.auto_reset_persistent = Off\npgsql.max_persistent = -1\npgsql.max_links = -1\npgsql.ignore_notice = 0\npgsql.log_notice = 0"

            if grep -qsPz "\n\n\[PostgresSQL\]\n$optionblock\n" "$ext_ini"; then
                infostring="$(W)This block was added by an installation script. These are all exclusively default values and besides that, all these lines are already present in the shipped default php.ini for all SAPIs in exact the same order. Php does not get better by adding directives multiple times, it only lowers the overview ability and makes it difficult for this script. That is why this lines will (should) be removed."
                echo -e "\n$(R)[PostgresSQL]\n$optionblock$(N)" >> $itmp
                C;echo "info$(N):$(format_string "$infostring" 6;N)" >> $itmp
                echo "delafter 'extension=pdo_pgsql.so' '$ext_ini'" >> $xtmp
            fi
            if (( $(wc -c "$xtmp"|awk '{print$1}') )); then
                kill_spinner
                separator
                bundle cat "$itmp"
                f
                if ask "$(qpf)Do you want to remove these lines" "$YES";then
                    . $xtmp
                    grep -qsPz "\n\n\[PostgresSQL\]\n$optionblock\n" "$ext_ini"&&bundle echo "R: $(R)removal of this lines failed.$(N)"||bundle echo "R: $(lG)lines successfully removed.$(N)"
                else
                    bundle echo "R: $(R)you answered $(box no), nothing changed.$(N)"
                fi
                anykey
            fi
            ;;
# TODO <-- 1
        *)  :
    esac
}

check_config(){
    local ver amdir am
    local -a am_ini_files
    (( $# )) && ver="$1" || ver="$OLD"
    amdir="/etc/php/$ver/mods-available"
    [ -d "$amdir" ] || return 1
    mapfile -t am_ini_files< <(ls "$amdir"|awk -F. '/\.ini$/{print$1}')
    for am in ${am_ini_files[@]}; do
        spinner C " . check_config() searching known configuration errors in php$ver." &
        ext_config_fix $ver $am
    done
    kill_spinner
}

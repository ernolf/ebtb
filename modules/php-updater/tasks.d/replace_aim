__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${TASKS_REPLACE_AIM_BASHLIB:-_} && return
TASKS_REPLACE_AIM_BASHLIB=:

replace_aim(){ # replace admin installed modules
    replace_(){
        local ini_dir mod
        if [ "$(${X[pecl]} list)" = '(no packages installed from channel pecl.php.net)' ] && (( imb )); then
            if ${bool[pmb]}; then
                for i in ${!mods[@]}; do
                    ver=${mods[i]#*php}
                    ver=${ver%)}
                    mod=${mods[i]%(*}
                    ${X[php-module-builder]} $ver $mod --remove --force --quiet
                    ext_state purge $mod $ver
                done
            fi
        else
            ini_dir="/etc/php/$PHP_VERSION/mods-available"
            ${X[pecl]} uninstall ${mods[@]%(*}
            for mod in ${mods[@]%(*}; do
                ${X[pecl]} uninstall $mod # for the sake of stability, if something went wrong 2 lines before
                ${X[phpdismod]} -p -v $PHP_VERSION -s ALL $mod
                ext_state purge $mod $ver
                rm -f "$ini_dir/$mod.ini"
            done
        fi
#            anykey
        ext_state cleanup
        ext_state fix
        apt_install_prechecked --yes ${pkgs[@]}
    }
    if [ -n "${X[pecl]}" ]; then
        local ver module pkg pkgmod modstring serializers compression
        local -i iam imb pecli
        local -a ibymb pkgmods mods pkgs
        local -A bool
        pecli=0 bool[replaced]=_
        for pv in $(${X[phpquery]} -V | ${X[sort]}); do
            local -n C4EIBY4_pv=C4EIBY4_${pv//./}
            iam+=${#C4EIBY4_pv[@]}
            unset -n C4EIBY4_pv
        done
        [ -n "${X[php-module-builder]}" ] && bool[pmb]=: || bool[pmb]=_
        mapfile -t ibymb< <(${X[grep]} -lr "module built by php-module-builder" /etc/php/)
        imb=${#ibymb[@]}
        if (( iam )); then
            if [ "$(${X[pecl]} list)" = '(no packages installed from channel pecl.php.net)' ]; then
                spinner C " . search packages for modules installed by the php-module-builder script ." &
                if ((imb)); then
                    for inifile in ${ibymb[@]}; do
                        ver=${inifile#/etc/php/}
                        ver=${ver%%/*}
                        module=$(${X[basename]} ${inifile%.ini})
                        pkg="php$ver-$module"
                        if apt_exist "$pkg"; then (( pecli++ ))
                            pkgs+=("$pkg")
                            mods+=("$(${X[gawk]} 'NR==1 {print $3}' $inifile)(php$ver)")
                        fi
                    done
                fi
                kill_spinner
            else
                local -n C4EIBY4_pv=C4EIBY4_${PHP_VERSION//./}
                for i in ${!C4EIBY4_pv[@]}; do
                    pkgmod="${C4EIBY4_pv[i]}"
                    if (( $(${X[pecl]} list | ${X[grep]} -wc "${pkgmod#*:}") )); then
                        (( pecli++ ))
                        pkgs+=("${pkgmod%:*}")
                        mods+=("${pkgmod#*:}(php$PHP_VERSION)")
                    fi
                done
                unset -n C4EIBY4_pv
            fi
        fi
        if (( pecli )); then
            if (( pecli == 1 )); then
                plu='' modstring="$(B)${mods[0]}$(N)"
            else
                plu='s' modstring="$(listify B ${mods[@]})"
            fi
            if [[ "${mods[@]}" =~ redis ]]; then
                serializers="$(${X[php]} -i | ${X[grep]} "Available serializers" | ${X[sed]} 's/.*=> //;s/,//g')"
                compression="$(${X[php]} -i | ${X[grep]} "Available compression" | ${X[sed]} 's/.*=> //;s/,//g')"
                if [[ ! "$serializers" =~ igbinary ]] && [ -z "$compression" ]; then
                    bundle echo "$(xpf; Y; format_string "The actually installed $(C)redis$(Y) module was poorly built without enabled igbinary serializer support and without any compression ($(dY)lzf, zstd, and/or lz4$(Y)) support enabled, which results in a loss of performance." 3;N)"
                fi
            fi
            bundle echo "$(ipf; format_string "The php module$plu $modstring can be replaced by this script. You can answer $(box no) here, but then you may be confronted with some error messages after the upgrade while migrating the settings." 3)"
            ask "$(qpf)Do you want to replace $modstring now" "$YES" && { bool[replaced]=:; replace_;}
            separator
        fi
    else
        bundle echo "$(xpf; format_string "Unfortunately pecl is not installed or the pecl installation is broken, so the removal is not posible at present!" 3)"
    fi
    ${bool[replaced]} && "$ME${FLAG[forceflag]}" "json=${J[o]}" --list-installed-only
}

__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${TASKS_REPLACE_AIM_BASHLIB:-false} && return
TASKS_REPLACE_AIM_BASHLIB=:

replace_aim(){ # replace admin installed modules
    replace_(){
        local ini_dir mod
        if [ "$(pecl list)" = '(no packages installed from channel pecl.php.net)' ] && ((imb)); then
            if $pmb; then
                for i in ${!mods[@]}; do
                    ver=${mods[i]#*php}
                    ver=${ver%)}
                    mod=${mods[i]%(*}
                    php-module-builder $ver $mod --remove --force --quiet
                    ext_state purge $mod $ver
                done
            fi
        else
            ini_dir="/etc/php/$PHP_VERSION/mods-available"
            pecl uninstall ${mods[@]%(*}
            for mod in ${mods[@]%(*}; do
                pecl uninstall $mod # for the sake of stability, if something went wrong 2 lines before
                phpdismod -p -v $PHP_VERSION -s ALL $mod
                ext_state purge $mod $ver
                rm -f "$ini_dir/$mod.ini"
            done
        fi
#            anykey
        ext_state cleanup
        ext_state fix
        apt_install_prechecked --yes ${pakages[@]}
    }
    if command -v pecl >/dev/null; then
        local pmb ver module pakage pkgmod modstring serializers compression replaced
        local -i iam imb pecli=0
        local -a ibymb pkgmods mods pakages
        replaced=false
        for pv in ${VERSIONS[@]}; do
            eval iam+=\${#C4EIBY4_${pv//./}[@]}
        done
        command -v php-module-builder >/dev/null&&pmb=true||pmb=false
        mapfile -t ibymb< <(grep -lr "module built by php-module-builder" /etc/php/)
        imb=${#ibymb[@]}
        if (( iam )); then
            if [ "$(pecl list)" = '(no packages installed from channel pecl.php.net)' ]; then
                spinner C " . search packages for modules installed by the php-module-builder script ." &
                if ((imb)); then
                    for inifile in ${ibymb[@]}; do
                        ver=${inifile#/etc/php/}
                        ver=${ver%%/*}
                        module=$(basename ${inifile%.ini})
                        pakage="php$ver-$module"
                        if apt_exist "$pakage"; then ((pecli++))
                            pakages+=("$pakage")
                            mods+=("$(awk 'NR==1 {print $3}' $inifile)(php$ver)")
                        fi
                    done
                fi
                kill_spinner
            else
                for i in $(eval echo \${!C4EIBY4_${PHP_VERSION//./}[@]}); do
                    pkgmod="$(eval echo \"\${C4EIBY4_${PHP_VERSION//./}[i]}\")"
                    if (( $(pecl list | grep -wc "${pkgmod#*:}") )); then
                        (( pecli++ ))
                        pakages+=("${pkgmod%:*}")
                        mods+=("${pkgmod#*:}(php$PHP_VERSION)")
                    fi
                done
            fi
        fi
        if (( pecli )); then
            if ((pecli==1)); then
                plu='' modstring="$(B)${mods[0]}$(N)"
            else
                plu='s' modstring="$(listify B ${mods[@]})"
            fi
            if [[ "${mods[@]}" =~ redis ]]; then
                serializers="$(php -i | grep "Available serializers" | sed 's/.*=> //;s/,//g')"
                compression="$(php -i | grep "Available compression" | sed 's/.*=> //;s/,//g')"
                if [[ ! "$serializers" =~ igbinary ]] && [ -z "$compression" ]; then
                    bundle echo "$(xpf;format_string "$(Y)The actually installed $(C)redis$(Y) module was poorly built without enabled igbinary serializer support and without any compression ($(dY)lzf, zstd, and/or lz4$(Y)) support enabled, which results in a loss of performance." 3;N)"
                fi
            fi
            bundle echo "$(ipf;format_string "The php module$plu $modstring can be replaced by this script. You can answer $(box no) here, but then you may be confronted with some error messages after the upgrade while migrating the settings." 3)"
            ask "$(qpf)Do you want to replace $modstring now" "$YES" && { replaced=true;replace_;}
            separator
        fi
    else
        bundle echo "$(xpf;format_string "Unfortunately pecl is not installed or the pecl installation is broken, so the removal is not posible at present!" 3)"
    fi
    $replaced && "$me${FLAG[forceflag]}" "json=$my_json" --list-installed-only
}

__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${SWITCH_BASHLIB:-_} && return
SWITCH_BASHLIB=:

. <(lrequire httpd)
. <(lrequire fstring)
. <(lrequire php/versions)
. <(lrequire php/extensions)
. <(lrequire php/nginx)
. <(lrequire php/fpm)
. <(lrequire php/apache2)
. <(lrequire php-updater/linstalled)

${X[mkdir]} -p ${D[li]}/php-updater/switch.d

. <(lrequire php-updater/switch.d/php_apache2_module)
. <(lrequire php-updater/switch.d/php_fpm)
. <(lrequire php-updater/switch.d/php_fpm_apache2)
. <(lrequire php-updater/switch.d/php_fpm_nginx)

no_conf_in_pool(){
    local -i
    f
    bundle echo "$(es3; ipf; O; format_string "There is no socket connection configured in this pool that could be switched to the version you selected. If, in the further course, below of this message, it is shown that the server is connected to the new socket, then everything worked and this message does not indicate an error." 6; N)"
    bundle echo "$(es3; Y; pf; format_string "If the server does not connect to the new socket and this message does not match your expectations, the fpm pool for the selected version you want to switch to may not have been created. This script normaly creates the necessary pools for the new version. However, if steps outside of this script have already been performed, this may have been skipped." 6; N)"
    f
    anykey_noquit
}

switch_default_version(){
    local key
    local -a selections php_versions sapis
    local -i i ret
    mapfile -t php_versions < <(${X[phpquery]} -V | ${X[sort]})
    # update-alternatives
#    cleanup_and_fix_alternatives # before  # repair broken alternatives, remove not existing alternatives
    mapfile -t selections < <(list_alternatives)
    line '=' P 2/a b1
    echo -e "\n$(pf; P; format_string "Here you can switch the default php version linked to the generic $(C)/usr/bin/php$(P) with the means of the $(W)Debian alternatives system$(P)." 3; N)\n$(o3; dP; format_string "All php related packages maintained by the alternatives system will get switched to manual mode instead of automatic. That will prevent php from changing its version without your dessision." 3; N)\n$(o3; dP; format_string "In this step there is no test, if all required php packages to run a server like Nextcloud are present in the version you choose. So it is recommended to first run $(C)$ME${FLAG[forceflag]} \$old \$new$(dP), where $(C)\$old$(dP) should be the version that you know exactly that everything has been installed correctly and $(C)\$new$(dP) should be the version that you want to switch to here and now." 3; N)"
    f
    bundle echo "$(es3; dY)this is how the alternatives system is configured at present:"; N
    ${X[sleep]} .1
    haul printf list_alternatives
    f
    for i in ${!selections[@]}; do
        o3; pf; lG; echo "${selections[i]}"; N
    done
    line '=' P 2/a b1
    anykey_noquit
    echo -e "\n$(pf; P; format_string "In the subsequent next step it will switch your webserver to connect to the new php version as well. $(dP)However, in some rare special cases, this step may fail though. In such a case you will have to edit the web server's configuration files yourself to connect it to the PHP socket of your choice." 3; N)"
    f
    bundle echo "$(es3; dY)this is how php is connected to the httpd at present:"; N
    ${X[sleep]} .1
    haul printf list_installed_sapi quiet
    f
    list_installed_sapi
    N
    line '=' P 2/a b1
    anykey_noquit
    f
    bundle echo "$(pf; Y)Switch the default alternatives version for php to:"
    for i in ${!php_versions[@]}; do
        f
        bundle echo "$(es 10; button $((i + 1)); Y) - php${php_versions[i]} $(dY)supported by Nextcloud version $(listify_ C dY $(a_fld EXISTING ';' ${php_versions[i]} 5); Y)"
    done
    f
    bundle echo "$(es 10; button q; Y) - do nothing, quit"
    N; f
    while :;do read -rsn 1 -p "$(pf; Y)Please make your choice: $(N)" key
        if confirm_choice "$key" "You selected option $(button $key) Is this correct?"; then
            f
            mh "key: [$key]" &
            echo -n "$(P; pf)Confirmed choice $(button $key)"; N
            case $key in
                    q)  P; echo ":$(Yi) quit, nothing changed"; N
                        separator
                        break
                        ;;
                [1-9])  if [[ ${php_versions[$key-1]} ]]; then
                            P; echo ":$(Yi) php${php_versions[$key-1]}"; N
#                            anykey_noquit
                            separator
                            q0 apt-mark manual $(${X[dpkg]} -l | ${X[gawk]} '/^[hiu]i.*php*/{print $2}')
                            set_selections 'ph(ar|p)' 'manual' "${PHP[vregex]}" "${php_versions[$key-1]}"
                            cleanup_and_fix_alternatives # afterwards  # repair broken alternatives, remove not existing alternatives
                            mapfile -t selections < <(list_alternatives)
                            bundle echo "$(es3; dY)alternatives system is now switched to:"; N
                            ${X[sleep]} .1
                            haul printf list_alternatives
                            f
                            for i in ${!selections[@]}; do
                                o3; pf; lG; echo "${selections[i]}"; N
                            done
                            f
                            echo "$(o3; Y; format_string "Please consider: $(dY)if some alternatives listed here are not switched to the selected version, then either the package that provides the binaries for that version is not installed or – in case of $(G)php-fpm.sock$(dY) – the default fpm-pool $(G)[www]$(dY) has been deactivated in the selected version but not in the version that it shows here." 3)"
                            f
                            anykey
                            separator
                            load_server_status
                            populate_httpd_ enabled
                            populate_httpd_ active
                            populate_httpd_ wk_enabled
                            populate_httpd_ wk_active
                            (( ${#HTTPD_ENABLED[@]} )) || { bundle echo "$(es3; Pbg; pf)This script could not detect any enabled httpd (webserver). $(N)"; exit0; }
                            switch_fpm_version ${php_versions[$key-1]}
                            ret=$?
                            if (( ret )); then
                                bundle echo "$(es3; xpf; R; format_string "Something went wrong while switching the $(dY)${SAPIDESCR[fpm]}$(GRAY) (php-fpm)$(R) version." 6; N)"
                                case $ret in
                                    2)  bundle echo "$(es3; xpf; R; format_string "From the point of view of this script, it looks like the $(dY)${SAPIDESCR[fpm]}$(GRAY) php-fpm$(R) is not installed in any version." 6; N)"
                                        ;;
                                    3)  bundle echo "$(es3; xpf; R; format_string "The $(dY)${SAPIDESCR[fpm]}$(R) for version $(Y)${php_versions[$key-1]} $(GRAY)(php${php_versions[$key-1]}-fpm)$(R) is not installed." 6; N)"
                                esac
                                f
                                anykey
                                break
                            fi
                            if (( ${HTTPD[apache2]} )); then
                                switch_a2module_version ${php_versions[$key-1]}
                                ret=$?
                                if (( ret )); then
                                    bundle echo "$(es3; xpf; R; format_string "Something went wrong while switching the $(dY)${SAPIDESCR[apache2]}$(GRAY) (libapache2-mod-php)$(R) to version ${php_versions[$key-1]}." 6; N)"
                                    case $ret in
                                        2)  bundle echo "$(es3; xpf; R; format_string "From the point of view of this script, it looks like the $(dY)${SAPIDESCR[apache2]}$(GRAY) libapache2-mod-php$(R) is not installed in any version." 6; N)"
                                            ;;
                                        3)  bundle echo "$(es3; xpf; R; format_string "The $(dY)${SAPIDESCR[apache2]}$(R) for version $(Y)${php_versions[$key-1]} $(GRAY)(libapache2-mod-php${php_versions[$key-1]})$(R) is not installed." 6; N)"
                                            ;;
                                        4)  bundle echo "$(es3; O)Skipped the apache2 server due to its inactive state."; N
                                            bundle echo "$(es3; O)You should first start the apache2 server and run"; N
                                            f
                                            bundle echo "$(G; prompt; P) $ME${FLAG[forceflag]} --switch-version"; N
                                            f
                                            bundle echo "$(es3; O).. again if you want to switch the $(dY)${SAPIDESCR[apache2]}$(O) to $(C)${php_versions[$key-1]}"; N
                                    esac
                                    f
                                    anykey
                                    break
                                fi
                            fi
                            separator
                            f
                            bundle echo "$(es3; dY)This is how php is connected to the httpd now:"; N
                            ${X[sleep]} .1
                            haul printf list_installed_sapi quiet
                            f
                            list_installed_sapi
                            N
                            line '=' P 2/a b1
                            f
                            anykey_noquit
                            N
                            echo "$(o3; O; format_string "If everything has gone as expected so far, I would like to urge you to make a contribution that is crucial to maintaining this service!" 3; N)"
                            f
                            echo "$(o3; W; format_string "After you have done that, you can allways run" 3; N)"
                            f
                            echo "$(G; prompt; lB) $ME${FLAG[forceflag]}$(C) --list-installed"; N
                            f
                            echo "$(o3; W; format_string ".. again, to scan once more for possible configuration errors. The script is constantly updated and often new tests are added." 3)"
                            echo "$(o3; W; format_string "If everything looks good and is working well, you should strongly consider to completely remove unused old php versions, to free up system resources." 3)"
                            echo "$(o3; W; format_string "To completely remove a php version $(B)php$(GRAY)\$$(C)old$(GRAY) (eg. $(lB)php8.0$(GRAY))$(N) from your server, run" 3; N)"
                            f
                            echo "$(G; prompt; GRAY) sudo$(lB) apt-get purge '*php8.0*'"; N
                            f
                            echo "$(o3; format_string ".. $(GRAY)(where, as said, the $(lB)8.0$(GRAY) is just an example placeholder)" 3; N)"
                            f
                            echo "$(o3; Yi; format_string "NOTE:$(N) The single quotes are crucial here, to prevent globing." 3)"
                            f
                            anykey_noquit
                            break
                        fi
            esac
        else
            echo -e "\n\tChoice $(button $key) cancelled\n"
            sleep 2
            te0 8
        fi
    done
    q0 di ff &
    contribute_
}

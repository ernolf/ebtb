__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${SWITCH_BASHLIB:-false} || {
    SWITCH_BASHLIB=:

    . <(lrequire httpd)
    . <(lrequire button)
    . <(lrequire exit)
    . <(lrequire anykey)
    . <(lrequire fstring)
    . <(lrequire line)
    . <(lrequire ask)
    . <(lrequire php/versions)
    . <(lrequire php/fpm)
    . <(lrequire php/apache2)
    . <(lrequire $sin/linstalled)

    php_fpm_sites_available_conf_(){
        local webserver pool ver_n ver_o sock_regex sock_n plu
        local -a conffiles sock_o
        local -i i c2=20 c3=25
        webserver="$1" pool="$2" ver_n="$3" ver_o="$4"
        sock_n="$(fpm_socket "$ver_n" "$pool")"
        sock_regex="$(echo "$sock_n" | sed -E "s/${phpvregex#php}/${phpvregex#php}/g")"
        case $webserver in
            apache2)
                mapfile -t sock_o< <(find ${A2CONFFILES[@]} 2>/dev/null -name "*.conf" -exec grep -Ehos "^[^#]*${sock_regex//\./\.}" {} + | grep -Eos "${sock_regex//\./\.}" | sort -u)
                mapfile -t conffiles< <(grep -Els "^[^#]*${sock_regex//\./\.}" ${A2CONFFILES[@]} | grep -E '\.conf$' | sort -u)
                ;;
            nginx)
                mapfile -t sock_o< <(find ${NGINXCONFFILES[@]} 2>/dev/null ! -name "*.backup" -exec grep -Ehos "^[^#]*${sock_regex//\./\.}" {} + | grep -Eos "${sock_regex//\./\.}" | sort -u)
                mapfile -t conffiles< <(grep -Els "^[^#]*${sock_regex//\./\.}" ${NGINXCONFFILES[@]} | grep -Ev '\.backup$' | sort -u)
                ;;
        esac
        if (( ${#conffiles[@]} )); then
            separator
            if (( ${#conffiles[@]} == 1 )); then
                this='This' be='is' plu=''
            else
                this='These' be='are' plu='s'
            fi
            o3;pf;bundle echo "The $webserver webserver is proxied to an FPM socket."
            f
            if (( ${#sock_o[@]} == 1 )); then
                if [ "${sock_o[0]}" = "$sock_n" ]; then
                    o3;pf;bundle echo "this is the socket: $(lG)${sock_o[0]}$(N), nothing to change"
                    return 0
                fi
                o3;pf;bundle echo "this is the old socket: $(lG)${sock_o[0]}";N
            else
                o3;O;bundle echo "multiple old sockets detected (will be fixed)";N
                o3;pf;bundle echo "these are the old sockets: $(lG)${sock_o[@]}";N
            fi
            o3;pf;bundle echo "this is the new socket: $(lG)$sock_n";N
            f
            pf;bundle echo "$this $be the file$plu containing the socket string:"
            for i in ${!conffiles[@]}; do
                if [ -L "${conffiles[i]}" ]; then
                    o3;pf;GRAY;bundle echo "${conffiles[i]} -> $(C)$(readlink -f "${conffiles[i]}")";N
                else
                    o3;pf;C;bundle echo "${conffiles[i]}";N
                fi
            done
            f

# TODO 0 -->
if $verbose; then
            bundle echo " -$(format_string "This script can replace $(listify Y ${sock_o[@]}) with $(Y)$sock_n$(N) for you, so look exactly what it suggests to do. If it does not look good, simply answer $(button no) and edit the file yourself as you need it." 3)"
else
# TODO <-- 0

            bundle echo " -$(format_string "If you continue here, this script will replace $(listify Y ${sock_o[@]}) with $(Y)$sock_n$(N) for you." 3)"

# TODO 1 -->
fi
# TODO <-- 1

            f
            anykey
            for i in ${!conffiles[@]}; do
                conffile="$(readlink -f "${conffiles[i]}")"

# TODO 2 -->
if $verbose; then
                separator
                line '=' P 2/78 b1  # old config
                line '-' GRAY 2/78
                os;GRAY;bundle echo "old:$(f;o5)- config-file$(o $c2)-->$(o $c3)$conffile"
                line '-' GRAY 2/78
                GRAY;bundle echo -n "-->  begin";line "  -->" GRAY 14
                cat $conffile
                GRAY;bundle echo -n "<--   end ";line "  <--" GRAY 14
                line '=' P 2/78  # new config draft
                line '-' GRAY 2/78
                os;GRAY;bundle echo "draft: (not yet written to file)"
                o5;bundle echo "- config-file$(o $c2)-->$(o $c3)$conffile"
                line '-' GRAY 2/78
                GRAY;bundle echo -n "-->  begin";line "  -->" GRAY 14
                sed -E '/^\s*#/ !s#'${sock_regex//\./\.}'#'$sock_n'#g' $conffile
                GRAY;bundle echo -n "<--   end ";line "  <--" GRAY 14
                line '=' P 2/78 a2
                bundle echo " -$(format_string "$(O)Nothing has been written to disc yet. If everything looks as desired and expected and you want to apply the changes exactly as shown here, then please enter $(N;box yes)" 3)"
                f
                if ask "$(qpf)Apply changes to $conffile as suggested" "$YES"; then
                    sed -E --in-place=.backup '/^\s*#/ !s#'${sock_regex//\./\.}'#'$sock_n'#g' $conffile
                    line '=' P 2/78 b1
                    line '-' GRAY 2/78
                    os;GRAY;bundle echo "new:$(f;o5)- config-file$(o $c2)-->$(o $c3)$conffile"
                    line '-' GRAY 2/78
                    GRAY;bundle echo -n "-->  begin";line "  -->" GRAY 14
                    cat $conffile
                    GRAY;bundle echo -n "<--   end ";line "  <--" GRAY 14
                    line '=' P 2/78
                    os;bundle echo "Changes written to disk."
                    f
                    o3;Pbg;bundle echo " IMPORTANT:$(format_string "$(P) A backup-file $(C)$conffile.backup$(P) was created with the previous state. Don't forget to remove that file if everything runs fine." 15)"
                    f
                    anykey
                else
                    o3;C;bundle echo " -$(format_string "$conffile$(N) not changed. You can call this script again or edit $(C)$conffile$(N) with an editor of your choice." 3)"
                fi
                separator
else
# TODO <-- 2

                sed -E --in-place=.backup '/^\s*#/ !s#'${sock_regex//\./\.}'#'$sock_n'#g' $conffile
                o3;Pbg;bundle echo " IMPORTANT:$(format_string "$(P) A backup-file $(C)$conffile.backup$(P) was created with the previous state. Don't forget to remove that file if everything runs fine." 15;N)"
# TODO 3 -->
fi
# TODO <-- 3
            done
        else
            return
        fi
    }

    switch_fpm_version(){
        local webserver active_webserver infostring modstring modsubstring
        populate_httpd_ enabled
        populate_httpd_ active
        populate_httpd_ wk_enabled
        populate_httpd_ wk_active
        if (( ${#HTTPD_ENABLED[@]} )); then
            if (( ${#HTTPD_ENABLED[@]} == ${#WK_HTTPD_ENABLED[@]} )); then
                if (( ${#WK_HTTPD_ENABLED[@]} == 1 )); then
                    webserver="${WK_HTTPD_ENABLED[0]}"
                    infostring="Detected httpd (webserver): $(C)$webserver$(N) (status inactive)"
                    if (( ${#WK_HTTPD_ACTIVE[@]} == 1 )); then
                        infostring="${infostring/inactive/active}"
                    fi
                elif (( ${#WK_HTTPD_ENABLED[@]} == 2 )); then
                    webserver=both
                    modstring="$(listify C ${WK_HTTPD_ENABLED[@]})"
                    infostring="Detected httpds (webservers): $modstring"
                    if (( ${#WK_HTTPD_ACTIVE[@]} == 1 )); then
                        active_webserver=${WK_HTTPD_ACTIVE[0]}
                        infostring="$infostring, but only $(C)$active_webserver$(N) seems to be active."
                    elif (( ${#WK_HTTPD_ACTIVE[@]} == 2 )); then
                        active_webserver=both
                        infostring="$infostring, and $active_webserver seem to be active."
                    fi
                fi
            elif (( ${#HTTPD_ENABLED[@]} > ${#WK_HTTPD_ENABLED[@]} )); then
                if (( ${#WK_HTTPD_ENABLED[@]} == 1 )); then
                    webserver="${WK_HTTPD_ENABLED[0]}"
                    modstring="$(listify C ${HTTPD_ENABLED[@]})"
                    infostring="Detected httpds (webservers): $modstring. httpd with importance for this script: $(C)$webserver$(N) (status inactive)"
                    if (( ${#WK_HTTPD_ACTIVE[@]} == 1 )); then
                        infostring="${infostring/inactive/active}"
                    fi
                elif (( ${#WK_HTTPD_ENABLED[@]} == 2 )); then
                    webserver=both
                    modstring="$(listify C ${HTTPD_ENABLED[@]})"
                    modsubstring="$(listify C ${WK_HTTPD_ENABLED[@]})"
                    infostring="Detected httpds (webservers): $modstring. httpds with importance for this script: $modsubstring"
                    if (( ${#WK_HTTPD_ACTIVE[@]} == 1 )); then
                        active_webserver=${WK_HTTPD_ACTIVE[0]}
                        infostring="$infostring, but only $(C)$active_webserver$(N) seems to be active."
                    elif (( ${#WK_HTTPD_ACTIVE[@]} == 2 )); then
                        active_webserver=both
                        infostring="$infostring, and $active_webserver seem to be active."
                    fi
                fi
            fi
        else
            o3;Pbg;bundle echo " - This script could not detect any enabled httpd (webserver). $(N)"
            exit0
        fi
        case $webserver in
           apache2) o3;bundle echo "$infostring"
                    apache2_mpm event || return         # this is only for version switch, the modules must already be loaded
                    apache2_module proxy_fcgi || return # "
                    apache2_module setenvif || return   # "
                    ;;
             nginx) o3;bundle echo "$infostring"
                    ;;
              both) case $active_webserver in
          apache2|both) o3;bundle echo "$infostring"
                        apache2_mpm event || return         # this is only for version switch, the modules must already be loaded
                        apache2_module proxy_fcgi || return # "
                        apache2_module setenvif || return   # "
                        ;;
                 nginx) o3;bundle echo "$infostring"
                        ;;
                     *) o3;Pbg;bundle echo " - This script could not detect any enabled httpd (webserver). $(N)"
                        exit0
                    esac
                    ;;
                 *) o3;bundle echo "$infostring"
                    o3;Pbg;bundle echo " - This script can not (yet) switch the php version for this httpd. $(N)"
                    o3;bundle echo " -$(format_string "$(P)Please give me feedback on the way php is integrated into this web server so that I can add support for ${webserver:-this webserver} in future versions of this script." 6;N)"
                    exit0
        esac
        local ver_o ver_n pool
        local -a pools_o pools_n
        ver_n="$1"
        local connected_httpd socket pv
        for socket in $(fpm_sockets); do
            pv="$(echo $socket | grep -Eo "${phpvregex#php}")"
            connected_httpd=''
            if (( ${#WK_HTTPD_ENABLED[@]} )); then
                for httpd in ${WK_HTTPD_ENABLED[@]}; do
                    case "$httpd" in
                        apache2)grep -qs "^[^#]*unix:$socket" ${A2CONFFILES[@]} || continue
                                ;;
                        nginx)  grep -qs "^[^#]*unix:$socket" ${NGINXCONFFILES[@]} || continue
                    esac
                    case ${SERVER_STATUS["$httpd"]} in
                        2)  connected_httpd="$connected_httpd $(N;GRAY)$httpd(inactive)$(N;lG)" ;;
                        3)  connected_httpd=" $httpd $connected_httpd"
                    esac
                done
            fi
            [ -z "$connected_httpd" ] || ver_o="$pv"
        done

        if [ "$ver_n" = "$ver_o" ]; then
            o3;G;bundle echo "The $(B)$webserver$(G) webserver is already connected to $(Y)php$ver_o-fpm$(G)";N
            exit0
        fi
        mapfile -t pools_n< <(fpm_socket "$ver_n")
        mapfile -t pools_o< <(fpm_socket "$ver_o")
        for pool in ${pools_n[@]}; do
            case $webserver in
# TODO 4 -->
               apache2) if [[ "$pool" =~ " ${pools_o[@]} " && "$pool" == 'www' ]]; then
# TODO <-- 4
               apache2) if [ "$pool" = 'www' ]; then
                            if php_fpm_conf_ switch2 $ver_n -q; then
                                o3;G;bundle echo "Successfully switched php-fpm conf from version $(Y)$ver_o$(G) to $(Y)$ver_n$(G)";N
                                SAPI_FPM[$ver_o]='i' SAPI_FPM[$ver_n]='a'
                            else
                                o3;R;bundle echo "Something went wrong while switching php-fpm from version $(Y)$ver_o$(R) to $(Y)$ver_n$(R)";N
                            fi
# TODO 5 -->
                        elif [ "$pool" = 'www' ]; then
                            php_fpm_conf_ enable $ver_n -q
# TODO <-- 5
                        else
# TODO 6 -->
                            php_fpm_sites_available_conf_ $pool $ver_o $ver_n
# TODO <-- 6
                            php_fpm_sites_available_conf_ $webserver $pool $ver_n
                        fi
                        ;;
                 nginx) php_fpm_sites_available_conf_ $webserver $pool $ver_n
            esac
        done
        systemctl restart $webserver php$ver_n-fpm
    }

    switch_a2module_version(){
        apache2_mpm prefork || return # this is only for version switch, the modules must already be loaded
        local ver_n ver_o cf v
        ver_n="$1"
        for cf in "${A2CONFFILES[@]##*/}"; do 
            if [[ "$cf" =~ $phpvregex\.load ]]; then 
                v="${cf#php}"
                v="${v%.load}"
                if [[ "${A2CONFFILES[@]##*/}" =~ php$v\.conf ]]; then
                    ver_o="$v"
                    break
                fi
            fi
        done
        if [ "$ver_n" = "$ver_o" ]; then
            o3;G;bundle echo "The $(B)$webserver$(G) webserver is already connected to $(Y)php$v$(G) ($(C)libapache2-mod-php$v$(G))";N
            exit0
        fi
        if a2dismod -q php* && a2enmod -q php$ver_n && systemctl restart apache2; then
            o3;G;bundle echo "Successfully switched apache2-mod-php from version $(Y)$ver_o$(G) to $(Y)$ver_n$(G)";N
        else
            o3;R;bundle echo "Something went wrong while switching apache2-mod-php from version $(Y)$ver_o$(R) to $(Y)$ver_n$(R)";N
        fi
    }

    switch_default_version(){
        local key
        local -a selections
        local -i i
        populate_versions_array
        # update-alternatives
        cleanup_and_fix_alternatives before  # repair broken alternatives, remove not existing alternatives
        mapfile -t selections< <(update-alternatives --get-selections | grep -E "ph(ar|p)")
        P;echo " -$(format_string "Here you can switch the default php version linked to the generic $(C)/usr/bin/php$(P) with the means of the Debian alternatives system. All php related packages maintained by the alternatives system will get switched to manual mode instead of automatic. That will prevent php from changing its version without your dessision. Therefore you can select the actually active version as well here. In this step there is no test, if all required php packages to run a server like Nextcloud are present in the version you choose. So it is recommendet to first run $(C)$me$forceflag \$old \$new$(P), where $(C)\$old$(P) should be the version that you know exactly that everything has been installed correctly and $(C)\$new$(P) should be the version that you want to switch to here and now." 3)"
        echo "  $(format_string "In the subsequent next step it will switch your webserver to listen to the new php version as well. In some rare special cases, that step may fail though. You will have to fix it yourself then, by editing the config files of your webserver, to make it listen to the new php socket." 3;N)"
        f
        o3;dY;echo "this is how the alternatives system is configured at present:";N
        f
        for i in ${!selections[@]}; do
            o3;pf;echo "$(lG)${selections[i]}";N
        done
        N;f

        o3;dY;echo "and this is how php is connected to the webserver:";N
        f
        list_installed_sapi
        N
        line '=' P 2/78 b1
        f
        pf;Y;echo "Switch default php version to:"
        for i in ${!VERSIONS[@]}; do
            f;o 10;echo "$(button $((i + 1))) - php${VERSIONS[i]}"
        done
        f;o 10;echo "$(button q) - do nothing, quit"
        N;f
        while :;do read -rsn 1 -p "$(pf;Y)Please make your choice: $(N)" key
            case $key in
                    q)  f 2;break
                        ;;
                [1-9])  if [[ ${VERSIONS[$key-1]} ]]; then
                            P;pf;echo "Your choice:$(Yi) php${VERSIONS[$key-1]}";N
                            anykey
                            separator
                            apt-mark manual $(dpkg -l|awk '/^[hiu]i.*php*/{print $2}') >/dev/null 2>&1
                            set_selections 'ph(ar|p)' 'manual' "${phpvregex#php}" "${VERSIONS[$key-1]}"
                            cleanup_and_fix_alternatives afterwards  # repair broken alternatives, remove not existing alternatives
                            mapfile -t selections< <(update-alternatives --get-selections | grep -E "ph(ar|p)")
                            o3;dY;echo "alternatives system is now switch to:";N
                            f
                            for i in ${!selections[@]}; do
                                o3;pf;echo "$(lG)${selections[i]}";N
                            done
                            f
                            Y;echo "  $(format_string "Please consider: $(dY)if some alternatives listed here are not in the expected php version, then the package that provides those binaries may not be installed in that version." 3)"
                            f
                            anykey
                            separator
                            switch_fpm_version ${VERSIONS[$key-1]}
                            switch_a2module_version ${VERSIONS[$key-1]}
                            f
                            o3;N;echo "You should once more run"
                            f;G;echo "$(prompt;lB) $me$forceflag$(C) --list-installed";N
                            f;o2;echo "$(format_string ".. until the end (do not quit in between), not only to look if the switch worked but to scan once more for possible configuration errors from the point of view of the new version. If everything looks good and is working well, considder to completely remove the old php version." 3)"
                            break
                        fi
            esac
        done
        donate_
    }

# TODO 8 -->
    switch_webserver_version(){
        bundle echo "  $(format_string "In the subsequent next step you can switch your webserver to listen to the new php version. In some rare special cases, this step may fail though. You will have to fix it yourself then, by editing the config files of your webserver, to make it listen to the new php socket." 3;N)"
        local webserver
#        populate_httpd_ enabled
#        populate_httpd_ active
        populate_wk_httpd_ enabled
        populate_wk_httpd_ active
        if (( ${#WK_HTTPD_ENABLED[@]} >= 1 && ${#WK_HTTPD_ACTIVE[@]} == 1 )) && [[ "${WK_HTTPD_ENABLED[@]}" =~ ${WK_HTTPD_ACTIVE[0]} ]]; then
            webserver="${WK_HTTPD_ACTIVE[0]}"
            if (( ${#WK_HTTPD_ENABLED[@]} == 1 )); then
                infostring="The only detected httpd (webserver) on this machine is $(C)$webserver$(N)"
            elif (( ${#WK_HTTPD_ENABLED[@]} > 1 )); then
                modstring="$(listify B ${WK_HTTPD_ENABLED[@]})"
                infostring="There are multiple httpds (webservers) ($modstring) detected on this machine but only $(C)$webserver$(N) seems to be active."
            fi
        fi
        case $webserver in
           apache2) o3;bundle echo "$infostring"
                    apache2_mpm event || return         # this is only for version switch, the modules must already be loaded
                    apache2_module proxy_fcgi || return # "
                    apache2_module setenvif || return   # "
                    ;;
             nginx) o3;bundle echo "$infostring"
                    ;;
                 *) o3;bundle echo "$infostring"
                    o3;Pbg;bundle echo " - This script can not (yet) switch the php version for this httpd. $(N)"
                    o3;bundle echo " -$(format_string "$(P)Please give me feedback on the way php is integrated into this web server so that I can add support for ${webserver:-this webserver} in future versions of this script." 6;N)"
                    exit0
        esac
    }
# TODO <-- 8
}

__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${INP_BASHLIB:-_} && return
INP_BASHLIB=:

. <(lrequire spinner)
. <(lrequire fstring)
. <(lrequire dpkg)
. <(lrequire php/extensions)
. <(lrequire php-updater/pdiff)

install_new_php(){
    local old new package sapi
    local -a packages sapi_packages # sapi_not
    old="$1" new="$2"
    apt_need_update
# TODO 0 -->
    if [[ ! libapache2-mod-php$old && ! php$old-fpm ]]; then
        There is no sapi installed for php$old to communicate with your webserver.. Transfering the settings from that incomplete version would result in a php$new without connection to your webserver either. You must Choose an other version as $old or first install the sapi of your choice.
    fi
# TODO <-- 0

    if q0 apt-cache show php$new; then
        separator
# TODO 1 -->
        # update first?
        f
        echo "$(pf; format_string "An update is not recommended at this point but possible. However, if you answer $(box yes) here, all PHP related packages will be marked 'hold' to remain the initial php-situation unchanged." 3)"
        if ask "$(qpf)Do you want to update the system first " "$NO"; then
            q0 ${X[apt-mark]} hold $(${X[dpkg]} -l | ${X[gawk]} '/^[hiu]i.*php*/{print $2}') # hold php as it is for this step.
            ${X[apt-get]} dist-upgrade
            pf; echo "$(lG)system updated$(N)"
            anykey
        fi
# TODO <-- 1
        detect_and_assign_extensions
        search_candidates_4_extensions_installed_by_admin $old
        spinner C " . performing thorough review (dry run) of package sources and for candidate availability ." &
        mapfile -t packages< <(packages_diff $old $new)
        mapfile -t sapi_packages< <(for sapi in $(${X[comm]} -23 <(p_sort $(${X[phpquery]} -v $old -S)) <(p_sort $(${X[phpquery]} -v $new -S))); do echo "${SAPIS[$sapi]/@VER@/$new}"; done)
# TODO 2 -->
        mapfile -t sapi_not< <(for sapi in $(${X[comm]} -23 <(p_sort ${!SAPIS[@]}) <(p_sort $(${X[phpquery]} -v $old -S))); do echo "${SAPIS[$sapi]/@VER@/$new}"; done)
# TODO <-- 2
        q0 ${X[apt-mark]} unhold *php*
        [ -z "${X[needrestart]}" ] || export NEEDRESTART_SUSPEND=1
        kill_spinner
        if ((${#sapi_packages[@]})) || ((${#packages[@]})); then
            apt_install_prechecked --yes ${sapi_packages[@]} ${packages[@]}
        fi
# TODO 3 -->
        if ((${#sapi_not[@]})); then
            apt_remove --yes ${sapi_not[@]}
        fi
# TODO <-- 3
        [ -z "${X[needrestart]}" ] || ${X[needrestart]} -r a
    else f
        no_candidate "$new"
        exit1
    fi
    separator
    f
    echo "$(pf; format_string "$(P)If everything looks good so far, the migration of the settings from $(B)php-$(C)$old$(P) to $(B)php-$(C)$new$(P) can be started. If you answer $(box no) here or abort the migration process on some point $(GRAY)(with Ctrl-C)$(P), you can always call and start this step again with" 3)"
    f
    echo "$(G; prompt; B) $ME${FLAG[forceflag]} $(C)$old $new"; N
    f
    o3; P; echo "to finalize or redo the migration."; N
    f
    echo "$(pf; format_string "$(P)Please be aware that a malicious configuration under $(B)php-$(C)$old$(P) will also be migrated. This script does not yet check for all thinkable wrong configurations. This will change step by step in future." 3; N)"
    if ask "$(qpf)Proceed with next step" "$YES"; then
        separator
        exec "$ME${FLAG[forceflag]}" "json=${J[o]}" $old $new
    else
        exit0
    fi
}

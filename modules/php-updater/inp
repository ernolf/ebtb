__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${INP_BASHLIB:-false} && return
INP_BASHLIB=:

. <(lrequire line)
. <(lrequire spinner)
. <(lrequire fstring)
. <(lrequire dpkg)
. <(lrequire ask)
. <(lrequire php/extensions)
. <(lrequire $sin/pdiff)

install_new_php(){
    local old new package sapi
    local -a packages sapi_packages sapi_not
    old="$1" new="$2"
    apt_need_update
    if apt-cache show php$new &>/dev/null; then
        separator
# TODO 0 -->
        # update first?
        f; echo " -$(format_string "An update is not recommended at this point but possible. However, if you answer $(box yes) here, all PHP related packages will be marked 'hold' to remain the initial php-situation unchanged." 3)"
        if ask "$(qpf)Do you want to update the system first " "$NO"; then
            apt-mark hold $(dpkg -l|awk '/^[hiu]i.*php*/{print $2}') &>/dev/null # hold php as it is for this step.
            apt-get dist-upgrade
            pf; echo "$(lG)system updated$(N)"
            anykey
        fi
# TODO <-- 0
        detect_and_assign_extensions
        search_candidates_4_extensions_installed_by_admin $old
        spinner C " . performing thorough review (dry run) of package sources and candidate availability ." &
        mapfile -t packages< <(packages_diff $old $new)
        mapfile -t sapi_packages< <(for sapi in $(comm -23 <(p_sort $(phpquery -v $old -S)) <(p_sort $(phpquery -v $new -S))); do echo "${SAPIS[$sapi]/@VER@/$new}"; done)
        mapfile -t sapi_not< <(for sapi in $(comm -23 <(p_sort ${!SAPIS[@]}) <(p_sort $(phpquery -v $old -S))); do echo "${SAPIS[$sapi]/@VER@/$new}"; done)
        apt-mark unhold *php* &>/dev/null
        command -v needrestart >/dev/null&&export NEEDRESTART_SUSPEND=1
        kill_spinner
        if ((${#sapi_packages[@]})) || ((${#packages[@]})); then
            apt_install_prechecked --yes ${sapi_packages[@]} ${packages[@]}
        fi
        if ((${#sapi_not[@]})); then
            apt_purge --yes ${sapi_not[@]}
        fi
        command -v needrestart >/dev/null&&needrestart -r a
    else f
        no_candidate "$new"
        exit1
    fi
    populate_versions_array
    separator
    f; echo " -$(format_string "$(P)If everything looks good so far, the migration of the settings from $(C)php-$old$(P) to $(C)php-$new$(P) can be started. If you answer $(box no) here or abort the migration process on some point $(GRAY)(with Ctrl-C)$(P), you can always call and start this step again with" 3)"
    f; G; echo "$(prompt; lB) $me${FLAG[forceflag]}$(C) $old $new"; N
    f; os; P; echo "to finalize or redo the migration."; N
    f; echo " -$(format_string "$(P)Please be aware that a malicious configuration under $(C)php-$old$(P) will also be migrated. This script does not yet check for all thinkable wrong configurations. This will change step by step in future." 3; N)"
    ask "$(qpf)Proceed with next step" "$YES"&&{ separator; "$me${FLAG[forceflag]}" "json=$my_json" $old $new; exit; }||exit0
}

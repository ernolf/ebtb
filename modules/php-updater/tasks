__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${TASKS_BASHLIB:-false} && return 0 || {
    TASKS_BASHLIB=:

    . <(require basics)
    . <(require sed)
    . <(require ansi)
    . <(require button)
    . <(require fstring)
    . <(require exit)
    . <(require spinner)
    . <(require anykey)
    . <(require line)
    . <(require array)
    . <(require ask)
    . <(require dpkg)
    . <(require php/versions)
    . <(require php/extensions)
    . <(require php/apache2)
    . <(require php/fpm)
    . <(require $sin/merge)

    replace_aim(){ # replace admin installed modules
        replace_(){
            local ini_dir mod
            if [ "$(pecl list)" = '(no packages installed from channel pecl.php.net)' ] && ((imb)); then
                if $pmb; then
                    for i in ${!mods[@]}; do
                        ver=${mods[i]#*php}
                        ver=${ver%)}
                        mod=${mods[i]%(*}
                        php-module-builder $ver $mod --remove --force --quiet
                        ext_state purge $mod $ver
                    done
                fi
            else
                ini_dir="/etc/php/$PHP_VERSION/mods-available"
                pecl uninstall ${mods[@]%(*}
                for mod in ${mods[@]%(*}; do
                    pecl uninstall $mod # for the sake of stability, if something went wrong 2 lines before
                    phpdismod -p -v $PHP_VERSION -s ALL $mod
                    ext_state purge $mod $ver
                    rm -f "$ini_dir/$mod.ini"
                done
            fi
            anykey
            ext_state cleanup
            ext_state fix
            apt_install_prechecked --yes ${pakages[@]}
        }
        if command -v pecl >/dev/null; then
            local pmb ver module pakage pkgmod modstring serializers compression replaced
            local -i iam imb pecli=0
            local -a ibymb pkgmods mods pakages
            replaced=false
            for pv in ${VERSIONS[@]}; do
                eval iam+=\${#C4EIBY4_${pv//./}[@]}
            done
            command -v php-module-builder >/dev/null&&pmb=true||pmb=false
            mapfile -t ibymb< <(grep -lr "module built by php-module-builder" /etc/php/)
            imb=${#ibymb[@]}
            if (( iam )); then
                if [ "$(pecl list)" = '(no packages installed from channel pecl.php.net)' ]; then
                    spinner C " . search packages for modules installed by the php-module-builder script ." &
                    if ((imb)); then
                        for inifile in ${ibymb[@]}; do
                            ver=${inifile#/etc/php/}
                            ver=${ver%%/*}
                            module=$(basename ${inifile%.ini})
                            pakage="php$ver-$module"
                            if apt_exist "$pakage"; then ((pecli++))
                                pakages+=("$pakage")
                                mods+=("$(awk 'NR==1 {print $3}' $inifile)(php$ver)")
                            fi
                        done
                    fi
                    kill_spinner
                else
                    for i in $(eval echo \${!C4EIBY4_${PHP_VERSION//./}[@]}); do
                        pkgmod="$(eval echo \"\${C4EIBY4_${PHP_VERSION//./}[i]}\")"
                        if (( $(pecl list | grep -wc "${pkgmod#*:}") )); then
                            (( pecli++ ))
                            pakages+=("${pkgmod%:*}")
                            mods+=("${pkgmod#*:}(php$PHP_VERSION)")
                        fi
                    done
                fi
            fi
            if (( pecli )); then
                if ((pecli==1)); then
                    plu='' modstring="$(B)${mods[0]}$(N)"
                else
                    plu='s' modstring=$(listify B ${mods[@]})
                fi
                if [[ "${mods[@]}" =~ redis ]]; then
                    serializers="$(php -i | grep "Available serializers" | sed 's/.*=> //;s/,//g')"
                    compression="$(php -i | grep "Available compression" | sed 's/.*=> //;s/,//g')"
                    if [[ ! "$serializers" =~ igbinary ]] && [ -z "$compression" ]; then
                        echo " -$(format_string "$(Y)The actually installed $(C)redis$(Y) module was poorly built without enabled igbinary serializer support and without any compression ($(dY)lzf, zstd, and/or lz4$(Y)) support enabled, which results in a loss of performance." 3;N)"
                    fi
                fi
                echo "  $(format_string "The php module$plu $modstring can be replaced by this script. You can answer $(box no) here, but then you may be confronted with some error messages after the upgrade while migrating the settings." 3)"
                ask "$(qpf)Do you want to replace $modstring now" "$YES" && { replaced=true;replace_;}
                separator
            fi
        fi
        $replaced && "$me$forceflag" "json=$my_json" --list-installed
    }

    remove_unused_sapis(){
        spinner C " . searching for possible tasks to be executed ." &
        populate_pkgs_by_dpkg_array
        if $(is_sapi_true_ cgi) || $(is_sapi_true_ embed) || $(is_sapi_true_ phpdbg); then
            local unused_sapi
            local -a unused_sapis packages_2_purge
            for unused_sapi in cgi embed phpdbg;do
                if $(is_sapi_true_ $unused_sapi); then
                    unused_sapis+=("$unused_sapi")
                    packages_2_purge+=("$(a_fld SAPIS : $unused_sapi 2 | sed 's/@VER@/*/')")
                fi
            done
            if (( ${#unused_sapis[@]} == 1 )); then
                plu='is:' infostring="is a $(B)${unused_sapis[0]}$(N)"
            else
                plu='ese:s' infostring="are $(listify B ${unused_sapis[@]})"
            fi
            kill_spinner
            echo " -$(format_string "There $infostring SAPI${plu#*:} installed on this machine. In most cases, these SAPIs are installed because of wrong installation order at first installation of PHP. There is not a single use case that requires th${plu%:*} SAPI${plu#*:} to operate an application like Netxcloud. $(Y)Consider removing th${plu%:*} unnecessary SAPI${plu#*:}." 3;N)"
            echo " -$(format_string "This script can remove th${plu%:*} package${plu#*:} in a safe way." 3)"
            if ask "$(qpf)Do you want to remove (purge) th${plu%:*} unnecessary SAPI${plu#*:} now" "$YES"; then
                apt_purge ${packages_2_purge[@]}
                "$me$forceflag" "json=$my_json" --list-installed
                return 0
            else
                return 1
            fi
        else
            kill_spinner
            return 1
        fi
    }

    remove_dependency_packages(){
        spinner C " . searching for possible tasks to be executed ." &
        populate_pkgs_by_dpkg_array
        mapfile -t DEPENDENCY_PKGS< <(comm -12 <(p_sort_trim ${DEPENDENCY_PKGS[@]}) <(p_sort_trim ${PKGS_BY_DPKG[@]%%/*}))
        if (( ${#DEPENDENCY_PKGS[@]} )); then
            if ((${#DEPENDENCY_PKGS[@]}==1)); then
                plu='' this='that' modstring="$(B)${DEPENDENCY_PKGS[0]}$(N)"
            else
                plu='s' this='those' modstring="$(listify B ${DEPENDENCY_PKGS[@]})"
            fi
            question="Q:$(format_string "Do you want to remove the dependency package$plu $modstring now" 3)"
            kill_spinner
            f;echo " -$(format_string "$(Y)Consider removing the above listed dependency package$plu $modstring $(Y)before updating. The removal of $this package$plu is safe and makes your system more resilient against changes made without your decision." 3;N)"
            f;echo " -$(format_string "This script can remove $this package$plu in a safe way." 3)"
            if ask "$question" "$YES"; then
                apt_remove --yes ${DEPENDENCY_PKGS[@]}
                "$me$forceflag" "json=$my_json" --list-installed
                return 0
            else
                return 1
            fi
        else
            kill_spinner
            return 1
        fi
    }

    remove_meta_packages(){
        spinner C " . searching for possible tasks to be executed ." &
        populate_pkgs_by_dpkg_array
        mapfile -t META_PKGS< <(comm -12 <(p_sort_trim ${META_PKGS[@]}) <(p_sort_trim ${PKGS_BY_DPKG[@]%%/*}))
        if (( ${#META_PKGS[@]} )); then
            if ((${#META_PKGS[@]}==1)); then
                plu='' this='that' modstring="$(B)${META_PKGS[0]}$(N)"
            else
                plu='s' this='those' modstring="$(listify B ${META_PKGS[@]})"
            fi
            question="Q:$(format_string "Do you want to remove the meta package$plu $modstring now" 3)"
            kill_spinner
            f;echo " -$(format_string "$(Y)Consider removing the above listed meta package$plu $modstring $(Y)before updating. The removal of $this package$plu is safe and makes your system more resilient against changes made without your decision." 3;N)"
            f;echo " -$(format_string "This script can remove $this package$plu in a safe way." 3)"
            if ask "$question" "$YES"; then
                apt_remove --yes ${META_PKGS[@]}
                "$me$forceflag" "json=$my_json" --list-installed
                return 0
            else
                return 1
            fi
        else
            kill_spinner
            return 1
        fi
    }

    change_sapi(){
        spinner C " . searching for possible tasks to be executed ." &
        populate_pkgs_by_dpkg_array
        if $(is_sapi_true_ a2) && $(is_sapi_true_ fpm); then
            echo " -$(format_string "There are $(B)apache2handler$(N) and $(B)fpm$(N) SAPIs installed on this machine but they are mutually exclusive." 3)"
            [[ "${SAPI_A2[@]}" =~ a ]] && active_sapi="a2"
            [[ "${SAPI_FPM[@]}" =~ a ]] && { [ "$active_sapi" = "a2" ] && active_sapi="both" || active_sapi="fpm";}
            populate_httpd_ known
            populate_httpd_ active
            if (( ${#HTTPD_KNOWN[@]} >= 1 && ${#HTTPD_ACTIVE[@]} == 1 )) && [[ "${HTTPD_KNOWN[@]}" =~ ${HTTPD_ACTIVE[0]} ]]; then
                webserver="${HTTPD_ACTIVE[0]}"
                if (( ${#HTTPD_KNOWN[@]} == 1 )); then
                    infostring="The only detected httpd (webserver) on this machine is $(C)$webserver$(N)"
                elif (( ${#HTTPD_KNOWN[@]} > 1 )); then
                    modstring="$(listify B ${HTTPD_KNOWN[@]})"
                    infostring="There are multiple httpds (webservers) ($modstring) detected on this machine but only $(C)$webserver$(N) seems to be active."
                fi
            fi
            case $webserver in
                apache2)
                    case $active_sapi in
                        a2) active_a2_version="$(for pv in ${!SAPI_A2[@]}; do [ "${SAPI_A2[$pv]}" = 'a' ]&&break;done;echo "$pv")"
                            active_a2_pkg="libapache2-mod-php$active_a2_version"
                            read_prompt="$(os;C)press $(button 1), $(button 2), $(button 3) or $(button q) to leave it unchanged$(N)"
                            kill_spinner
                            echo " -$(format_string "$infostring and the '$(dY)apache2handler SAPI$(N)' $(B)$active_a2_pkg$(N) is connected to it while the '$(dY)fast process manager SAPI$(N)' $(B)php-fpm$(N) seems to be inactive." 3)"
                            pf;Y;echo "Consider to either:"
                            f;o 10;echo "$(button 1) - completely remove php*-fpm"
                            f;o 10;echo "$(button 2) - switch apache2 from libapache2-mod-php to php*-fpm (recommended)"
                            f;o 10;echo "$(button 3) - switch apache2 from libapache2-mod-php to php*-fpm and completely remove libapache2-mod-php*"
                            f;o 10;echo "$(button q) - do nothing, leave this unchanged"
                            cursor_ hide
                            N;f;while :;do read -rsn 1 -p "$read_prompt" key
                                case $key in
                                    q)  cursor_ show
                                        f 2;break
                                        ;;
                                    1)  cursor_ show
                                        f
                                        apt_remove 'php*-fpm'
                                        "$me$forceflag" "json=$my_json" --list-installed
                                        return 0
                                        ;;
                                    2)  cursor_ show
                                        f
                                        php_a2module_2_fpm "$PHP_VERSION"
                                        systemctl restart apache2 php$PHP_VERSION-fpm
                                        "$me$forceflag" "json=$my_json" --list-installed
                                        return 0
                                        ;;
                                    3)  cursor_ show
                                        f
                                        php_a2module_2_fpm "$PHP_VERSION"
                                        systemctl restart apache2 php$PHP_VERSION-fpm
                                        apt_remove 'libapache2-mod-php*'
                                        "$me$forceflag" "json=$my_json" --list-installed
                                        return 0
                                esac
                            done
                            ;;
                       fpm) active_fpm_version="$(for pv in ${!SAPI_FPM[@]}; do [ "${SAPI_FPM[$pv]}" = 'a' ]&&break;done;echo "$pv")"
                            active_fpm_pkg="php$active_fpm_version-fpm"
                            read_prompt="$(os;C)press $(button 1), $(button 2), $(button 3) or $(button q) to leave it unchanged$(N)"
                            kill_spinner
                            echo " -$(format_string "$infostring and the '$(dY)fast process manager SAPI$(N)' $(B)$active_fpm_pkg$(N) is connected to it while the '$(dY)apache2handler SAPI$(N)' $(B)libapache2-mod-php$(N) seems to be inactive." 3)"
                            pf;Y;echo "Consider to either:"
                            f;o 10;echo "$(button 1) - completely remove libapache2-mod-php* (recommended)"
                            f;o 10;echo "$(button 2) - switch apache2 from php*-fpm to libapache2-mod-php"
                            f;o 10;echo "$(button 3) - switch apache2 from php*-fpm to libapache2-mod-php and completely remove php*-fpm"
                            f;o 10;echo "$(button q) - do nothing, leave this unchanged"
                            cursor_ hide
                            N;f;while :;do read -rsn 1 -p "$read_prompt" key
                                case $key in
                                    q)  cursor_ show
                                        f 2;break
                                        ;;
                                    1)  cursor_ show
                                        f
                                        apt_remove 'libapache2-mod-php*'
                                        "$me$forceflag" "json=$my_json" --list-installed
                                        return 0
                                        ;;
                                    2)  cursor_ show
                                        f
                                        php_fpm_2_a2module $PHP_VERSION
                                        systemctl restart apache2
                                        "$me$forceflag" "json=$my_json" --list-installed
                                        return 0
                                        ;;
                                    3)  cursor_ show
                                        f
                                        php_fpm_2_a2module $PHP_VERSION
                                        systemctl restart apache2
                                        apt_remove 'php*-fpm'
                                        "$me$forceflag" "json=$my_json" --list-installed
                                        return 0
                                esac
                            done
                            ;;
                      both) active_a2_version="$(for pv in ${!SAPI_A2[@]}; do [ "${SAPI_A2[$pv]}" = 'a' ]&&break;done;echo "$pv")"
                            active_a2_pkg="libapache2-mod-php$active_a2_version"
                            active_fpm_version="$(for pv in ${!SAPI_FPM[@]}; do [ "${SAPI_FPM[$pv]}" = 'a' ]&&break;done;echo "$pv")"
                            active_fpm_pkg="php$active_fpm_version-fpm"
                            read_prompt="$(os;C)press $(button 1), $(button 2), $(button 3), $(button 4) or $(button q) to leave it unchanged$(N)"
                            kill_spinner
                            echo " -$(format_string "$infostring and it looks like both, the '$(dY)apache2handler SAPI$(N)' $(B)$active_a2_pkg$(N) and the '$(dY)fast process manager SAPI$(N)' $(B)$active_fpm_pkg$(N) are connected to it. $(R)This is a serious misconfiguration that needs to be fixed$(N)." 3)"
                            pf;Y;echo "Consider to either:"
                            f;o 10;echo "$(button 1) - disconnect apache2 from libapache2-mod-php (recommended)"
                            f;o 10;echo "$(button 2) - disconnect apache2 from libapache2-mod-php and completely remove libapache2-mod-php*"
                            f;o 10;echo "$(button 3) - disconnect apache2 from php*-fpm"
                            f;o 10;echo "$(button 4) - disconnect apache2 from php*-fpm and completely remove php*-fpm"
                            f;o 10;echo "$(button q) - do nothing, leave this unchanged"
                            cursor_ hide
                            N;f;while :;do read -rsn 1 -p "$read_prompt " key
                                case $key in
                                    q)  cursor_ show
                                        f 2;break
                                        ;;
                                    1)  cursor_ show
                                        f
                                        php_a2module_ disable
                                        php_fpm_module_ enable
                                        systemctl restart apache2 php$active_fpm_version-fpm
                                        "$me$forceflag" "json=$my_json" --list-installed
                                        return 0
                                        ;;
                                    2)  cursor_ show
                                        f
                                        php_a2module_ disable
                                        php_fpm_module_ enable
                                        systemctl restart apache2 php$active_fpm_version-fpm
                                        apt_remove 'libapache2-mod-php*'
                                        "$me$forceflag" "json=$my_json" --list-installed
                                        return 0
                                        ;;
                                    3)  cursor_ show
                                        f
                                        php_fpm_2_a2module $PHP_VERSION
                                        systemctl restart apache2
                                        "$me$forceflag" "json=$my_json" --list-installed
                                        return 0
                                        ;;
                                    4)  cursor_ show
                                        f
                                        php_fpm_2_a2module $PHP_VERSION
                                        systemctl restart apache2
                                        apt_remove 'php*-fpm'
                                        "$me$forceflag" "json=$my_json" --list-installed
                                        return 0
                                esac
                            done
                    esac
                    ;;
                nginx)
                    kill_spinner
                    pf;N;echo "Consider removing the apache2-mod-php SAPI (recommended)";N
                    if ask "$(qpf)Do you want to remove (purge) apache2-mod-php now" "$YES"; then
                        apt_purge 'libapache2-mod-php*'
                        "$me$forceflag" "json=$my_json" --list-installed
                        return 0
                    fi
                    ;;
                *)  kill_spinner
            esac
            return 1
        else
            kill_spinner
            return 1
        fi
    }

    ini_directive_detect(){
        local ver ini_directive result
        ver="$1" ini_directive="$2"
        find "/etc/php/$ver" -name "*.ini" ! -type l | while read -r file; do
            if result="$(stripconf "$file" | grep "$ini_directive")"; then
                echo "$file:$result"
            fi
        done
    }

    ext_config_fix(){
        local ver ext ext_ini xtmp itmp must_be_fixed_message should_be_fixed_message good_to_be_fixed_message pattern sapi php_inis php_ini line plu be ini_string ini_string_ php_ini_dpkg key val basic_infostring infostring oldstring optionblock optionblock_r optionblock_sorted optionblock_rsorted
        local -a lines inifiles inifiles1_ inifiles2_
        local -i i
        ver="$1" ext="$2"
        ext_ini="/etc/php/$ver/mods-available/$ext.ini"
        [ -f "$ext_ini" ] || return
        xtmp=$(tf) itmp=$(tf)
        if [ "$OLD" = "$ver" ] && [[ "$NEW" ]]; then
            must_be_fixed_message="This errors must be fixed before this script can migrate the settings from $(C)php-$OLD$(P) to $(C)php-$NEW$(P). You can answer $(box no) here but then the script will not continue, since it would multiply errors and various strange behaviour could arrise."
            should_be_fixed_message="This should be fixed before this script migrates the settings from $(C)php-$OLD$(P) to $(C)php-$NEW$(P). You can answer $(box no) here to leave it unchanged but then it will be migrated as well."
            good_to_be_fixed_message="This is not an error but about a possible optimization that is missing which you can add, before updating from $(C)php-$OLD$(P) to $(C)php-$NEW$(P). You can answer $(box no) here to leave it unchanged but then it will miss in the new version as well."
        else
            must_be_fixed_message="This errors must be fixed before this script can migrate the settings from $(C)php$ver$(P) to an other php version. You can answer $(box no) here but then the script cannot upgrade from this version, since it would multiply errors and various strange behaviour could arrise."
            should_be_fixed_message="This should be fixed in the configuration of $(C)php$ver$(P)."
            good_to_be_fixed_message="This is not an error but about a possible optimization that is missing in the configuration of $(C)php$ver$(P) which you can add."
        fi
        # get rid of double extension loaders
        pattern="^\s*(zend_)?extension\s*=\s*$ext.*$"
        for sapi in $(phpquery -v $ver -S); do
            if [ -f "/etc/php/$ver/$sapi/php.ini" ]; then
                php_inis+=" /etc/php/$ver/$sapi/php.ini"
            fi
        done
        mapfile -t inifiles< <(grep -Eslix "$pattern" $php_inis)
        if (( ${#inifiles[@]} )); then
            line=$(grep -Eix "$pattern" ${inifiles[0]})
            if (( ${#inifiles[@]} == 1 )); then
                plu='' be=is ini_string_="$(C)${inifiles[0]}$(O)" ini_string="$(C)${inifiles[0]}$(W)"
            else
                plu='es' be=are ini_string_=$(listify_ C O ${inifiles[@]}) ini_string=$(listify_ C W ${inifiles[@]})
            fi
            echo -e "\n   - $(O)Malicious configuration line in $ini_string_:" >> $itmp
            infostring="This extension (module) is already loaded in $(C)$ext_ini$(W) and does therefore not belong in $(C)$ini_string$(W) so this line will be removed from  $(C)$ini_string$(W)."
            echo -e "\n$(R)$line$(N)" >> $itmp
            C;echo "info$(N):$(W;format_string "$infostring" 6;N)" >> $itmp
            for i in ${!inifiles[@]}; do
                line=$(grep -Eix "$pattern" ${inifiles[i]})
                echo "sed -i '/^$line$/d' '${inifiles[i]}'" >> $xtmp
            done
            if (( $(wc -c "$xtmp"|awk '{print$1}') )); then
                kill_spinner
                separator
                cat "$itmp"
                f
                if ask "$(qpf)Do you want to execute this fix$plu" $YES;then
                    . $xtmp
                    if grep -Eqslix "$pattern" $php_inis; then
                        echo "R: $(R)removal from ${inifiles[@]} failed.$(N)"
                    else
                        echo "R: $(lG)removal from ${inifiles[@]} was successfull.$(N)"
                    fi
                else
                    echo "R: $(R)you answered $(box no), nothing changed.$(N)"
                fi
                anykey
                spinner C " . ext_config_fix() searching known configuration errors in php$ver ." &
            fi
        fi
        case $ext in
            redis)
                local -a sessionsavehandler
                mapfile -t sessionsavehandler< <(ini_directive_detect "$ver" "session.save_handler")
                if (( ${#sessionsavehandler[@]} )); then
                    for i in ${!sessionsavehandler[@]}; do
                        if [[ "$(key_ val ${sessionsavehandler[i]##*:})" == "redis" &&
                              "${sessionsavehandler[i]%%:*}" == "/etc/php/$ver/mods-available/redis.ini" ]]; then

                        echo -n > $xtmp; echo -n > $itmp
                        basic_infostring="The redis module is installed on this server and if you want to use redis for session management, these directives should be added. The best place for this directives is $(C)$ext_ini$(W)"
                        optionblock="redis.session.locking_enabled=1\nredis.session.lock_wait_time=10000\nredis.session.lock_retries=-1"
                        optionblock_r="redis.session.lock_retries=-1\nredis.session.lock_wait_time=10000\nredis.session.locking_enabled=1"
                        optionblock_sorted="redis.session.locking_enabled=1\nredis.session.lock_retries=-1\nredis.session.lock_wait_time=10000"
                        optionblock_rsorted="redis.session.lock_wait_time=10000\nredis.session.lock_retries=-1\nredis.session.locking_enabled=1"
                        pattern='redis\.session\.lock'
                        if ! p_sort "$(stripconf "$ext_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock" &&
                           ! p_sort "$(stripconf "$ext_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock_r" &&
                           ! p_sort "$(stripconf "$ext_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock_sorted" &&
                           ! p_sort "$(stripconf "$ext_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock_rsorted"; then
                            for sapi in $(phpquery -v $ver -S); do
                                php_ini="/etc/php/$ver/$sapi/php.ini"
                                if [ -f "$php_ini" ]; then
                                    if p_sort "$(stripconf "$php_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock" ||
                                       p_sort "$(stripconf "$php_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock_r" ||
                                       p_sort "$(stripconf "$php_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock_sorted" ||
                                       p_sort "$(stripconf "$php_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock_rsorted"; then
                                        inifiles1_+=("$php_ini")
                                    else
                                        inifiles2_+=("$php_ini")
                                    fi
                                fi
                            done
                            if (( ${#inifiles1_[@]} == 0 )); then
                                echo -e "\n -$(P;format_string "$good_to_be_fixed_message" 3;N)" > $itmp
                                echo -e "\n   - $(O)Missing directives for redis session management feature in php$ver configuration:" >> $itmp
                                infostring="$basic_infostring."
                                echo -e "\n$(R)$optionblock$(N)" >> $itmp
                                C;echo "info$(N):$(W;format_string "$infostring" 6;N)" >> $itmp
                                echo "echo -e '$optionblock' >> $ext_ini" >> $xtmp
                            elif (( ${#inifiles2_[@]} )); then
                                if (( ${#inifiles1_[@]} == 1 )); then
                                    ini_string="$(C)${inifiles1_[0]}$(W)"
                                else
                                    ini_string=$(listify_ C W ${inifiles1_[@]})
                                fi
                                echo -e "\n -$(P;format_string "$good_to_be_fixed_message" 3;N)" > $itmp
                                echo -e "\n   - $(O)(Partially) missing directives for redis session management feature:" >> $itmp
                                infostring="$basic_infostring but it is only located in $ini_string. So this lines will be removed from there and appended to $(C)$ext_ini$(W) to make it available to all SAPIs."
                                echo -e "\n$(R)$optionblock$(N)" >> $itmp
                                C;echo "info$(N):$(W;format_string "$infostring" 6;N)" >> $itmp
                                for i in ${!inifiles1_[@]}; do
                                    echo "sed -i '/$pattern/d' '${inifiles1_[i]}'" >> $xtmp
                                done
                                echo "echo -e '$optionblock' >> $ext_ini" >> $xtmp
                            fi
                        fi
                        if (( $(wc -c "$xtmp"|awk '{print$1}') )); then
                            kill_spinner
                            separator
                            cat "$itmp"
                            f
                            if ask "$(qpf)Do you want to apply this directives as suggested" $YES;then
                                . $xtmp
                                if p_sort "$(stripconf "$ext_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock" ||
                                   p_sort "$(stripconf "$ext_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock_r" ||
                                   p_sort "$(stripconf "$ext_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock_sorted" ||
                                   p_sort "$(stripconf "$ext_ini"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock_rsorted"; then
                                    echo "R: $(lG)Directives successfully written in $ext_ini.$(N)"
                                    for i in ${!inifiles1_[@]}; do
                                        if p_sort "$(stripconf "${inifiles1_[i]}"|sed -n "/$pattern/{s/\s*=/=/;s/=\s*/=/p}")"|grep -qsPzw "$optionblock"; then
                                            echo "R: $(R)removal from ${inifiles1_[i]} failed.$(N)"
                                        else
                                            echo "R: $(lG)removal from ${inifiles1_[i]} was successfull.$(N)"
                                        fi
                                    done
                                else
                                    echo "R: $(R)this step failed.$(N)"
                                fi
                            else
                                echo "R: $(R)you answered $(box no), nothing changed.$(N)"
                            fi
                            anykey
                        fi

                        break
                        fi
                    done
                fi
                ;;
            opcache)
                echo -n > $xtmp; echo -n > $itmp
                echo -e "\n -$(P;format_string "$should_be_fixed_message" 3;N)" > $itmp
                pattern='^\s*opcache.enable_cli\s*=\s*(on|1)\s*$' php_inis=''
                for sapi in $(phpquery -v $ver -S); do
                    if [[ "$sapi" != 'cli' && -f "/etc/php/$ver/$sapi/php.ini" ]]; then
                        php_inis+=" /etc/php/$ver/$sapi/php.ini"
                    fi
                done
                [ -f "${php_inis%% *}" ] || return
                mapfile -t inifiles1_< <(grep -Eslix "$pattern" $php_inis)
                if (( ${#inifiles1_[@]} )); then
                    line=$(grep -Eix "$pattern" ${inifiles1_[0]})
                    if (( ${#inifiles1_[@]} == 1 )); then
                        plu='' be=is ini_string_="$(C)${inifiles1_[0]}$(O)" ini_string="$(C)${inifiles1_[0]}$(W)"
                    else
                        plu='s' be=are ini_string_=$(listify_ C O ${inifiles1_[@]}) ini_string=$(listify_ C W ${inifiles1_[@]})
                    fi
                    echo -e "\n   - $(O)Malicious configuration line in $ini_string_:" >> $itmp
                    if (( $(grep -Exi "$pattern" "$ext_ini" "/etc/php/$ver/cli/php.ini"|wc -l) == 0 )); then
                        infostring="This directive has absolutely no effect in $ini_string. It is meant to enable the opcode cache for the CLI version of PHP (which is used on the commandline and for cron jobs). For all other SAPIs the opcode cache is enabled by default. Although it cannot cause any damage at this location$plu, this file$plu $be not sourced by the CLI version of PHP and in $(C)$ext_ini$(W) or $(C)/etc/php/$ver/cli/php.ini$(W) from where the CLI SAPI obtains its directives, this directive is missing. So this line will be removed from here and inserted into $(C)/etc/php/$ver/cli/php.ini$(W)."
                        echo -e "\n$(R)$line$(N)" >> $itmp
                        C;echo "info$(N):$(W;format_string "$infostring" 6;N)" >> $itmp
                        for i in ${!inifiles1_[@]}; do
                            line=$(grep -Eix "$pattern" ${inifiles1_[i]})
                            echo "sed -i '/^$line$/d' '${inifiles1_[i]}'" >> $xtmp
                        done
                        echo "echo 'opcache.enable_cli=1' >> /etc/php/$ver/cli/php.ini" >> $xtmp
                    fi
                fi
                if (( $(wc -c "$xtmp"|awk '{print$1}') )); then
                    kill_spinner
                    separator
                    cat "$itmp"
                    f
                    if ask "$(qpf)Do you want to execute this fixes" $YES;then
                        . $xtmp
                        if grep -Eqsiw "$pattern" /etc/php/$ver/cli/php.ini; then
                            echo "R: $(lG)Directive successfully written in /etc/php/$ver/cli/php.ini.$(N)"
                            mapfile -t inifiles2_< <(grep -Eslix "$pattern" $php_inis)
                            if (( ${#inifiles2_[@]} )); then
                                echo "R: $(R)removal from ${inifiles2_[@]} failed.$(N)"
                            else
                                echo "R: $(lG)removal from ${inifiles1_[@]} was successfull.$(N)"
                            fi
                        else
                            echo "R: $(R)this step failed.$(N)"
                        fi
                    else
                        echo "R: $(R)you answered $(box no), nothing changed.$(N)"
                    fi
                    anykey
                fi
                ;;
            igbinary)
                echo -n > $xtmp; echo -n > $itmp
                echo -e "\n -$(P;format_string "$must_be_fixed_message" 3;N)" >> $itmp
                php_inis=''
                for sapi in $(phpquery -v $ver -S); do
                    php_ini="/etc/php/$ver/$sapi/php.ini"
                    if [ -f "$php_ini" ]; then
                        php_inis+=" /etc/php/$ver/$sapi/php.ini"
                    else
                        continue
                    fi
                    mapfile -t lines< <(grep "$ext" "$php_ini")
                    if (( ${#lines[@]} )); then
                        echo -e "\n   - $(O)Malicious configuration lines in $(C)$php_ini$(O):" >> $itmp
                        for i in ${!lines[@]}; do
                            line="${lines[i]}"
                            key="$(key_ name "$line")"
                            val="$(key_ val "$line")"
                            if bool="$(boolean "$val")"; then
                                $bool && val='(on|1)' || val='(off|0)'
                            fi
                            if [ "$line" = "# igbinary for PHP" ]; then
                                infostring="This line was added by an installation script. The authors of that script did place this line together with the subsequent igbinary related directives there, seemingly without deeper knowledge of the matter. Of course, this particular line has no meaning as it is commented out, but it will be removed though since the subsequent igbinary related directives will be removed there too and placed on their correct place."
                                echo -e "\n$(R)$line$(N)" >> $itmp
                                C;echo "info$(N):$(W;format_string "$infostring" 6;N)" >> $itmp
                                echo "sed -i '/^$line$/d' '$php_ini'" >> $xtmp
                            elif grep -qswiE "^$key\s*=\s*$val$" "$ext_ini"; then
                                infostring="This directive does not belong in $(C)$php_ini$(W) and is already defined in $(C)$ext_ini$(W). It will be removed from $(C)$php_ini$(W)."
                                echo -e "\n$(R)$line$(N)" >> $itmp
                                C;echo "info$(N):$(W;format_string "$infostring" 6;N)" >> $itmp
                                echo "sed -i '/^$line$/d' '$php_ini'" >> $xtmp
                            elif oldstring="$(grep -wiE "^\s*[;|#]\s*$key\s*=\s*$val$" "$ext_ini")"; then
                                infostring="This directive does not belong in $(C)$php_ini$(W). It belongs in $(C)$ext_ini$(W), where it already exists but there it is commented out. It will be removed from $(C)$php_ini$(W) and uncommented in $(C)$ext_ini$(W)."
                                echo -e "\n$(R)$line$(N)" >> $itmp
                                C;echo "info$(N):$(W;format_string "$infostring" 6;N)" >> $itmp
                                echo "sed -Ei 's|^$oldstring$|$line|' '$ext_ini'" >> $xtmp
                                echo "sed -i '/^$line$/d' '$php_ini'" >> $xtmp
                            fi
                        done
                    fi
                done
                if (( $(wc -c "$xtmp"|awk '{print$1}') )); then
                    kill_spinner
                    separator
                    cat "$itmp"
                    f
                    if ask "$(qpf)Do you want to execute this fixes" $YES;then
                        . $xtmp
                        grep -qs "igbinary" $php_inis&&echo "R: $(R)this step failed.$(N)"||echo "R: $(lG)this step was successfull.$(N)"
                    else
                        if [ "$OLD" = "$ver" ] && [[ "$OLD" ]]; then
                            echo "R: $(R)you answered $(box no),...$(N)"
                            exit1
                        else
                            echo "R: $(R)you answered $(box no), nothing changed.$(N)"
                        fi
                    fi
                    anykey
                fi
                ;;
            pdo_pgsql)
                echo -n > $xtmp; echo -n > $itmp
                echo -e "\n -$(P;format_string "$should_be_fixed_message" 3;N)" >> $itmp

                optionblock="pgsql.allow_persistent = On\npgsql.auto_reset_persistent = Off\npgsql.max_persistent = -1\npgsql.max_links = -1\npgsql.ignore_notice = 0\npgsql.log_notice = 0"

                if grep -qsPz "\n\n\[PostgresSQL\]\n$optionblock\n" "$ext_ini"; then
                    infostring="$(W)This block was added by an installation script. The authors of that script did place this lines without deeper knowledge of the matter. These are all exclusively default values and besides that, all these lines are already present in the shipped default php.ini for all SAPIs in exact the same order. Php does not get better by adding directives multiple times, it only lowers the overview ability and makes it difficult for this script. That is why this lines will (should) be removed."
                    echo -e "\n$(R)[PostgresSQL]\n$optionblock$(N)" >> $itmp
                    C;echo "info$(N):$(format_string "$infostring" 6;N)" >> $itmp
                    echo "delafter 'extension=pdo_pgsql.so' '$ext_ini'" >> $xtmp
                fi
                if (( $(wc -c "$xtmp"|awk '{print$1}') )); then
                    kill_spinner
                    separator
                    cat "$itmp"
                    f
                    if ask "$(qpf)Do you want to remove these lines" $YES;then
                        . $xtmp
                        grep -qsPz "\n\n\[PostgresSQL\]\n$optionblock\n" "$ext_ini"&&echo "R: $(R)removal of this lines failed.$(N)"||echo "R: $(lG)lines successfully removed.$(N)"
                    else
                        echo "R: $(R)you answered $(box no), nothing changed.$(N)"
                    fi
                    anykey
                fi
                ;;
            *)  :
        esac
    }

    check_config(){
        local ver amdir am
        local -a am_ini_files
        (( $# )) && ver="$1" || ver="$OLD"
        amdir="/etc/php/$ver/mods-available"
        [ -d "$amdir" ] || return 1
        mapfile -t am_ini_files< <(ls "$amdir"|awk -F. '/\.ini$/{print$1}')
        for am in ${am_ini_files[@]}; do
            spinner C " . check_config() searching known configuration errors in php$ver." &
            ext_config_fix $ver $am
        done
        kill_spinner
    }

}


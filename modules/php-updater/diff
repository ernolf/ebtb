__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${DIFF_BASHLIB:-_} && return
DIFF_BASHLIB=:

. <(lrequire fstring)

diff_other_files(){
    f; os; echo "Based on this diff, this script would suggest this:"
    line '=' P 2/78 b1  # old config:
    line '-' GRAY 2/78
    os; GRAY; echo "old:$(f; o5)- config-file$(o $c2)-->$(o $c3)$npath"
    line '-' GRAY 2/78
    local opath npath plu be
    local -i count c2 c3
    opath="$FILE" npath="${FILE//$OLD/$NEW}" c2=20 c3=25
    q0 ${X[diff]} <(${X[sed]} "s/$OLD/@VERSION@/" "$opath") <(${X[sed]} "s/$NEW/@VERSION@/" "$npath") && return # don't treat empty diffs
    # Count the number of lines starting with '<'
    count=$(${X[diff]} <(${X[sed]} "s/$OLD/@VERSION@/" "$opath") <(${X[sed]} "s/$NEW/@VERSION@/" "$npath") | ${X[grep]} -c '^<')
    if (( count == 1 )); then
        plu='' be=is
    elif (( count > 1 )); then
        plu='s' be=are
    else
        return # extra test to not treat empty diffs
    fi
    echo "$(pf; W; format_string "The file $(C)$FILE$(W), which is part of the $(Y)$PKGOLD$(W) package has been changed after installation. This script can migrate those changes for you, so look exactly what it suggests to do. If it does not look good, simply answer $(box no) and edit the file yourself as you need it." 3)"
    f
    echo "$(o3; W; format_string "This is the detected diff $(GRAY)(the $(dY)@VERSION@$(GRAY) string here is just used as neutral placeholder in order to only filter out the differences that matter)$(W). The line$plu preceded with '$(R)<$(W)' (red) $be from $(R)$opath$(W), while the coresponding line$plu from $(G)$npath$(W) $be preceded with '$(G)>$(W)' (green) :" 3; N)"
    f
    ${X[diff]} --color <(${X[sed]} "s/$OLD/@VERSION@/" "$opath") <(${X[sed]} "s/$NEW/@VERSION@/" "$npath")
    GRAY; echo -n "-->  begin"
    line "  -->" GRAY 14
    cat $npath
    GRAY; echo -n "<--   end "
    line "  <--" GRAY 14
    line '=' P 2/78  # new config draft:
    line '-' GRAY 2/78
    os; GRAY; echo "draft: (not yet written to file)$(f; o5)- config-file$(o $c2)-->$(o $c3)$npath"
    line '-' GRAY 2/78
    GRAY; echo -n "-->  begin"
    line "  -->" GRAY 14
    ${X[sed]} "s/$OLD/$NEW/g" $opath
    GRAY; echo -n "<--   end "
    line "  <--" GRAY 14
    line '=' P 2/78 a2
    echo "$(pf; format_string "Nothing has been written to disc yet. If everything looks as desired and expected and you want to apply the changes exactly as shown here, then please enter [yes]." 3)"
    line '=' P 2/78 b1
    if ask "$(qpf)Apply changes to $npath as suggested" "$YES"; then
        ${X[sed]} "s/$OLD/$NEW/g" $opath > $npath
        line '-' GRAY 2/78
        os; GRAY; echo "new:$(f; o5)- config-file$(o $c2)-->$(o $c3)$npath"
        line '-' GRAY 2/78
        GRAY; echo -n "-->  begin"
        line "  -->" GRAY 14
        cat $npath
        GRAY; echo -n "<--   end "
        line "  <--" GRAY 14
        line '=' P 2/78
        os; echo "Changes written to disk"
    else
        os; C; echo "$npath$(N) not changed.$(f; os)You can call this script again or edit $(C)$FILE$(N; f; os)with an editor of your choice."
    fi
    line '=' P 2/78
}

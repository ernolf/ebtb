__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${CHFILES_BASHLIB:-false} && return
CHFILES_BASHLIB=:

# for backwards compatibility
declare -f lrequire &>/dev/null||lrequire(){ require $@;}

. <(lrequire basics)

changed_files_(){
    changed_mod_ini_files(){
        local old new odir ndir ofile cfile ext_objfile ext_pkg omd5 nmd5
        local -a ofiles nfiles cfiles
        old="$1" new="$2"
        odir="/etc/php/$old/mods-available"
        ndir="/etc/php/$new/mods-available"
        mapfile -t ofiles< <(ls "$odir")
        mapfile -t nfiles< <(ls "$ndir")
        mapfile -t cfiles< <(comm -12 <(p_sort ${ofiles[@]}) <(p_sort ${nfiles[@]}))
        for cfile in ${cfiles[@]}; do
            ext_objfile="$(extension_dir_of_ $old)/$(awk -F= '/extension=/ {print $2}' "$odir/$cfile")"
            [ -f "$ext_objfile" ] || continue
            ext_pkg="$(dpkg -S "$ext_objfile" | awk '{print$1}' 2>/dev/null)" || continue
            if [ "${ext_pkg%-*}" = "php$old" ]; then
                omd5=$(md5sum "$odir/$cfile" | awk '{print$1}')
                nmd5=$(md5sum "$ndir/$cfile" | awk '{print$1}')
                [ "$omd5" = "$nmd5" ] || echo "${ext_pkg#*-}$odir/$cfile"
            fi
        done
    }
    ucf_query(){
        local old new reg
        local -a ouf nuf juf # old_, new_ and joint_ucf_files
        old="$1" new="$2" reg=/var/lib/ucf/registry
        changed_mod_ini_files $old $new
        mapfile -t ouf< <(awk '/.*php\/'$old'/ {print $2}' "$reg")
        mapfile -t nuf< <(awk '/.*php\/'$new'/ {print $2}' "$reg")
        mapfile -t juf< <(comm -12 <(p_sort ${ouf[@]##/etc/php/$old}) <(p_sort ${nuf[@]##/etc/php/$new}))
        ucfq -w $(printf /etc/php/$old'%s\n' "${juf[@]##/etc/php/$old}") | awk -F: '/Yes$/ {gsub("php'$old'-","",$2);print $2 ":" $1}'
    }
    changed_other_files(){
        local old new
        local -a oip nip jip files # old_, new_ and joint_installed_packages
        old="$1" new="$2"
        mapfile -t oip< <(dpkg -l | awk '/^[hiu]i.*php'$old'/{gsub("'$old'","@VERSION@",$2);print $2}')
        mapfile -t nip< <(dpkg -l | awk '/^[hiu]i.*php'$new'/{gsub("'$new'","@VERSION@",$2);print $2}')
        mapfile -t jip< <(comm -12 <(p_sort ${oip[@]}) <(p_sort ${nip[@]}))
        for i in ${!jip[@]}; do
            pkg="${jip[i]//@VERSION@/$old}"
            mapfile -t files< <(dpkg --verify $pkg | awk '{print $NF}')
            if (( ${#files[@]} )); then
                printf ''${pkg#*-}':%s\n' "${files[@]}" | sort -u
            fi
        done
    }
    local old new pkg changed_file
    local -a changed_files files
    local -i r=1
    old="$2" new="$3"
    mapfile -t changed_files< <(changed_other_files $old $new)
    if [ "$1" = "ini" ]; then
        mapfile -t files< <(ucf_query $old $new)
        r=0
    fi
    if ((${#changed_files[@]})); then
        for i in ${!changed_files[@]}; do
            pkg=${changed_files[i]%:*}
            changed_file=${changed_files[i]#*:}
            [ -f "$changed_file" ] || continue
            case $1 in
               ini) [[ "$changed_file" =~ ^/etc/php/$old/.*\.ini ]] && files+=("${changed_files[i]}")
                    ;;
              conf) [[ "$changed_file" =~ ^/etc/php/$old/.*\.conf ]] && files+=("${changed_files[i]}")
                    ;;
             other) [[ ! "$changed_file" =~ ^/etc/php/$old/ ]] && files+=("${changed_files[i]}") r=0
            esac
        done
    fi
    p_sort "${files[@]}"
    return $r
}

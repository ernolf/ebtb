__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${FSTRING_BASHLIB:-_} && return
FSTRING_BASHLIB=:

. <(lrequire binaries)
. <(lrequire ansi)
. <(lrequire filter)

# format a long string in lines with a maximum length
format_string() {
    [[ "$-" =~ x ]] && { set +x; local debugx=true; } || local debugx=_
    local input output word noansi_word basic_color indent_type
    local -i indent max_length current_length marg
    input="$1" indent="${2/o/}" output=''
    indent_type='es' # default to "empty spaces"
    [[ "$2" =~ o ]] && indent_type='o' # offset to not overwrite indent space
    if [[ "$3" ]]; then
        basic_color="$($3)"
    else
        basic_color=''
    fi

    if (( $(${X[tput]} cols) > 90 )); then
        marg=10
    elif (( 90 > $(${X[tput]} cols) && $(${X[tput]} cols) > 80  )); then
        marg=$(( $(${X[tput]} cols) - 80 ))
    else
        marg=0
    fi

    if (( $(${X[tput]} cols) < 80 )); then
        max_length=$(( 80 - indent ))
    else
        max_length=$(( $(${X[tput]} cols) - $(( marg + indent )) ))
    fi

    for word in $input; do
        noansi_word="$(${X[ansifilter]} <<< "$word")"
        if (( $(( current_length + ${#noansi_word} )) > $(( max_length + 1 )) )); then
            output+="\n$($indent_type $indent)$basic_color$word"
            current_length=${#noansi_word}
        else
            output+=" $word"
            current_length=$(( current_length + ${#noansi_word} + 1 ))
        fi
    done
    echo -en "$output"
    $debugx && set -x
}

listify(){
    local color
    color=$1
    shift
    echo -e "$($color; echo -n "${@//\ /@E_S@}" | ${X[sed]} "s/ /, /g;s/\(.*\), /\1 $(N)and$($color) /; s/@E_S@/ /g"; N)"
}

listify_(){
    local color_fg color_bg
    color_fg=$1 color_bg=$2
    shift 2
    echo -e "$($color_fg; echo -n "${@//\ /@E_S@}" | ${X[sed]} "s/ /, /g;s/\(.*\), /\1 $($color_bg)and$($color_fg) /; s/, /$($color_bg),$($color_fg) /g; s/@E_S@/ /g"; $color_bg)"
}

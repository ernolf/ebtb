__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${FSTRING_BASHLIB:-_} && return
FSTRING_BASHLIB=:

# TODO 0 -->
. <(lrequire binaries)
. <(lrequire ansi)
. <(lrequire filter)
# TODO <-- 0
# format a long string in lines with a maximum length

format_string() {
    local -A bool
    [[ "$-" =~ x ]] && { set +x; bool[debugx]=:; } || bool[debugx]=_
    local input output word noansi_word basic_color indent_type
    local -i indent max_cols max_length current_length marg
    input="$1" indent="${2/o/}" max_cols=$(max_cols) output='' basic_color=''
    indent_type='es' # default to "empty spaces"
    [[ "$2" =~ o ]] && indent_type='o' # offset to not overwrite indent space
    if [[ "$3" =~ ^[0-9]+$ ]]; then
        (( $3 > max_cols )) || max_cols=$3
    else
        basic_color="$($3)" # TODO: is this used?
    fi

    if (( max_cols > 90 )); then
        marg=10
    elif (( 90 > max_cols && max_cols > 80  )); then
        marg=$(( max_cols - 80 ))
    else
        marg=0
    fi

    if (( max_cols < 80 )); then
        max_length=$(( 80 - indent ))
    else
        max_length=$(( max_cols - $(( marg + indent )) ))
    fi

    for word in $input; do
        noansi_word="$(${X[ansifilter]} <<< "$word")"
        if (( $(( current_length + ${#noansi_word} )) > $(( max_length - 1 )) )); then
            output+="\n$($indent_type $indent)$basic_color$word"
            current_length=${#noansi_word}
        elif ${bool[firstword]:-:}; then
            output+="$word"
            current_length=${#noansi_word}
            bool[firstword]=_
        else
            output+=" $word"
            current_length=$(( current_length + ${#noansi_word} + 1 ))
        fi
    done
    echo -en "$output"
    ${bool[debugx]} && set -x
}

listify(){
    local color
    color=$1
    shift
    echo -e "$($color; echo -n "${@//\ /@E_S@}" | sed_ "s/ /, /g; s/(.*), /\1 $(N)and$($color) /; s/@E_S@/ /g"; N)"
}

listify_(){
    local color_fg color_bg
    color_fg=$1 color_bg=$2
    shift 2
    echo -e "$($color_fg; echo -n "${@//\ /@E_S@}" | sed_ "s/ /, /g; s/(.*), /\1 $($color_bg)and$($color_fg) /; s/, /$($color_bg),$($color_fg) /g; s/@E_S@/ /g"; $color_bg)"
}

__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${HTTPD_BASHLIB:-_} && return
HTTPD_BASHLIB=:

. <(lrequire binaries)
. <(lrequire basics)

# TODO 0 -->
#        apache2     /etc/apache2            /lib/systemd/system/apache2.service
#        caddy       /etc/caddy              /lib/systemd/system/caddy.service
#        lghttpd     /etc/lighttpd           /lib/systemd/system/lighttpd.service
#        mini_httpd  /etc/mini-httpd.conf    /etc/init.d/mini-httpd
#        nginx       /etc/nginx              /lib/systemd/system/nginx.service
#        tntnet      /etc/tntnet             /lib/systemd/system/tntnet.service
#        yaws        /etc/yaws               /lib/systemd/system/yaws.service
# TODO <-- 0
# globals
globalarrays="A2CONFFILES NGXCONFFILES A2MODULES NGXMODULES HTTPD_NEXTCLOUD HTTPD_NC_DIR WK_HTTPD_KNOWN WK_HTTPD_ENABLED WK_HTTPD_ACTIVE HTTPD_KNOWN HTTPD_ENABLED HTTPD_ACTIVE HTTPD_ALL"
for array in $globalarrays; do q2 declare -ga "$array" || declare -a "$array"; done
unset -v array globalarrays

unset HTTPD
q2 declare -gA HTTPD || declare -A HTTPD

HTTPD=(
    [apache2]=0
    [caddy]=0
    [lighttpd]=0
    [mini_httpd]=0
    [nginx]=0
    [tntnet]=0
    [yaws]=0
)

populate_a2conffiles(){
    mapfile -t A2CONFFILES< <(q2 ${X[apache2ctl]} -t -D DUMP_INCLUDES | ${X[tail]} +2 | ${X[gawk]} '{print $NF}')
}

populate_ngxconffiles(){
    mapfile -t NGXCONFFILES< <(q2 ${X[nginx]} -T | ${X[gawk]} -F' |:' '/^#[^#]*:$/{print $(NF-1)}')
}

# $1 either 'static' (built in) or 'shared' (dynamic)
populate_a2modules(){
    q0 ${X[apache2ctl]} configtest || return
    mapfile -t A2MODULES< <(q2 ${X[apache2ctl]} -M | ${X[tail]} +2 | ${X[gawk]} '/'$1'/{print $(NF-1)}')
}

populate_ngxmodules(){
    q0 ${X[nginx]} -t || return
    mapfile -t NGXMODULES< <(
        [[ -z "$1" || "$1" == 'static' ]] && ${X[nginx]} -V 2>&1 | ${X[tr]} -- - '\n' | ${X[grep]} _module
        [[ -z "$1" || "$1" == 'shared' ]] && ${X[nginx]} -T 2>&1 | ${X[gawk]} -F / '/load_module/{print $2}' | ${X[sed]} -E 's/(^ngx_|\.so.*$)//g'
    )
}

detect_httpd(){
    check_() {
        local p
        local -a conffiles
        if [ "$2" = "apache2" ]; then
            conffiles=("${A2CONFFILES[@]}") # Copy the array values
        elif [ "$2" = "nginx" ]; then
            conffiles=("${NGXCONFFILES[@]}") # Copy the array values
        fi
        (( ${#conffiles[@]} )) || return 1
        for p in $(q2 ${X[grep]} -ER "^\s*(<Directory|root)" "${conffiles[@]}" | \
            q2 ${X[gawk]} -F'[>| |;|:]' '{gsub(/\/$/, "", $(NF-1)); gsub(/"/, "", $(NF-1)); if ($(NF-1) != "") print $1 ";" $(NF-1)}'); do
            case $1 in
   nextcloud_server) if q0 ${X[find]} "${p##*;}/" -maxdepth 1 -type f -name "occ" -exec dirname {} \;; then
                         nextcloud_server["$2"]=true
                     fi
                     ;;
nextcloud_directory) q2 ${X[find]} "${p##*;}/" -maxdepth 1 -type f -name "occ" -exec dirname {} \;
                     ;;
                all) if [ -L "${p%%;*}" ]; then
                         echo "${p%%;*} -> $(${X[realpath]} ${p%%;*}) - ${p##*;}"
                     else
                         echo "${p%%;*} - ${p##*;}"
                     fi
                     ;;
                  *) :
            esac
        done
    }
    local httpd
    local -a wellknown_httpdaemons httpdaemons
    local -A nextcloud_server
    nextcloud_server=([apache2]=_ [nginx]=_)
    wellknown_httpdaemons=(${!nextcloud_server[@]})
    httpdaemons=(${!HTTPD[@]})
    for httpd in ${wellknown_httpdaemons[@]}; do check_ nextcloud_server "$httpd"; done
    case $1 in
  wk_known) for httpd in ${wellknown_httpdaemons[@]}; do (( ${HTTPD["$httpd"]} )) && echo "$httpd"; done
            ;;
wk_enabled) for httpd in ${wellknown_httpdaemons[@]}; do (( ${HTTPD["$httpd"]} > 1 )) && echo "$httpd"; done
            ;;
 wk_active) for httpd in ${wellknown_httpdaemons[@]}; do (( ${HTTPD["$httpd"]} > 2 )) && echo "$httpd"; done
            ;;
     known) for httpd in ${httpdaemons[@]}; do (( ${HTTPD["$httpd"]} )) && echo "$httpd"; done
            ;;
   enabled) for httpd in ${httpdaemons[@]}; do (( ${HTTPD["$httpd"]} > 1 )) && echo "$httpd"; done
            ;;
    active) for httpd in ${httpdaemons[@]}; do (( ${HTTPD["$httpd"]} > 2 )) && echo "$httpd"; done
            ;;
 nextcloud) for httpd in "${wellknown_httpdaemons[@]}"; do "${nextcloud_server["$httpd"]}" && echo "$httpd"; done
            ;;
    nc-dir) for httpd in "${wellknown_httpdaemons[@]}"; do "${nextcloud_server["$httpd"]}" && check_ nextcloud_directory "$httpd" | ${X[sort]} -u; done
            ;;
       all) for httpd in "${wellknown_httpdaemons[@]}"; do
                if "${nextcloud_server["$httpd"]}"; then
                    echo "$httpd:"
                    p_sort_numerate "$(check_ all "$httpd")"
                fi
            done
            ;;
         *) :
    esac
}

populate_httpd_(){
    case $1 in
     nextcloud) mapfile -t HTTPD_NEXTCLOUD< <(detect_httpd nextcloud 2>&1)
                ;;
        nc-dir) mapfile -t HTTPD_NC_DIR< <(detect_httpd nc-dir 2>&1)
                ;;
      wk_known) mapfile -t WK_HTTPD_KNOWN< <(detect_httpd wk_known 2>&1)
                ;;
    wk_enabled) mapfile -t WK_HTTPD_ENABLED< <(detect_httpd wk_enabled 2>&1)
                ;;
     wk_active) mapfile -t WK_HTTPD_ACTIVE< <(detect_httpd wk_active 2>&1)
                ;;
         known) mapfile -t HTTPD_KNOWN< <(detect_httpd known 2>&1)
                ;;
       enabled) mapfile -t HTTPD_ENABLED< <(detect_httpd enabled 2>&1)
                ;;
        active) mapfile -t HTTPD_ACTIVE< <(detect_httpd active 2>&1)
                ;;
           all) mapfile -t HTTPD_ALL< <(detect_httpd all 2>&1)
                ;;
             *) :
    esac
}

load_server_status(){
    local httpd
    for httpd in ${!HTTPD[@]}; do
        if [ -n "${X[$httpd]}" ]; then
            HTTPD["$httpd"]=1 # "known"
            if q0 ${X[systemctl]} --no-pager --quiet is-enabled "$httpd"; then
                HTTPD["$httpd"]=2 # "enabled & inactive"
                if q0 ${X[systemctl]} --no-pager --quiet is-active "$httpd"; then
                    HTTPD["$httpd"]=3 # "enabled & active"
                fi
            fi
        fi
    done
}

iterate_conf_files_() {
    local httpd conf_file
    local -a task
    httpd="$1"
    shift
    task=("$@")
    case $httpd in
        apache2|a2)
            (( ${#A2CONFFILES[@]} )) && for conf_file in "${A2CONFFILES[@]}"; do
                [[ "$conf_file" =~ \.backup$ ]] || "${task[@]}" "$conf_file"
            done
        ;;
        nginx|ngx)
            (( ${#NGXCONFFILES[@]} )) && for conf_file in "${NGXCONFFILES[@]}"; do
                [[ "$conf_file" =~ \.backup$ ]] || "${task[@]}" "$conf_file"
            done
    esac
}

readlink_if_(){
    local conf_file quiet
    conf_file="$1" quiet=_
    [ "${2:-}" = 'quiet' ] && quiet=:
    if [ -L "$conf_file" ]; then
        if $quiet; then
            echo "Configfile: $(GRAY)$conf_file -> $(C)$(${X[realpath]} "$conf_file")";N
        else
            o3; pf; GRAY; bundle echo "$conf_file -> $(C)$(${X[realpath]} "$conf_file")";N
        fi
    else
        if $quiet; then
            echo "Configfile: $(C)$conf_file";N
        else
            o3; pf; C; bundle echo "$conf_file";N
        fi
    fi
}

a2serverroot(){
    [ -n "${X[apache2ctl]}" ] || return
    unquote $(q2 ${X[apache2ctl]} -t -D DUMP_RUN_CFG | ${X[awk]} '/ServerRoot/{print $NF}')
}

load_server_status
(( ${HTTPD[apache2]} )) && populate_a2conffiles
(( ${HTTPD[nginx]} )) && populate_ngxconffiles
# TODO 1 -->
# example:
#    detected_httpd(){
#        populate_httpd_ known
#        populate_httpd_ active
#        if (( ${#HTTPD_KNOWN[@]} == 1 && ${#HTTPD_ACTIVE[@]} ==1 )) && [ "${HTTPD_KNOWN[0]}" = "${HTTPD_ACTIVE[0]}" ]; then
#            echo "${HTTPD_KNOWN[0]}"
#        fi
#    }
# TODO <-- 1

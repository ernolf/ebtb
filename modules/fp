__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${FP_BASHLIB:-_} && return
FP_BASHLIB=:

declare MACHINE_ID

machine_id(){
    if [[ -f /etc/machine-id || -f /var/lib/dbus/machine-id ]]; then
        [ -f /etc/machine-id ] && ${X[cat]} "/etc/machine-id" || ${X[cat]} "/var/lib/dbus/machine-id"
    else # computing pseudo machine-id - md5sum from mac address:
        q2 ${X[ip]} link show | ${X[gawk]} '/ether/ {print $2}' | ${X[md5sum]} | ${X[tr]} -d ' -'
    fi
}

MACHINE_ID="$(machine_id 2>&1)"

fp(){
    local fingerprint
    if [ -f "${F[fp]}" ]; then
        local -i fpe
        fpe=$(${X[stat]} -c %Z "${F[fp]}")
        (( T[rte] - fpe > 3600 )) && echo > "${F[fp]}"
        fingerprint=$(< "${F[fp]}")
    fi
    if (( ${#fingerprint} == 7 )); then
        echo $fingerprint
        return 0
    else
        local decimal_number
        local -i digit checksum
        if [ -n "${X[python3]}" ]; then
            decimal_number=$(${X[python3]} -c "print(int('$MACHINE_ID', 16))")
        else
            decimal_number=$(${X[php]} -r "printf('%.0f', hexdec('$MACHINE_ID'));")
        fi
        while (( ${#decimal_number} > 1 )); do
            checksum=0
            for (( i=0; i<${#decimal_number}; i++ )); do
                digit="${decimal_number:i:1}"
                checksum=$((checksum + digit))
            done
            decimal_number=$checksum
        done
        fingerprint=":${MACHINE_ID:14:4}${checksum}:"
        echo "$fingerprint" | ${X[tee]} "${F[fp]}"
    fi
}

detect_hashed_file(){
    local item hash
    local -A bool
    hash="$1" bool[echo]="$2"
    for item in $(cd $TD; ${X[ls]}); do
        if [ -f "$TD/$item" ]; then
            if [[ "$hash" =~ ${item%%_*} ]]; then
                ${bool[echo]} && echo "$TD/$item"
                return 0
            fi
        fi
    done
    return 1
}

create_hashed_file(){
    local -i len
    local f hash
# TODO 2 -->
#    hashlen=${#hash}
#    random_start=$(${X[shuf]} -i 0-$(($hashlen-$len)) -n 1)
#    random_sequence=${hash:$random_start:$len}
# TODO <-- 2
    len=16 hash="$1"
    f="$(q2 ${X[mktemp]} -p $TD -t ${hash:$(${X[shuf]} -i 0-$(( ${#hash} - $len )) -n 1):$len}_XXXXXXXXXXXX)"
    ${X[chmod]} 666 "$f"
    echo "$f"
}

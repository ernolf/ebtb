__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${BINARIES_BASHLIB:-false} && return
BINARIES_BASHLIB=:

for x in B BINARY D F J M PHP T V; do declare -gA $x 2>${NUL:=/dev/null} || declare -A $x; done
declare -i BINARIES_LIB_VERSION BINARY_ARRAY_VERSION

__libversion__
BINARY_ARRAY_VERSION=0

[[ "$-" =~ x ]] && { set +x; B[binaries_debugx]=:; }

declare -a paths used_binaries binaries
# declare -gA BINARY 2>$NUL || declare -A BINARY
# declare -gA PHP 2>$NUL || declare -A PHP
PHP[vregex]='(5\.6|[78]\.[01234])'
PHP[vextglob]='*@(*5\.6*|*[78]\.[01234]*)*'
declare -p PHP > "${F[php]:="${D[vt]}/php"}"

F[binary]="${D[vt]}/binary"
[ -f "${F[binary]}" ] && . "${F[binary]}"

(( BINARIES_LIB_VERSION == BINARY_ARRAY_VERSION )) || BINARY=()

reload_binaries(){
    [ -f "${F[binary]:=${D[vt]}/binary}" ] && ${BINARY[rm]} -f -- "${F[binary]}"
    FILTER_BASHLIB=_ BINARIES_BASHLIB=_
    . <(lrequire filter)
}

map_paths(){
    # standard paths take precedence
    PATH=$(printf "%s" "/usr/sbin:/usr/bin:/sbin:/bin:$PATH" | ${BINARY[gawk]} -v RS=: -v ORS=: '!seen[$0]++' | ${BINARY[sed]} 's/::/:/g;s/:$//')
    mapfile -t paths< <(printf "%s\n" ${PATH//:/ })
}

nullglob_path(){
    local old_nullglob path binary
    local -a results
    map_paths
    old_nullglob=$(shopt -p nullglob || :)
    shopt -s nullglob
    for path in "${paths[@]}"; do
        for binary in "$path"/*; do
            results+=("$binary")
        done
    done
    [[ -n $old_nullglob ]] && $old_nullglob || shopt -u nullglob
    printf '%s\n' "${results[@]}"
}

extglob_path(){
    local path binary
    local -a results
    map_paths
    for path in "${paths[@]}"; do
        for binary in "$path"/${PHP[vextglob]}; do
            [[ -e "$binary" ]] && results+=("$binary")
        done
    done
    printf '%s\n' "${results[@]}"
}

if [[ -z ${BINARY[env]} ]]; then
    BINARY[env]="$(command -v env)"
    for x in gawk sed; do
        if [ -x "$(command -v $x)" ]; then
            BINARY[$x]="${BINARY[env]} LC_MESSAGES=C $(command -v $x)" &>$NUL
        else
            echo -e "\e[31mERROR: no '$x' binary or '$x' not executable\e[0m" > ${TTY:=/dev/tty}
            [ -t 0 ] || exit 1
        fi
    done
    # binaries that need LC_ALL=C
    for x in lastlog; do
        if [ -x "$(command -v $x)" ]; then
            BINARY[$x]="${BINARY[env]} LC_ALL=C $(command -v $x)" &>$NUL
        fi
    done
    # binaries that need LC_ALL=C.UTF-8
    for x in add-apt-repository gpg; do
        if [ -x "$(command -v $x)" ]; then
            BINARY[$x]="${BINARY[env]} LC_ALL=C.UTF-8 $(command -v $x)" &>$NUL
        fi
    done

__used_binaries__

    mapfile -t binaries < <(nullglob_path)

    for x in "${binaries[@]}"; do
        [ -z "${BINARY[${x##*/}]}" ] || continue
        [ -x "$x" ] || continue
        [[ " ${used_binaries[@]} " =~ " ${x##*/} " ]] || continue
        BINARY[${x##*/}]="${BINARY[env]} LC_MESSAGES=C $x" &>$NUL
    done
    # xmlstarlet invocation https://xmlstar.sourceforge.net/doc/UG/xmlstarlet-ug.html#idm47077139670224
    [ -z "${BINARY[xmlstarlet]}" ] || BINARY[xmls]="${BINARY[xmlstarlet]} sel -B -t" &>$NUL
fi

# allways load actual php versions because they may have been newly installed
shopt -s extglob
mapfile -t binaries < <(extglob_path)
shopt -u extglob

for x in "${binaries[@]}"; do
    [ -z "${BINARY[${x##*/}]}" ] || continue
    [ -x "$x" ] || continue
    [[ "${x##*/}" =~ ^php(-config|-fpm|ize)?${PHP[vregex]}$ ]] || continue
    BINARY[${x##*/}]="${BINARY[env]} LC_MESSAGES=C $x" &>$NUL
done
unset -v used_binaries binaries
echo "BINARY_ARRAY_VERSION=$BINARIES_LIB_VERSION" > "${F[binary]}"
declare -p BINARY >> "${F[binary]}"
q0 ${BINARY[chmod]} 666 "${F[binary]}" "${F[php]}"

# Create a nameref for BINARY named X
declare -n X=BINARY &>$NUL
declare -p X >> "${F[binary]}"

[[ "$(type -t req)" == function ]] && . <(req backcomp 2>$NUL)

${B[binaries_debugx]:-false} && set -x

__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${BINARIES_BASHLIB:-false} && return
BINARIES_BASHLIB=:

[[ "$-" =~ x ]] && { set +x; B[binaries_debugx]=:; }

declare binary
declare -a binaries

declare -gA BINARY 2>/dev/null || declare -A BINARY

BINARY[env]="$(command -v env)"

for binary in gawk sed; do
    if [ -x "$(command -v $binary)" ]; then
        BINARY[$binary]="${BINARY[env]} LC_MESSAGES=C $(command -v $binary)" &>/dev/null
    else
        echo -e "\e[31mERROR: no '$binary' binary or '$binary' not executable\e[0m" > /dev/tty
        [ -t 0 ] || exit 1
    fi
done

reload_binaries(){
    FILTER_BASHLIB=_ BINARIES_BASHLIB=_
    . <(lrequire filter)
}

glob_path(){
    local path binary
    local -a paths results
    # standard paths take precedence
    PATH=$(printf "%s" "/usr/sbin:/usr/bin:/sbin:/bin:$PATH" | ${BINARY[gawk]} -v RS=: -v ORS=: '!seen[$0]++' | ${BINARY[sed]} 's/::/:/g;s/:$//')
    mapfile -t paths< <(printf "%s\n" ${PATH//:/ })
    shopt -s nullglob
    for path in "${paths[@]}"; do
        for binary in "$path"/*; do
            results+=("$binary")
        done
    done
    shopt -u nullglob
    printf '%s\n' "${results[@]}"
}

mapfile -t binaries < <(glob_path)
for binary in "${binaries[@]}"; do
    [ -z "${BINARY[${binary##*/}]}" ] || continue
    [ -x "$binary" ] || continue
    BINARY[${binary##*/}]="${BINARY[env]} LC_MESSAGES=C $binary" &>/dev/null
done
unset -v binary binaries

# xmlstarlet invocation https://xmlstar.sourceforge.net/doc/UG/xmlstarlet-ug.html#idm47077139670224
[ -z "${BINARY[xmlstarlet]}" ] || BINARY[xmls]="${BINARY[xmlstarlet]} sel -B -t" &>/dev/null


# Create a nameref for BINARY named X
declare -n X=BINARY
# readonly -A X # this is declared as readonly after the depency_check passed

[[ "$(type -t req)" == function ]] && . <(req backcomp 2>/dev/null)

${B[binaries_debugx]:-false} && set -x

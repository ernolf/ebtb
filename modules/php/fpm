__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${FPM_BASHLIB:-false} && return
FPM_BASHLIB=:

. <(lrequire binaries)
. <(lrequire basics)

#globals
if ! q2 declare -p SAPI_FPM | ${BINARIES[grep]} -qs 'declare -A'; then
    unset SAPI_FPM
    q2 declare -gA SAPI_FPM || declare -A SAPI_FPM
fi

fpm_configfile(){
    local ver conf
    local -i r
    ver="$1"
    conf="$(${BINARIES[php-fpm$ver]} -t 2>&1 | ${BINARIES[grep]} -o "/[^ ':]*\.conf" | ${BINARIES[sort]} -u)"
    [ -f "$conf" ] && r=0 || r=1
    printf '%s' "$conf"
    return $r
}

fpm_include(){
    local ver conf include
    ver=$1
    conf="$(fpm_configfile $ver)" || return=1
    include="$(${BINARIES[gawk]} -F' |=' '/^\s*include/ {print $NF}' $conf)"
    case $2 in
      glob) echo "$include"
            ;;
       dir) echo "${include%/*}"
            ;;
       ext) echo "${include##*\.}"
    esac
}

fpm_ps_info(){
    local ver pool
    local -i pid
    local -a php_ps
    for pid in $(${BINARIES[ps]} -ef | ${BINARIES[gawk]} '/php-fpm/ && !/root/ {print $2}'); do
        ver=$(${BINARIES[ps]} -p $pid --no-headers | ${BINARIES[gawk]} '{print $NF}')
        pool=$(${BINARIES[ps]} -p $pid -o args= | ${BINARIES[gawk]} '{print $NF}')
        case $1 in
          long) php_ps[pid]="${ver} pool: $pool" ;;
             *) php_ps[pid]="${ver#php-fpm} $pool"
        esac
    done
    case $1 in
      long) for pid in "${!php_ps[@]}"; do
                echo "PID: $pid, Version: ${php_ps[pid]}"
            done
            ;;
     brief) for pid in "${!php_ps[@]}"; do
                echo "${php_ps[pid]}"
            done | ${BINARIES[sort]} -u | ${BINARIES[grep]} "${2:-.}"
            ;;
   version) for pid in "${!php_ps[@]}"; do
                echo "${php_ps[pid]}"
            done | ${BINARIES[sort]} -u | ${BINARIES[gawk]} '/'${2:-.}'/ {print $1}'
            ;;
      pool) for pid in "${!php_ps[@]}"; do
                echo "${php_ps[pid]}"
            done | ${BINARIES[sort]} -u | ${BINARIES[gawk]} '/'${2:-.}'/ {print $2}'
    esac
}

fpm_pools(){
    local v dir ext file strip
    local -a files pools
    local -i i index
    strip=false
    [ "$1" = 'strip' ] && strip=:
    for v in $(${BINARIES[phpquery]} -V | ${BINARIES[sort]}); do
        q0 fpm_configfile "$v" || continue
        files=() pools=()
        [[ "$(${BINARIES[phpquery]} -v "$v" -S)" =~ fpm ]]
        dir="$(fpm_include "$v" dir)"
        ext="$(fpm_include "$v" ext)"
        [ -d "$dir" ] || continue
        nonullglob "$dir/*" && files=("$dir/*\.$ext")
        (( ${#files[@]} )) || continue
        for file in ${files[@]};do
            $strip && pools+=("$(${BINARIES[gawk]} -F ] '/^\[/{print $1}' "$file")") || pools+=("$(${BINARIES[grep]} '^\[' "$file")")
        done
        $strip && echo "$v ${pools[@]#[}" || echo "$v ${pools[@]}"
    done
}

fpm_listen(){
    local poolfile listen
    poolfile="$1"
    listen="$(${BINARIES[gawk]} -F '\\s*=\\s*' '/^\s*listen/ { sub(/;$/, "", $2); print $2; exit }' "$poolfile")"
    case $2 in
        brief)
            echo "${listen//\"/}"
            ;;
         type)
            echo "${listen//\"/}" | ${BINARIES[gawk]} -F':' '{
                if ($1 ~ /^\//) {
                    print "unix"
                } else if ($1 ~ /^\[/) {
                    print "tcpv6"
                } else if ($1 ~ /^[0-9]+$/) {
                    print "tcp"
                } else {
                    print "tcpv4"
                }
            }'
            ;;
         full)
            echo "${listen//\"/}" | ${BINARIES[gawk]} -F':' '{
                if ($1 ~ /^\//) {
                    print "Unix-Socket: " $1
                } else if ($1 ~ /^\[/) {
                    print "IPv6: " $1 ":" $2
                } else if ($1 ~ /^[0-9]+$/) {
                    print "Port: " $1
                } else {
                    print "IPv4: " $1 ":" $2
                }
            }'
    esac
}

fpm_sockets(){
    if [ "$1" = 'versions' ]; then
        ${BINARIES[ss]} -lx | ${BINARIES[gawk]} '/fpm/{print $5}' | ${BINARIES[grep]} -Eo "${PHPVREGEX#php}"
    else
        ${BINARIES[ss]} -lx | ${BINARIES[gawk]} '/fpm/{print $5}'
    fi
}

fpm_socket(){
    local ver glob poolfile pool
    local -i r
    local -A pools
    ver=$1
    glob=$(fpm_include "$ver" glob) && r=0 || r=1
#    for poolfile in $(q2 ${BINARIES[ls]} $glob); do
    for poolfile in $glob; do # bash has its builtin glob functionality
        pool="$(${BINARIES[sed]} -n '/^\[.*\]$/ {s/^\[\(.*\)\]$/\1/p}' "$poolfile")"
        pools[$pool]="$(fpm_listen "$poolfile" brief)"
    done
    if [[ " ${!pools[@]} " =~ " $2 " ]]; then
        echo "${pools[$2]}"
    else
        echo "${!pools[@]}"
    fi
    return $r
}

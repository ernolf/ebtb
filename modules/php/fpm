__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${FPM_BASHLIB:-false} && return 0 || {
    FPM_BASHLIB=:

    . <(require basics)
    . <(require ansi)
    . <(require button)
    . <(require fstring)
    . <(require exit)
    . <(require anykey)
    . <(require line)
    . <(require ask)
    . <(require php/versions)

    declare -A SAPI_FPM

    fpm_conf(){
        local ver
        ver="$1"
        printf '%s' "/etc/php/$ver/fpm/php-fpm.conf"
    }

    fpm_include(){
        local ver fpm_conf
        ver=$1
        fpm_conf="$(fpm_conf $ver)"
        fpm_include="$(awk -F' |=' '/^\s*include/ {print $NF}' $fpm_conf)"
        case $2 in
          glob) echo "$fpm_include" ;;
           dir) echo "${fpm_include%/*}" ;;
           ext) echo "${fpm_include##*\.}"
        esac
    }

    fpm_ps_info() {
        local ver pool
        local -i pid
        local -a php_ps
        for pid in $(ps -ef | awk '/[p]hp-fpm/ && !/root/ {print $2}'); do
            ver=$(ps -p $pid --no-headers | awk '{print $NF}')
            pool=$(ps -p $pid -o args= | awk '{print $NF}')
            case $1 in
              long) php_ps[pid]="${ver} pool: $pool" ;;
                 *) php_ps[pid]="${ver#php-fpm} $pool"
            esac
        done
        case $1 in
          long) for pid in "${!php_ps[@]}"; do
                    echo "PID: $pid, Version: ${php_ps[pid]}"
                done
                ;;
         brief) for pid in "${!php_ps[@]}"; do
                    echo "${php_ps[pid]}"
                done | sort -u | grep "${2:-.}"
                ;;
       version) for pid in "${!php_ps[@]}"; do
                    echo "${php_ps[pid]}"
                done | sort -u | awk '/'${2:-.}'/ {print $1}'
                ;;
          pool) for pid in "${!php_ps[@]}"; do
                    echo "${php_ps[pid]}"
                done | sort -u | awk '/'${2:-.}'/ {print $2}'
        esac
    }

    fpm_listen() {
        local poolfile listen
        poolfile="$1"
        listen="$(awk -F '\\s*=\\s*' '/^\s*listen/ { sub(/;$/, "", $2); print $2; exit }' "$poolfile")"
        case $2 in
            brief)  echo "${listen//\"/}"
                    ;;
             type)  echo "${listen//\"/}" | awk -F':' '{
                        if ($1 ~ /^\//) {
                            print "unix"
                        } else if ($1 ~ /^\[/) {
                            print "tcpv6"
                        } else if ($1 ~ /^[0-9]+$/) {
                            print "tcp"
                        } else {
                            print "tcpv4"
                        }
                    }'
                    ;;
             full)  echo "${listen//\"/}" | awk -F':' '{
                        if ($1 ~ /^\//) {
                            print "Unix-Socket: " $1
                        } else if ($1 ~ /^\[/) {
                            print "IPv6: " $1 ":" $2
                        } else if ($1 ~ /^[0-9]+$/) {
                            print "Port: " $1
                        } else {
                            print "IPv4: " $1 ":" $2
                        }
                    }'
        esac
    }

    fpm_pool() {
        local ver glob poolfile pool
        local -A pools
        ver=$1
        glob=$(fpm_include $ver glob)
#        for poolfile in $(ls $glob 2>/dev/null); do
        for poolfile in $glob; do # bash has its builtin glob functionality
            pool="$(sed -n '/^\[.*\]$/ {s/^\[\(.*\)\]$/\1/p}' "$poolfile")"
            pools[$pool]="$(fpm_listen "$poolfile" brief)"
        done
        if [[ " ${!pools[@]} " =~ " $2 " ]]; then
            echo "${pools[$2]}"
        else
            echo "${!pools[@]}"
        fi
    }

    check_fpm_pool_files(){
        [[ "$(phpquery -v $OLD -S)" =~ fpm ]] || return # return if no fpm installed for php$OLD
        local pkgold pkgnew odir ndir ext be plu this
        local -a ofiles nfiles alt_indexes alt_files pools
        local -i i www_index alt_index
        pkgold="php$OLD-fpm" pkgnew="php$NEW-fpm"
        # is installed $pkgold || return
        odir="$(fpm_include $OLD dir)" ndir="$(fpm_include $NEW dir)"
        [ -d "$odir" ] || return # for the sake of stability
        [ -d "$ndir" ] || mkdir -p "$ndir" # If everything is edited by admin, take over his changes ;)
        nonullglob "$odir/*" && ofiles=($(ls "$odir"))
        nonullglob "$ndir/*" && nfiles=($(ls "$ndir"))
        [ "$(fpm_include $OLD ext)" = "$(fpm_include $NEW ext)" ] && ext="$(fpm_include $OLD ext)" || return #

        if (( ${#ofiles[@]} > 1 ));then
            if [[ "${ofiles[@]}" =~ www.$ext && ! " ${ofiles[@]} " =~ " www.$ext " ]];then
                for i in ${!ofiles[@]};do
                    [[ "${ofiles[i]}" =~ www.$ext && ! -f "$ndir/${ofiles[i]}" ]]&&www_index=$i
                    [[ "${ofiles[i]} " =~ ".$ext " && ! -f "$ndir/${ofiles[i]}" ]]&&alt_indexes+=($i)
                done
                if (( ${#alt_indexes[@]} ));then
                    (( ${#alt_indexes[@]} == 1 ))&&be='was' plu=' a:' this=this||be='were' plu=':s' this=these
                    for i in ${!alt_indexes[@]};do
                        alt_index=${alt_indexes[i]}
                        alt_files+=("${ofiles[alt_index]}")
                        pools+=("$(grep '^\[' "$odir/${ofiles[alt_index]}")")
                    done
                    poolstring="$(listify B ${pools[@]})"
                    string="The default fpm pool $(B)[www]$(N) for $pkgold is deactivated ($(GRAY)the file $odir/www.$ext has been renamed to $odir${ofiles[www_index]}$(N)) but${plu%:*} custom created pool${plu#*:} $poolstring $be found"
                fi
            else
                for i in ${!ofiles[@]};do [[ "${ofiles[i]} " =~ ".$ext " && ! -f "$ndir/${ofiles[i]}" ]]&&alt_indexes+=($i);done
                if (( ${#alt_indexes[@]} ));then
                    (( ${#alt_indexes[@]} == 1 ))&&be='was' plu=' a:' this=this||be='were' plu=':s' this=these
                    for i in ${!alt_indexes[@]};do
                        alt_index=${alt_indexes[i]}
                        alt_files+=("${ofiles[alt_index]}")
                        pools+=("$(grep '^\[' "$odir/${ofiles[alt_index]}")")
                    done
                    poolstring="$(listify B ${pools[@]})"
                    string="Beside the default fpm pool $(B)[www]$(N)${plu%:*} custom created pool${plu#*:} $poolstring $be found"
                fi
            fi
            if (( ${#alt_files[@]} ));then
                separator
                f;echo " -$(format_string "$string" 3)"
                if ask "$(qpf)Do you want to migrate $this pool${plu#*:} from $pkgold to $pkgnew" "$YES"; then
                    if ((www_index));then
                        mv $ndir/www.$ext $ndir/${ofiles[www_index]}
                        if [ -f "$ndir/${ofiles[www_index]}" ];then
                            echo "R:$(format_string "Successfully moved $(C)$ndir/www.$ext$(N) to $(C)$ndir/${ofiles[www_index]}" 3;N)"
                        fi
                    fi
                    for i in ${!alt_files[@]}; do
                        sed "s/$OLD/$NEW/g" "$odir/${alt_files[i]}" > "$ndir/${alt_files[i]}"
                        if [ -f "$ndir/${alt_files[i]}" ];then
                            echo "R:$(format_string "Successfully created poolfile $(C)"$ndir/${alt_files[i]}"$(N)" 3;N)"
                        fi
                    done
                    separator
                fi
            fi
        fi
    }

}

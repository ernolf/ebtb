__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${PHP_FPM_BASHLIB:-_} && return
PHP_FPM_BASHLIB=:

#globals
if ! q2 declare -p SAPI_FPM | ${X[grep]} -qs 'declare -A'; then
    unset SAPI_FPM
    q2 declare -gA SAPI_FPM || declare -A SAPI_FPM
fi

fpm_conf_regex(){
    [ -n "${X[apache2ctl]}" ] || return
    [ -f "${F[php]:="${D[vt]}/php"}" ] && . "${F[php]}"
    fpm_conf="$(q2 ${X[apache2ctl]} -t -D DUMP_INCLUDES | ${X[gawk]} '/php'${PHP[vregex]}'-fpm/{print $NF}' | sed_ "s/${PHP[vregex]}/${PHP[vregex]}/")"
    [ -n "$fpm_conf" ] || fpm_conf="$(unquote $(q2 ${X[apache2ctl]} -t -D DUMP_RUN_CFG | ${X[gawk]} '/ServerRoot/{print $NF}'))/conf-enabled/php${PHP[vregex]}-fpm\.conf"
    printf %s "$fpm_conf"
}

fpm_configfile(){
    require_arg $@
    local ver conf
    local -i r
    ver="$1"
    [ -n "${X[php-fpm$ver]}" ] || return 1
    conf="$(${X[php-fpm$ver]} -t 2>&1 | ${X[grep]} -o "/[^ ':]*\.conf" | ${X[sort]} -u)"
    [ -f "$conf" ] && r=0 || r=1
    printf '%s' "$conf"
    return $r
}

fpm_include(){
    required_args 2 $@
    local ver conf include
    ver="$1"
    conf="$(fpm_configfile $ver)" || return 1
    include="$(${X[gawk]} -F' |=' '/^\s*include/ {print $NF}' $conf)"
    case "$2" in
      glob) echo "$include"
            ;;
       dir) echo "${include%/*}"
            ;;
       ext) echo "${include##*\.}"
    esac
}

fpm_ps_info(){
    require_arg $@
    local ver pool
    local -i pid
    local -a php_ps
    for pid in $(${X[ps]} -ef | ${X[gawk]} '/php-fpm/ && !/root/ {print $2}'); do
        ver=$(${X[ps]} -p $pid --no-headers | ${X[gawk]} '{print $NF}')
        pool=$(${X[ps]} -p $pid -o args= | ${X[gawk]} '{print $NF}')
        case "$1" in
          long) php_ps[pid]="${ver} pool: $pool" ;;
             *) php_ps[pid]="${ver#php-fpm} $pool"
        esac
    done
    case "$1" in
      long) for pid in "${!php_ps[@]}"; do
                echo "PID: $pid, Version: ${php_ps[pid]}"
            done
            ;;
     brief) for pid in "${!php_ps[@]}"; do
                echo "${php_ps[pid]}"
            done | ${X[sort]} -u | ${X[grep]} "${2:-.}"
            ;;
   version) for pid in "${!php_ps[@]}"; do
                echo "${php_ps[pid]}"
            done | ${X[sort]} -u | ${X[gawk]} '/'${2:-.}'/ {print $1}'
            ;;
      pool) for pid in "${!php_ps[@]}"; do
                echo "${php_ps[pid]}"
            done | ${X[sort]} -u | ${X[gawk]} '/'${2:-.}'/ {print $2}'
    esac
}

fpm_pools(){
    local v dir ext file
    local -i i index
    local -a files pools
    local -A bool
    bool[strip]=_
    [ "$1" = 'strip' ] && bool[strip]=:
    for v in $(${X[phpquery]} -V | ${X[sort]}); do
        q0 fpm_configfile "$v" || continue
        files=() pools=()
        [[ "$(${X[phpquery]} -v "$v" -S)" =~ fpm ]]
        dir="$(fpm_include "$v" dir)"
        ext="$(fpm_include "$v" ext)"
        [ -d "$dir" ] || continue
        nonullglob "$dir/*" && files=("$dir/*\.$ext")
        (( ${#files[@]} )) || continue
        for file in ${files[@]}; do
            ${bool[strip]} && pools+=("$(${X[gawk]} -F ] '/^\[/{print $1}' "$file")") || pools+=("$(${X[grep]} '^\[' "$file")")
        done
        ${bool[strip]} && echo "$v ${pools[@]#[}" || echo "$v ${pools[@]}"
    done
}

fpm_listen(){
    require_arg $@
    local poolfile listen
    poolfile="$1"
    [ -n "$poolfile" ] || return 1
    listen="$(${X[gawk]} -F '\\s*=\\s*' '/^\s*listen/ { sub(/;$/, "", $2); print $2; exit }' "$poolfile")"
    case ${2:-full} in
        brief)
            echo "${listen//\"/}"
            ;;
         type)
            echo "${listen//\"/}" | ${X[gawk]} -F':' '{
                if ($1 ~ /^\//) {
                    print "unix"
                } else if ($1 ~ /^\[/) {
                    print "tcpv6"
                } else if ($1 ~ /^[0-9]+$/) {
                    print "tcp"
                } else {
                    print "tcpv4"
                }
            }'
            ;;
         full)
            echo "${listen//\"/}" | ${X[gawk]} -F':' '{
                if ($1 ~ /^\//) {
                    print "Unix-Socket: " $1
                } else if ($1 ~ /^\[/) {
                    print "IPv6: " $1 ":" $2
                } else if ($1 ~ /^[0-9]+$/) {
                    print "Port: " $1
                } else {
                    print "IPv4: " $1 ":" $2
                }
            }'
            ;;
        *)  :
    esac
}

fpm_sockets(){
    if [ "$1" = 'versions' ]; then
        [ -f "${F[php]:="${D[vt]}/php"}" ] && . "${F[php]}"
        ${X[ss]} -lx | ${X[gawk]} '/fpm/{print $5}' | ${X[grep]} -Eo "${PHP[vregex]}"
    else
        ${X[ss]} -lx | ${X[gawk]} '/fpm/{print $5}'
    fi
}

fpm_socket(){
    require_arg $@
    local ver qpool glob poolfile pool
    local -A pools
    ver="$1" qpool="$2"
    glob=$(fpm_include "$ver" glob) || return 1
#    for poolfile in $(q2 ${X[ls]} $glob); do
    for poolfile in $glob; do # bash has its builtin glob functionality
        pool="$(sed_ '/^\[.*\]$/ {s/^\[(.*)\]$/\1/p}' "$poolfile" '-')"
        pools[$pool]="$(fpm_listen "$poolfile" brief)"
    done
    (( ${#pools[@]} )) || return 1
    if [[ " ${!pools[@]} " =~ " $qpool " ]]; then
        echo "${pools[$qpool]}"
    else
        echo "${!pools[@]}"
    fi
}

canonicalize_if_(){
    require_arg $@
    local sock canonicalized_sock
    sock="$1"
    canonicalized_sock="$(${X[realpath]} "$sock")"
    if [ "$sock" = "$canonicalized_sock" ]; then
        echo "$(Yi)$sock$(N)"
    else
        echo "$(GRAY)$sock -> $(Yi)$canonicalized_sock$(N)"
    fi
}

fpm_connections_tag(){
    require_arg $@
    local conf_file
    conf_file="$1"
    ${X[gawk]} '
    BEGIN {
        in_block = 0;
        block = "";
        relevant = 0;
    }
    # Detect the start of a block (FilesMatch or LocationMatch)
    /^[[:space:]]*<(FilesMatch|LocationMatch)[^>]*>/ {
        # Skip block if the opening tag is commented out
        if ($0 ~ /^[[:space:]]*#/) {
            in_block = 0;
            next;
        }
        in_block = 1;
        block = FNR ": " $0 "\n";  # prepend line number
        relevant = 0;
        next;
    }
    # If we are inside a block, process the lines
    in_block {
        # Skip commented lines
        if ($0 ~ /^[[:space:]]*#/) next;
        block = block FNR ": " $0 "\n";  # prepend line number for each line
        # Check if the line contains a PHP-FPM related directive
        if ($0 ~ /SetHandler[[:space:]]*".*proxy:unix:/ || $0 ~ /ProxyPass[[:space:]]*".*unix:/) {
            relevant = 1;
        }
        # If end of block is reached, output if relevant and reset
        if ($0 ~ /<\/(FilesMatch|LocationMatch)>/) {
            if (relevant) {
                sub(/\n$/, "", block);  # remove trailing newline
                print block;
            }
            in_block = 0;
            block = "";
            relevant = 0;
        }
        next;
    }
    ' "$conf_file"
}

fpm_connections_line(){
    require_arg $@
    local conf_file
    conf_file="$1"
    ${X[gawk]} '
        # Ignore commented lines
        /^[[:space:]]*#/ { next }
        # Print complete line with line number if SetHandler with proxy:unix: is found
        /SetHandler/ && /proxy:unix:/ { print FNR ": " $0 }
        # Print complete line with line number if ProxyPass (or ProxyPassMatch) with unix: is found
        (/ProxyPass/ || /ProxyPassMatch/) && /unix:/ { print FNR ": " $0 }
        # Print complete line with line number if FastCgiExternalServer with -socket is found
        /FastCgiExternalServer/ && /-socket/ { print FNR ": " $0 }
    ' "$conf_file"
}

fpm_connections_socket(){
    require_arg $@
    local conf_file
    conf_file="$1"
    ${X[gawk]} '
        /SetHandler/ && /proxy:unix:/ && !/^ *#/ {
            match($0, /proxy:unix:[^|"]+/)
            if (RSTART > 0) print FNR ": " substr($0, RSTART, RLENGTH)
        }
        /ProxyPass/ && /unix:/ && !/^ *#/ {
            match($0, /unix:[^|"]+/)
            if (RSTART > 0) print FNR ": " substr($0, RSTART, RLENGTH)
        }
        /ProxyPassMatch/ && /unix:/ && !/^ *#/ {
            match($0, /unix:[^|"]+/)
            if (RSTART > 0) print FNR ": " substr($0, RSTART, RLENGTH)
        }
        /FastCgiExternalServer/ && /-socket/ && !/^ *#/ {
            match($0, /-socket[[:space:]]+[^ ]+/)
            if (RSTART > 0) print FNR ": " substr($0, RSTART + 8, RLENGTH - 8)
        }
    ' "$conf_file"
}

detect_apache2_php_fpm_(){
    required_args 2 $@
    local type conf_file connection
    local -a fpm_connections
    local -A bool
    type="$1" conf_file="$2" bool[socket]=_
#    [[ "$conf_file" =~ $(fpm_conf_regex) ]] && return
    case $type in
        _test_)
            mapfile -t fpm_connections < <(fpm_connections_socket "$conf_file")
            ;;
        tag)
            mapfile -t fpm_connections < <(fpm_connections_tag "$conf_file")
            ;;
        line)
            mapfile -t fpm_connections < <(fpm_connections_line "$conf_file")
            ;;
        socket)
            mapfile -t fpm_connections < <(fpm_connections_socket "$conf_file")
            ;;
        socket_only)
            mapfile -t fpm_connections < <(fpm_connections_socket "$conf_file")
            bool[socket]=:
    esac
    # Output or process the results
    if (( "${#fpm_connections[@]}" )); then
        if [ "$type" = '_test_' ]; then
            return 0
        fi
        ${bool[socket]} || readlink_if_ "$conf_file" quiet
        for connection in "${fpm_connections[@]}"; do
            if [[ -n "$connection" ]]; then
                # Extract the actual connection string
                conn_string="${connection#*: }"
                # Match IPv4 address with port
                if [[ "$conn_string" =~ fcgi://([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+):([0-9]+) ]]; then
                    ${bool[socket]} || echo -n "Tcp4 socket: "
                    echo "${BASH_REMATCH[1]}:${BASH_REMATCH[2]}"
                # Match IPv6 address with port
                elif [[ "$conn_string" =~ fcgi://\[([0-9a-fA-F:]+)\]:([0-9]+) ]]; then
                     ${bool[socket]} || echo -n "Tcp6 socket: "
                    echo "[${BASH_REMATCH[1]}]:${BASH_REMATCH[2]}"
                # Match only port (listen on all interfaces)
                elif [[ "$conn_string" =~ fcgi://:([0-9]+) ]]; then
                     ${bool[socket]} || echo -n "Tcp socket: "
                    echo "*:${BASH_REMATCH[1]}"
                # Match Unix socket
                elif [[ "$conn_string" =~ unix:([^[:space:]]+) ]]; then
                     ${bool[socket]} || echo -n "Unix socket: "
                    echo "${BASH_REMATCH[1]}"
                fi
            fi
        done
        ${bool[socket]} || for connection in "${fpm_connections[@]}"; do echo "Line-Nr. $connection"; done
    elif [ "$type" = '_test_' ]; then
        return 1
    fi
}

detect_matching_apache2_php_fpm_configfiles_(){
    required_args 2 $@
    local socket conf_file configured_socket canonical_socket canonical_configured_socket
    local -a configured_sockets
    socket="$1" conf_file="$2"
    if detect_apache2_php_fpm_ _test_ "$conf_file"; then
        mapfile -t configured_sockets< <(detect_apache2_php_fpm_ "socket_only" "$conf_file")
        if (( ${#configured_sockets[@]} )) && [[ ! "$conf_file" =~ $(fpm_conf_regex) ]]; then
            canonical_socket="$(canonicalize "$socket")"
            for configured_socket in "${configured_sockets[@]}"; do
                canonical_configured_socket="$(canonicalize "$configured_socket")"
                if [ "$canonical_socket" = "$canonical_configured_socket" ]; then
                    echo "$conf_file"
                fi
            done
        fi
    fi
}

fpm_reload(){
    local installed_fpm
    [ -f "${F[php]:="${D[vt]}/php"}" ] && . "${F[php]}"
    for installed_fpm in $(${X[dpkg]} -l | ${X[gawk]} '/^[hiu]i.*php'${PHP[vregex]}'-fpm/  { print $2 }'); do
        ${X[systemctl]} reload $installed_fpm
    done
}

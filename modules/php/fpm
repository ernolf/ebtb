__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${FPM_BASHLIB:-false} && return
FPM_BASHLIB=:

declare -A SAPI_FPM

fpm_configfile(){
    local ver conf
    local -i r
    ver="$1"
    conf="$(php-fpm$ver -t 2>&1 | grep -o "/[^ ':]*" | sort -u)"
    [ -f "$conf" ] && r=0 || r=1
    printf '%s' "$conf"
    return $r
}

fpm_include(){
    local ver conf include
    ver=$1
    conf="$(fpm_configfile $ver)" || return=1
    include="$(awk -F' |=' '/^\s*include/ {print $NF}' $conf)"
    case $2 in
      glob) echo "$include"
            ;;
       dir) echo "${include%/*}"
            ;;
       ext) echo "${include##*\.}"
    esac
}

fpm_ps_info(){
    local ver pool
    local -i pid
    local -a php_ps
    for pid in $(ps -ef | awk '/php-fpm/ && !/root/ {print $2}'); do
        ver=$(ps -p $pid --no-headers | awk '{print $NF}')
        pool=$(ps -p $pid -o args= | awk '{print $NF}')
        case $1 in
          long) php_ps[pid]="${ver} pool: $pool" ;;
             *) php_ps[pid]="${ver#php-fpm} $pool"
        esac
    done
    case $1 in
      long) for pid in "${!php_ps[@]}"; do
                echo "PID: $pid, Version: ${php_ps[pid]}"
            done
            ;;
     brief) for pid in "${!php_ps[@]}"; do
                echo "${php_ps[pid]}"
            done | sort -u | grep "${2:-.}"
            ;;
   version) for pid in "${!php_ps[@]}"; do
                echo "${php_ps[pid]}"
            done | sort -u | awk '/'${2:-.}'/ {print $1}'
            ;;
      pool) for pid in "${!php_ps[@]}"; do
                echo "${php_ps[pid]}"
            done | sort -u | awk '/'${2:-.}'/ {print $2}'
    esac
}

fpm_pools(){
    local v dir ext file strip
    local -a files pools
    local -i i index
    strip=false
    [ "$1" = 'strip' ] && strip=:
    for v in ${VERSIONS[@]}; do
        fpm_configfile "$v" &>/dev/null || continue
        files=() pools=()
        [[ "$(phpquery -v "$v" -S)" =~ fpm ]]
        dir="$(fpm_include "$v" dir)"
        ext="$(fpm_include "$v" ext)"
        [ -d "$dir" ] || continue
        nonullglob "$dir/*" && files=("$dir/*\.$ext")
        (( ${#files[@]} )) || continue
        for file in ${files[@]};do
            $strip && pools+=("$(awk -F ] '/^\[/{print $1}' "$file")") || pools+=("$(grep '^\[' "$file")")
        done
        $strip && echo "$v ${pools[@]#[}" || echo "$v ${pools[@]}"
    done
}

fpm_listen(){
    local poolfile listen
    poolfile="$1"
    listen="$(awk -F '\\s*=\\s*' '/^\s*listen/ { sub(/;$/, "", $2); print $2; exit }' "$poolfile")"
    case $2 in
        brief)
            echo "${listen//\"/}"
            ;;
         type)
            echo "${listen//\"/}" | awk -F':' '{
                if ($1 ~ /^\//) {
                    print "unix"
                } else if ($1 ~ /^\[/) {
                    print "tcpv6"
                } else if ($1 ~ /^[0-9]+$/) {
                    print "tcp"
                } else {
                    print "tcpv4"
                }
            }'
            ;;
         full)
            echo "${listen//\"/}" | awk -F':' '{
                if ($1 ~ /^\//) {
                    print "Unix-Socket: " $1
                } else if ($1 ~ /^\[/) {
                    print "IPv6: " $1 ":" $2
                } else if ($1 ~ /^[0-9]+$/) {
                    print "Port: " $1
                } else {
                    print "IPv4: " $1 ":" $2
                }
            }'
    esac
}

fpm_sockets(){
    if [ "$1" = 'versions' ]; then
        ss -lx | awk '/fpm/{print $5}' | grep -Eo "${PHPVREGEX#php}"
    else
        ss -lx | awk '/fpm/{print $5}'
    fi
}

fpm_socket(){
    local ver glob poolfile pool
    local -i r
    local -A pools
    ver=$1
    glob=$(fpm_include "$ver" glob) && r=0 || r=1
    # for poolfile in $(ls $glob 2>/dev/null); do
    for poolfile in $glob; do # bash has its builtin glob functionality
        pool="$(sed -n '/^\[.*\]$/ {s/^\[\(.*\)\]$/\1/p}' "$poolfile")"
        pools[$pool]="$(fpm_listen "$poolfile" brief)"
    done
    if [[ " ${!pools[@]} " =~ " $2 " ]]; then
        echo "${pools[$2]}"
    else
        echo "${!pools[@]}"
    fi
    return $r
}

__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${SURY_BASHLIB:-false} && return
SURY_BASHLIB=:

. <(lrequire binaries)
. <(lrequire basics)
. <(lrequire tempfile)
. <(lrequire fstring)
. <(lrequire dpkg)
. <(lrequire dist/os_release)

sury(){
    # return codes:
    #    0 = OK: 1 or more correct apt sources
    #   32 = No sury repo detected
    #   33 = OK but 1 or more wrong protocol (http instead of https)
    #   34 = OK but 1 or more wrong architecture
    #   35 = 33 and 34
    #   36 = 1 or more wrong suite (apt source codename)
    #   37 = 36 and 33
    #   38 = 36 and 34
    #   39 = 36, 33 and 34
    #   40 = 1 or more wrong suit AND wrong protocol
    #   41 = 40 and 33
    #   42 = 40 and 34
    #   43 = 40, 33 and 34
    #   44 = 40 and 36
    #   45 = 40, 36 and 33
    #   46 = 40, 36, 33 and 34
    #   48 = 1 or more wrong apt source (debian <-> ubuntu)
    #   64 = Not-OK
    #  128 = unknown distributor
    local -i r=128 i
    local -l id codename wrong_codename architecture aptsource wrong_aptsource asu asd return
    local -a architectures aptsources
    asu='ppa.launchpadcontent.net_ondrej_php_ubuntu_' # aptsource ubuntu
    asd='packages.sury.org_php_' # aptsource debian

    if [[ " $(${BINARIES[tail]} -n3 "$ca_me"|${BINARIES[head]} -n1) " =~ " sury " ]]; then
        id="$(${BINARIES[tail]} -n3 "$ca_me"|${BINARIES[head]} -n1|${BINARIES[gawk]} '{print $(NF-1)}')"
        codename="$(${BINARIES[tail]} -n3 "$ca_me"|${BINARIES[head]} -n1|${BINARIES[gawk]} '{print $(NF)}')"
        case $id in
            ubuntu) aptsource="$asu" wrong_aptsource="$asd" ;;
            debian) aptsource="$asd" wrong_aptsource="$asu"
        esac
    else
        codename="$OS_VERSION_CODENAME"
        case $OS_ID in
            ubuntu) aptsource="$asu" wrong_aptsource="$asd"
                    ;;
   debian|raspbian) aptsource="$asd" wrong_aptsource="$asu"
                    ;;
                 *) if [ -n "$OS_ID_LIKE" ]; then
                        case ${OS_ID_LIKE% *} in
                            debian)
                                if [ -n $OS_DEBIAN_CODENAME ]; then
                                    aptsource="$asd" wrong_aptsource="$asu" codename="$OS_DEBIAN_CODENAME"
                                elif [ -n $OS_UBUNTU_CODENAME ]; then
                                    aptsource="$asu" wrong_aptsource="$asd" codename="$OS_UBUNTU_CODENAME"
                                fi
                                ;;
                            ubuntu)
                                if [ -n $OS_UBUNTU_CODENAME ]; then
                                    aptsource="$asu" wrong_aptsource="$asd" codename="$OS_UBUNTU_CODENAME"
                                fi
                                ;;
                            *)  aptsource='' r=128 return="unknown distributor $OS_ID"
                        esac
                    else
                        aptsource='' wrong_aptsource='' r=128 return="unknown distributor $OS_ID"
                    fi
        esac
    fi

    if [ -n "${BINARIES[dpkg]}" ]; then
        architecture="$(${BINARIES[dpkg]} --print-architecture )"
        mapfile -t architectures< <(p_sort $architecture $(q2 ${BINARIES[dpkg]} --print-foreign-architectures))
        if [ -d /var/lib/apt/lists ] && [ -n "$aptsource" ]; then
            # apt sources
            mapfile -t aptsources< <(p_sort "$(cd /var/lib/apt/lists/;ls *Packages|${BINARIES[sed]} 's/_Packages.*$//;s/-deb.*$//;s/_dists_/_/;s/_binary-/_/')")
            if (( ${#aptsources[@]} )); then
                if (( ${#aptsources[@]} == 1 )); then
                    if [[ "${aptsources[0]}" =~ $aptsource${codename}_main_($(echo ${architectures[@]}|${BINARIES[tr]} ' ' '|')) ]]; then
                        r=0 return="OK"
                    elif [[ "${aptsources[0]}" =~ ${aptsource//content/}${codename}_main_($(echo ${architectures[@]}|${BINARIES[tr]} ' ' '|')) ]]; then
                        r=33 return="OK but http instead of https"
                    elif [[ "${aptsources[0]}" =~ $aptsource${codename}_main_ ]]; then
                        r=34 return="OK but wrong architekture"
                    elif [[ "${aptsources[0]}" =~ $aptsource ]]; then
                        r=36 return="wrong - apt source for ${aptsources[0]#$aptsource} instead of $codename"
                    elif [[ "${aptsources[0]}" =~ ${aptsource//content/} ]]; then
                        r=40 return="wrong - apt source for ${aptsources[0]#$aptsource} instead of $codename, http instead of https"
                    elif [[ "${aptsources[0]}" =~ $wrong_aptsource || "${aptsources[0]}" =~ ${wrong_aptsource//content/} ]]; then
                        r=48 return="wrong - apt source for wrong distribution"
                    else
                        r=32 return="No sury repo detected"
                    fi
                else
                    return="multi" r=32
                    local wrong_protocol=false wrong_architecture=false wrong_suite=false wrong_suite_protocol=false wrong_distrib=false
                    for i in ${!aptsources[@]}; do
                        if [[ "${aptsources[i]}" =~ $aptsource${codename}_main_($(echo ${architectures[@]}|${BINARIES[tr]} ' ' '|')) ]]; then
                            ((r>31))&&r+=-32
                            return="$return - $((i+1)) = OK"
                        elif [[ "${aptsources[i]}" =~ ${aptsource//content/}${codename}_main_($(echo ${architectures[@]}|${BINARIES[tr]} ' ' '|')) ]]; then
                            $wrong_protocol||r+=1 return="$return - $((i+1)) = OK but http instead of https"
                            wrong_protocol=true
                        elif [[ "${aptsources[i]}" =~ $aptsource${codename}_main_ ]]; then
                            $wrong_architecture||r+=2 return="OK but wrong architekture"
                            wrong_architecture=true
                        elif [[ "${aptsources[i]}" =~ $aptsource ]]; then
                            wrong_codename="$(echo ${aptsources[i]//_/ }|${BINARIES[gawk]} '{print $(NF-2)}')"
                            $wrong_suite||r+=4 return="$return - $((i+1)) = wrong - apt source for $wrong_codename instead of $codename"
                            wrong_suite=true
                        elif [[ "${aptsources[i]}" =~ ${aptsource//content/} ]]; then
                            $wrong_suite_protocol||r+=8 return="$return - $((i+1)) = wrong - apt source for ${aptsources[i]#$aptsource} instead of $codename, http instead of https"
                            wrong_suite_protocol=true
                        elif [[ "${aptsources[i]}" =~ $wrong_aptsource || "${aptsources[i]}" =~ ${wrong_aptsource//content/} ]]; then
                            $wrong_distrib||r+=16 return="$return - $((i+1)) = wrong - apt source for wrong distribution"
                            wrong_distrib=true
                        fi
                    done
                    if [ "$return" = "multi" ]; then
                        r=32 return="No sury repo detected"
                    fi
                fi
            else
                r=64 return='Not-OK'
            fi
        fi
    fi
    printf "$return"
    return $r
}

fix_yourself_if_fails(){ local string
    string="If this step fails, you should fix it yourself please. Do not run this step multiple times then. If it doesn't work after one attempt, it won't work on the second and subsequent attempts either. It will propably be fixed though in a future version of this script, so you can run this script again at a later time to try again if it fails now."
    GRAY;echo "  $(format_string "$string" 3;N)"
}

need_sury_repo(){
    local sury_return id codename wrong_codename asu asd aptsource wrong_aptsource http_aptsource hhtp_token https_token aptsource_file success
    local -i sury_r i
    local -a aptsource_files successes
    asu='https://ppa.launchpadcontent.net/ondrej/php/ubuntu'
    asd='https://packages.sury.org/php'
    sury_return="$(sury)"
    sury_r=$?
    if [[ " $(${BINARIES[tail]} -n3 "$ca_me"|${BINARIES[head]} -n1) " =~ " sury " ]]; then # OS is supported!
        id="$(${BINARIES[tail]} -n3 "$ca_me"|${BINARIES[head]} -n1|${BINARIES[gawk]} '{print $(NF-1)}')"
        codename="$(${BINARIES[tail]} -n3 "$ca_me"|${BINARIES[head]} -n1|${BINARIES[gawk]} '{print $(NF)}')"
        case $id in
            ubuntu) aptsource="$asu" wrong_aptsource="$asd"
                    http_aptsource='http://ppa.launchpad.net/ondrej/php/ubuntu'
                    http_token='http://ppa.launchpad.net/'
                    https_token='https://ppa.launchpadcontent.net/';;
            debian) aptsource="$asd" wrong_aptsource="$asu"
        esac
        if ((sury_r)); then # NOT 0
            if ((sury_r == 32)); then # no sury repo
                list_apt_sources
                f;os;GRAY;echo "r=$sury_r, $sury_return";N
                f;echo " -$(format_string "$(Y)Consider adding Ondřej Surý's repo to your Apt sources to expand the range of installable PHP candidates" 3;N)"
                f;os;GRAY;echo "Visit Ondřej Surý's website: $(W)https://deb.sury.org/$(GRAY) for more details.";N;f
                os;echo "This script can add the right repo to your apt sources."
                fix_yourself_if_fails
                if ask "$(qpf)Do you want to add sury repo now" "$YES"; then
                    switch_php_to_ $PHP_VERSION
                    if min_version apt 2.4; then
                        add_repository_deb822 "$id" "$codename"
                    else
                        add_repository "$id" "$codename"
                    fi
                    sury_return="$(sury)"
                    sury_r=$?
                    if ((sury_r == 32)); then # still no sury repo
                        mh "adding apt source failed"
                        f;os;R;echo "Unfortunately this step was not successfull. Please add the apt source yourself.";N
                        anykey
                    else
                        mh "adding apt source succeeded"
                        f;os;G;echo "This step was successfull";N
                        anykey
                        "$me${FLAG[forceflag]}" "json=$my_json" --list-candidates
                    fi
                fi
            elif ((sury_r == 33)); then # http instead of https
                list_apt_sources
                f;os;GRAY;echo "r=$sury_r, $sury_return";N
                f;echo " -$(format_string "Ondřej Surý's repo is added to the apt sources but the deprecated http source $(C)http://ppa.launchpad.net/..$(N) is used instead of $(B)https://ppa.launchpadcontent.net/.." 3;N)"
                if min_version apt 2.0; then
                    echo "  $(format_string "$(Y)Consider fixing this for all your ppa.launchpad sources.$(N) You can find the affected files in $(B)/etc/apt/sources.list.d/$(N) directory as listed above. Simply replace $(C)http://ppa.launchpad.net$(N) with $(B)https://ppa.launchpadcontent.net$(N) in all affected files and run $(dY)sudo apt-get update$(N) and start this script again, if this message dissapeared, you did everything right." 3)"
                    f;os;echo "This script can replace the http URIs with the new https URIs for you."
                    fix_yourself_if_fails
                    if ask "$(qpf)Do you want to replace http URIs with https URIs now" "$YES"; then
                        switch_php_to_ $PHP_VERSION
                        if (nonullglob "/etc/apt/sources.list.d/*\.list" || nonullglob "/etc/apt/sources.list.d/*\.sources"); then
                            for aptsource_file in /etc/apt/sources.list.d/*\.{list,sources}; do
                                if [ -f "$aptsource_file" ]; then
                                    if ${BINARIES[grep]} -Eiqs "^(deb|uris).*$http_token" "$aptsource_file"; then
                                        aptsource_files+=("$aptsource_file")
                                        successes+=(false)
                                    fi
                                fi
                            done
                        fi
                        if (( ${#aptsource_files[@]} )); then
                            for i in ${!aptsource_files[@]}; do
                                if [ "${aptsource_files[0]##*.}" = 'list' ]; then
                                    ${BINARIES[sed]} -i "/^deb.*launchpad\.net/ { h; s/^/# /; p; g; s/http:/https:/; s/launchpad.net/launchpadcontent.net/; }" "${aptsource_files[i]}"
                                elif [ "${aptsource_files[0]##*.}" = 'sources' ]; then
                                    ${BINARIES[sed]} -i "/^URIs:.*launchpad\.net/ { h; s/^/# /; p; g; s/http:/https:/; s/launchpad.net/launchpadcontent.net/; }" "${aptsource_files[i]}"
                                fi
                                if ${BINARIES[grep]} -Eiqs "^(deb|uris).*$http_token" "${aptsource_files[i]}"; then
                                    mh "replacing $http_token with $https_token in ${aptsource_files[i]} failed"
                                else
                                    mh "replacing $http_token with $https_token in ${aptsource_files[i]} succeeded"
                                    successes[i]=true
                                fi
                            done
                        fi
                        if [[ "${successes[@]}" =~ true ]]; then
                            os;G;echo "This step was successfull on this file(s):"
                            for i in ${!successes[@]}; do
                                if ${successes[i]}; then
                                    os;pf;C;echo "${aptsource_files[i]}"
                                fi;N
                                anykey
                            done
                            if [[ "${successes[@]}" =~ false ]]; then
                                os;R;echo "Unfortunately this step was not successfull on this file(s):"
                                for i in ${!successes[@]}; do
                                    if ! ${successes[i]}; then
                                        os;pf;P;echo "${aptsource_files[i]}"
                                    fi
                                done
                                os;R;echo "Please fix it yourself.";N
                                anykey
                            fi
                            apt_update
                            "$me${FLAG[forceflag]}" "json=$my_json" --list-candidates
                        else
                            os;R;echo "Unfortunately this step was not successfull. Please fix it yourself.";N
                            anykey
                        fi
                    fi
                else
                    os;echo "but this is normal on $codename, since the version of this OS is extremely old."
                fi
            elif ((sury_r == 36)); then # apt source for ${aptsources[i]#$aptsource} instead of $codename"
                wrong_codename=$(echo "$sury_return"|${BINARIES[gawk]} '{print $(NF-3)}')
                list_apt_sources
                f;os;GRAY;echo "r=$sury_r, $sury_return";N
                f;echo "  $(format_string "Ondřej Surý's repo is added to the apt sopurces but for $wrong_codename instead of $codename. You should fix that in all affected files and run $(dY)sudo apt-get update$(N) and start this script again, if this message dissapeared, you did everything right." 3)"
                f;os;echo "This script can replace $wrong_codename with $codename  in sury apt-source file for you."
                fix_yourself_if_fails
                if ask "$(qpf)Do you want to replace $wrong_codename with $codename in sury apt-source file now" "$YES"; then
                    success=false
                    switch_php_to_ $PHP_VERSION
                    if nonullglob "/etc/apt/sources.list.d/*\.list"; then
                        for aptsource_file in /etc/apt/sources.list.d/*\.list; do
                            if [ -f "$aptsource_file" ]; then
                                if ${BINARIES[grep]} -Eq "^[^#]*$aptsource/?\s*$wrong_codename" "$aptsource_file"; then
                                    ${BINARIES[sed]} -i "/^[^#]*${aptsource//\//\\/}[\/]\{0,1\}\s*$wrong_codename/ { h; s/^/# /; p; g; s/$wrong_codename/$codename/; }" "$aptsource_file"
                                    if ${BINARIES[grep]} -Eq "^[^#]*$aptsource/?\s*$wrong_codename" "$aptsource_file"; then
                                        mh "replacing $wrong_codename with $codename in $aptsource_file failed"
                                    else
                                        mh "replacing $wrong_codename with $codename in $aptsource_file succeeded"
                                        success=true
                                    fi
                                fi
                            fi
                        done
                    fi
                    if nonullglob "/etc/apt/sources.list.d/*\.sources"; then
                        for aptsource_file in /etc/apt/sources.list.d/*\.sources; do
                            if [ -f "$aptsource_file" ]; then
                                if ! ${BINARIES[grep]} -iq "^enabled: no$" "$aptsource_file"; then
                                    if ${BINARIES[grep]} -Eixq "^uris: $aptsource/?$" "$aptsource_file" && ${BINARIES[grep]} -ixq "^suites: $wrong_codename$" "$aptsource_file"; then
                                        ${BINARIES[sed]} -i "s/$wrong_codename/$codename/g" "$aptsource_file"
                                        if ${BINARIES[grep]} -ixq "^suites: $wrong_codename$" "$aptsource_file"; then
                                            mh "replacing $wrong_codename with $codename in $aptsource_file failed"
                                        else
                                            mh "replacing $wrong_codename with $codename in $aptsource_file succeeded"
                                            success=true
                                        fi
                                    fi
                                fi
                            fi
                        done
                    fi
                    if $success; then
                        apt_update
                        os;G;echo "This step was successfull";N
                        anykey
                        "$me${FLAG[forceflag]}" "json=$my_json" --list-candidates
                    else
                        os;R;echo "Unfortunately this step was not successfull. Please fix it yourself.";N
                        anykey
                    fi
                fi
            fi

        else # = 0, means everything is OK
            list_apt_sources
            f;os;GRAY;echo "r=$sury_r, $sury_return";N
        fi
    else
        os;Y;echo "There exists no Ondřej Surý repo for your OS version";N
        os;GRAY;echo "Visit Ondřej Surý's website: $(W)https://deb.sury.org/$(GRAY) for more details.";N;f
    fi
}

ubuntu_key_asc(){
    ${BINARIES[cat]} << PUBLIC_KEY_ASC
mQINBGYo0vEBEAC0Semxy5I2b8exRUxJfTKkHR4f5uyS0dTd9vYgMI5T3gsa7ypH
HtE+GiZC+T9m/F9h66+XJMxhuNsKRs7T2In5NSeso9H/ytlSTayUaBtCFfRp6y6b
6ozuRBfqYJGxhjAnIzvNF/Wpp2BvfQm3OrQ7uJJrt5IvzLDC4jPxl/Xs3sTT+Hbk
bkKKprZ3xmy2enuwBaNWR/CUtAz3hbkzL1kGbhX9m3QidFJagVVdDw3aNEwo8ush
djWfF+BajNvpDFYJKBGQbCeagB753Baa5yIN62x+THLnLiKTMDS1e7U0ZDiV9671
noTbtN5TeZeyfsEmeZ8X60x11JIP3yYHYZT70/DyTYX3WC9yQFyIgVOfRlGklMKI
k3TLMmtq8w5Hz1vovwzV7PzaQnmY+uNP2ZbAP4fJ3iFAj0L+u0i1nOFgTy0Lq058
O/FjRrQxuceDDCF+9ThspXMw3Puvz8giuBDCdEda84uC7XWMdqgz/maLfFQjAmyP
Ixi1EMxMlHYyZajpR1cdCfrAIQlnQjHSWmyeCFgXPPfRA71aCcJ7oSrDjogW6Ahd
HRkQRKf1FF9BFzycgSQotfR+7CKfPQh1kghufM9W/spARzA709nGZjXJzgEJLQd3
CDB6dIIxT/0YI36h3Qgfmiiw4twO24MMEqEEPIELz2WJKeWGkdQdcekpxQARAQAB
tB9MYXVuY2hwYWQgUFBBIGZvciBPbmTFmWVqIFN1csO9iQJOBBMBCgA4FiEEuNx+
U5RmVu+85MHdcdrqq0rUyrYFAmYo0vECGwMFCwkIBwIGFQoJCAsCBBYCAwECHgEC
F4AACgkQcdrqq0rUyrYOPQ/+IArA4s1J3op/w7cXek0ieFHWHFDrxPYS+78/LF/J
LoYZw0nIU5Ovr+LzehFMIQU6esgPXwbeCVgwLwat57augAkAYWT0UzH5dE6RKAGr
C2vsHWVfPhQn6UndfzwXc0mTLGQni25aQaZ6k60Dbm/vblejrTQrtAUWoMO3Z1cr
NDGJ3Z9DCxtr2o9gRYUI6HwLHJtobTIeI5xsr5x+GvXiIAVCPa3ZEuRL6jMQfqfS
C43mpuiS1kGgsnQLs2DbN7EFCfiJoNX1QzZu25zg+IS9PXbCJnheZWnH0rwUSb/N
hZPcSefGlNlhr824OfT30v79hQnw59XbsfV270O9jPbD4kttN+OiszbU66zsuiOh
BO46XCckQPqDkBMw56GPFuVrQgGb1thXvn67URJgPyJhwauBWKPNAJ9Ojuo+yVq/
hdR1VNWThXQbZgaGSWrbjt6FdYtQb9VX88uu5gFDmr180HogHNUDUcqNLLdnjfFs
4DyJlusQ5I/a7cQ7nlkNgxAmHszwO/mGLBuGljDUYkwZDW9nqP1Q5Q2jMtrhgXvR
2SOtufvecUbB7+eoRSaOnu7CNMATG6LocFEMzhKUde1uZTfWSqnYEcdqoFJMi46y
qaNxhiNLsQ5OBMbgSp2zCbQxRBdITMVvBR5YjCetUIGEs6T1yQ5wh5Xpoi34ShHn
v38=
=kFlZ
-----END PGP PUBLIC KEY BLOCK-----
PUBLIC_KEY_ASC
}

old_ubuntu_key_asc(){
    ${BINARIES[cat]} << PUBLIC_KEY_ASC
xo0ESX35nAEEALKDCUDVXvmW9n+T/+3G1DnTpoWh9/1xNaz/RrUH6fQKhHr568F8
hfnZP/2CGYVYkW9hxP9LVW9IDvzcmnhgIwK+ddeaPZqh3T/FM4OTA7Q78HSvR81m
Jpf2iMLm/Zvh89ZsmP2sIgZuARiaHo8lxoTSLtmKXsM3FsJVlusyewHfABEBAAHN
H0xhdW5jaHBhZCBQUEEgZm9yIE9uZMWZZWogU3Vyw73CtgQTAQIAIAUCSX35nAIb
AwYLCQgHAwIEFQIIAwQWAgMBAh4BAheAAAoJEE9OoKrlJnpsQjYD/jW1NlIFAlT6
EvF2xfVbkhERii9MapjaUsSso4XLCEmZdEGX54GQ01svXnrivwnd/kmhKvyxCqiN
LDY/dOaK8MK//bDI6mqdKmG8XbP2vsdsxhifNC+GH/OwaDPvn1TyYB653kwyruCG
FjEnCreZTcRUu2oBQyolORDl+BmF4DjLwsBzBBABCgAdFiEECvaBvTqO/UqmWMI/
thEcm0xImQEFAmXTV0AACgkQthEcm0xImQGTTggAhuMHGeBZlRUAsZE7jJM7Mf06
/WIhcgUfBfSFnJFlFH+xdEe/GFYyVk9kingDsPh90Ecnt4n8DJHTlsuUV1+SPBIO
JfbQTUjx1n/+Ck+TVKzRByvrpRXtiZQ214m3zbhZpme2eBBMItZByjG7g925NUIq
rL+R5ZoEcZvVlYscfsA0Sr8yJTsGJPefuLYI6eJkNDa1QkzBkSSW4XaCfNIxNBRs
zN/qGe3xy0bibOaC4T2TcbZPSAVP855ahNbLAdqkyfAutiEWcKZmQpR9qNh4482k
0pXVlQJ8UB860gVFHjwjFm/MsCeX8yfeAi38ZyInWL2OSG2pDx5ZzNESwnCPIg==
=3DzI
-----END PGP PUBLIC KEY BLOCK-----
PUBLIC_KEY_ASC
}

ubuntu_key(){
    ${BINARIES[cat]} << PUBLIC_KEY

 -----BEGIN PGP PUBLIC KEY BLOCK-----
 .
$(ubuntu_key_asc|${BINARIES[sed]} 's/^/ /g')

PUBLIC_KEY
}

debian_key_asc(){
    ${BINARIES[cat]} << PUBLIC_KEY_ASC
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
=BOnL
-----END PGP PUBLIC KEY BLOCK-----
PUBLIC_KEY_ASC
}

old_debian_key_asc(){
    ${BINARIES[cat]} << PUBLIC_KEY_ASC
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
zgGtPj/bMFg=
=FhGb
-----END PGP PUBLIC KEY BLOCK-----
PUBLIC_KEY_ASC
}

debian_key(){
    ${BINARIES[cat]} << PUBLIC_KEY

 -----BEGIN PGP PUBLIC KEY BLOCK-----
 .
$(debian_key_asc|${BINARIES[sed]} 's/^/ /g')

PUBLIC_KEY
}

get_ubuntu_key_deb_url() {
    local codename=$1 version url curl_output matches
    version="${UBUNTU_VERSIONS[$codename]}"
    url='https://ppa.launchpadcontent.net/ondrej/php/ubuntu/pool/main/d/debsuryorg-archive-keyring/'
    curl_output=$(tf)
    ${BINARIES[curl]} -so $curl_output $url
    matches=$(${BINARIES[grep]} -oE '<a href="([^"]*ubuntu'$version'[^"]*\.deb)">' "$curl_output")
    if [ -n "$matches" ]; then
        echo "$url$(echo "$matches" | ${BINARIES[gawk]} -F\" '{print $2}')"
    fi
}

# package is eather php, apache2 nginx
sources_list_deb822(){
    ((rte))||{ local -i rte; printf -v rte "%(%s)T" -2;}
    local id="$1" codename="$2" package="$3" architecture aptsource_url
    architecture="$(${BINARIES[dpkg]} --print-architecture)"
    case $id in
        ubuntu) aptsource_url="https://ppa.launchpadcontent.net/ondrej/$package/ubuntu/"
                ;;
        debian) aptsource_url="https://packages.sury.org/$package/"
    esac
    ${BINARIES[cat]} << DEB822
## $package repository list
# created $(${BINARIES[date]} -d @$rte "+%F %R %Z") by ernolfs $bm script
# https://global-social.net/script/$bm

## Deb822-style format:
# https://deb.sury.org
X-Repolib-Name: $package
Enabled: yes
Types: deb
URIs: $aptsource_url
Suites: $codename
Components: main
Architectures: $architecture
Signed-By: $(${id}_key)
DEB822

}

# add_repository $1=ubuntu or debian, $2=codename, $3=package (defaults to php)
add_repository(){
    local -l id codename package gpgfile
    local -i count=0
    id="$1" codename="$2" package="${3:-php}"
    gpgfile='/etc/apt/trusted.gpg.d/ondrej-sury.asc'
    echo -e "-----BEGIN PGP PUBLIC KEY BLOCK-----\n" > $gpgfile
    ${id}_key_asc >>  $gpgfile
    case $id in
        debian) deb_line="deb https://packages.sury.org/$package/ $codename main"
                ;;
        ubuntu) deb_line="deb https://ppa.launchpadcontent.net/ondrej/$package/ubuntu/ $codename main"
    esac
    echo "$deb_line" > /etc/apt/sources.list.d/ondrej-sury_$package.list
    apt_update
    populate_can_array
}

# add_repository $1=ubuntu or debian, $2=codename, $3=package (defaults to php)
add_repository_deb822(){
    local -l id codename package
# TODO 0 -->
#    local -a supported_suites
#    id="$(lsb_release -si)" codename="$(lsb_release -sc)"
# TODO <-- 0
    id="$1" codename="$2" package="${3:-php}"
# TODO 1 -->
#    supported_suites=($(supported_suites_ $id))
# TODO <-- 1
    sources_list_deb822 $id $codename $package > /etc/apt/sources.list.d/ondrej-sury_$package.sources
    apt_update
    populate_can_array
}

supported_suites_(){
    ((rte))||{ local -i rte; printf -v rte "%(%s)T" -2;}
    local url outfile exclude suite architecture date_str
    local -i timestamp
    local -a existing_suites
    local -A last_modified
    outfile=$(tf)
    architecture="$(${BINARIES[dpkg]} --print-architecture)"
    case $1 in
        ubuntu) url='https://ppa.launchpadcontent.net/ondrej/php/ubuntu/dists/' exclude='ondrej'
        ;;
        debian) url='https://packages.sury.org/php/dists/' exclude='\.\.'
    esac
    ${BINARIES[curl]} -so $outfile $url
    mapfile -t existing_suites< <(${BINARIES[grep]} -oP '(?<=href=")[^"]+(?=/")' "$outfile" | ${BINARIES[grep]} -v "$exclude")
    for suite in "${existing_suites[@]}";do
        date_str="$(${BINARIES[grep]} "$suite" "$outfile" | ${BINARIES[grep]} -oP '\d{4}-\d{2}-\d{2}.*\d{2}:\d{2}|\d{2}-[A-Za-z]{3}-\d{4}.*\d{2}:\d{2}')"
        if [[ -n "$date_str" ]]; then
            timestamp=$(${BINARIES[date]} -d "$date_str" "+%s")
            last_modified["$suite"]=$timestamp
        fi
    done
    rm $outfile
    for suite in "${!last_modified[@]}"; do
        if (( $((rte - ${last_modified[$suite]})) < 3600000 )); then
            if ! ${BINARIES[curl]} -s $url$suite/Release | ${BINARIES[grep]} -qs "d41d8cd98f00b204e9800998ecf8427e\s*0 main/binary-$architecture/Packages"; then
                echo "$suite"
            fi
        fi
    done
}

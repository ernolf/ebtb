__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${PHP_SURY_BASHLIB:-_} && return
PHP_SURY_BASHLIB=:

. <(lrequire gpg)
. <(lrequire fstring)
. <(lrequire dpkg)
. <(lrequire dist/os_release)

sury_ubuntu_key(){
    ${X[cat]} << PUBLIC_KEY_ASC
mQINBGYo0vEBEAC0Semxy5I2b8exRUxJfTKkHR4f5uyS0dTd9vYgMI5T3gsa7ypH
HtE+GiZC+T9m/F9h66+XJMxhuNsKRs7T2In5NSeso9H/ytlSTayUaBtCFfRp6y6b
6ozuRBfqYJGxhjAnIzvNF/Wpp2BvfQm3OrQ7uJJrt5IvzLDC4jPxl/Xs3sTT+Hbk
bkKKprZ3xmy2enuwBaNWR/CUtAz3hbkzL1kGbhX9m3QidFJagVVdDw3aNEwo8ush
djWfF+BajNvpDFYJKBGQbCeagB753Baa5yIN62x+THLnLiKTMDS1e7U0ZDiV9671
noTbtN5TeZeyfsEmeZ8X60x11JIP3yYHYZT70/DyTYX3WC9yQFyIgVOfRlGklMKI
k3TLMmtq8w5Hz1vovwzV7PzaQnmY+uNP2ZbAP4fJ3iFAj0L+u0i1nOFgTy0Lq058
O/FjRrQxuceDDCF+9ThspXMw3Puvz8giuBDCdEda84uC7XWMdqgz/maLfFQjAmyP
Ixi1EMxMlHYyZajpR1cdCfrAIQlnQjHSWmyeCFgXPPfRA71aCcJ7oSrDjogW6Ahd
HRkQRKf1FF9BFzycgSQotfR+7CKfPQh1kghufM9W/spARzA709nGZjXJzgEJLQd3
CDB6dIIxT/0YI36h3Qgfmiiw4twO24MMEqEEPIELz2WJKeWGkdQdcekpxQARAQAB
tB9MYXVuY2hwYWQgUFBBIGZvciBPbmTFmWVqIFN1csO9iQJOBBMBCgA4FiEEuNx+
U5RmVu+85MHdcdrqq0rUyrYFAmYo0vECGwMFCwkIBwIGFQoJCAsCBBYCAwECHgEC
F4AACgkQcdrqq0rUyrYOPQ/+IArA4s1J3op/w7cXek0ieFHWHFDrxPYS+78/LF/J
LoYZw0nIU5Ovr+LzehFMIQU6esgPXwbeCVgwLwat57augAkAYWT0UzH5dE6RKAGr
C2vsHWVfPhQn6UndfzwXc0mTLGQni25aQaZ6k60Dbm/vblejrTQrtAUWoMO3Z1cr
NDGJ3Z9DCxtr2o9gRYUI6HwLHJtobTIeI5xsr5x+GvXiIAVCPa3ZEuRL6jMQfqfS
C43mpuiS1kGgsnQLs2DbN7EFCfiJoNX1QzZu25zg+IS9PXbCJnheZWnH0rwUSb/N
hZPcSefGlNlhr824OfT30v79hQnw59XbsfV270O9jPbD4kttN+OiszbU66zsuiOh
BO46XCckQPqDkBMw56GPFuVrQgGb1thXvn67URJgPyJhwauBWKPNAJ9Ojuo+yVq/
hdR1VNWThXQbZgaGSWrbjt6FdYtQb9VX88uu5gFDmr180HogHNUDUcqNLLdnjfFs
4DyJlusQ5I/a7cQ7nlkNgxAmHszwO/mGLBuGljDUYkwZDW9nqP1Q5Q2jMtrhgXvR
2SOtufvecUbB7+eoRSaOnu7CNMATG6LocFEMzhKUde1uZTfWSqnYEcdqoFJMi46y
qaNxhiNLsQ5OBMbgSp2zCbQxRBdITMVvBR5YjCetUIGEs6T1yQ5wh5Xpoi34ShHn
v38=
=kFlZ
PUBLIC_KEY_ASC
}

sury_ubuntu_old_key(){
    ${X[cat]} << PUBLIC_KEY_ASC
xo0ESX35nAEEALKDCUDVXvmW9n+T/+3G1DnTpoWh9/1xNaz/RrUH6fQKhHr568F8
hfnZP/2CGYVYkW9hxP9LVW9IDvzcmnhgIwK+ddeaPZqh3T/FM4OTA7Q78HSvR81m
Jpf2iMLm/Zvh89ZsmP2sIgZuARiaHo8lxoTSLtmKXsM3FsJVlusyewHfABEBAAHN
H0xhdW5jaHBhZCBQUEEgZm9yIE9uZMWZZWogU3Vyw73CtgQTAQIAIAUCSX35nAIb
AwYLCQgHAwIEFQIIAwQWAgMBAh4BAheAAAoJEE9OoKrlJnpsQjYD/jW1NlIFAlT6
EvF2xfVbkhERii9MapjaUsSso4XLCEmZdEGX54GQ01svXnrivwnd/kmhKvyxCqiN
LDY/dOaK8MK//bDI6mqdKmG8XbP2vsdsxhifNC+GH/OwaDPvn1TyYB653kwyruCG
FjEnCreZTcRUu2oBQyolORDl+BmF4DjLwsBzBBABCgAdFiEECvaBvTqO/UqmWMI/
thEcm0xImQEFAmXTV0AACgkQthEcm0xImQGTTggAhuMHGeBZlRUAsZE7jJM7Mf06
/WIhcgUfBfSFnJFlFH+xdEe/GFYyVk9kingDsPh90Ecnt4n8DJHTlsuUV1+SPBIO
JfbQTUjx1n/+Ck+TVKzRByvrpRXtiZQ214m3zbhZpme2eBBMItZByjG7g925NUIq
rL+R5ZoEcZvVlYscfsA0Sr8yJTsGJPefuLYI6eJkNDa1QkzBkSSW4XaCfNIxNBRs
zN/qGe3xy0bibOaC4T2TcbZPSAVP855ahNbLAdqkyfAutiEWcKZmQpR9qNh4482k
0pXVlQJ8UB860gVFHjwjFm/MsCeX8yfeAi38ZyInWL2OSG2pDx5ZzNESwnCPIg==
=3DzI
PUBLIC_KEY_ASC
}

sury_debian_key(){
    ${X[cat]} << PUBLIC_KEY_ASC
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
=BOnL
PUBLIC_KEY_ASC
}

sury_debian_old_key(){
    ${X[cat]} << PUBLIC_KEY_ASC
xsDNBFyPb58BDADTDlJLrGJktWDaUT0tFohjFxy/lL2GcVYp4zB981MWIDC0aIQZ
ERfUZRaq/ov/LG3F0UhkvouCNrnXiFaKRCeNG52pQM0P/p3gmIOoPO4/jF0o3SK1
Aapf/NaKTh3EgeYYCnVKuxdXGqyu1JT4qfztsmUGmODzxVr+/YJLP54jrCUgI3lj
4zEeTBDexQvnlVUF59U1/ipMq4iWqqth8/aMsoZl3Ztfcc87jBFbJIoeQMhZtNZk
Ik7L15aYIZXWY2byBy6LB42HPm9DwM99l2eY4EXGfAq/UQeYbDGonibBqrDURggH
rkLfG7ZfoexF67/9S2s6VYfS4npWVfw2SEPTfSBdibElbGncd+p9Wb6SovqapCPl
crkLgPhBAz/R9M7E/G3zedmiEhsV78pBF3bup+nQVvBVtV/NucN5N6LkAclT4O3F
flGZa1/mJcpgjVapT6duY0POXczfS6ts55x2BE0UfYtXfRnVnHtu2+j8kqYG3N1G
sfVnzRkwtTWBMxMAEQEAAc0xREVCLlNVUlkuT1JHIEF1dG9tYXRpYyBTaWduaW5n
IEtleSA8ZGViQHN1cnkub3JnPsLBFAQTAQoAPgIbAwULCQgHAgYVCgkICwIEFgID
AQIeAQIXgBYhBBUFhQCgI12X9dEAY7GI4raVvUdDBQJlwLeqBQkM868LAAoJELGI
4raVvUdDxVgL/jfrmoVVuux5l2bdXePhJZRRLaLcAT7OiZd2sVbpV8Wwnf1gL7hY
0ti/PLZxtmoQP2G+tgwy8eBx4+y3zK+Khdjnra9rTFnG7wBd2gzvVsLhN3hnVsOQ
k0CUW7oicaNiAB5OfeL2mdaSjhxVGxWYP7qzO0VtoO/MbzECpp/7ESHjTmnlwtu7
5Pvag9Fi2pIerwuKxtJRDS07zhbA/50uX/1p+6maW2iZlxxRYUMyNq3OWA188vKc
uDZS/Gq9uXHsOM3s2z8JXib46teLpJRld1xavHRlKY57T6q2j/oKtIZ81/KoZIFJ
qarvBYAaWlRGwUo6uIzca9/gScX5VR4gphi051SAQUXFQIYKvmrKNdtzrefiXLRi
wb8L+xfIy76H855riPpf5PT617Rtdoh4/+nb11Gyag32o89LO8MscwpgkU8R1vr9
ioHy5vb0DwbD2nz4Tv03RpeHESs2q4BAppwYveIJDHCzDj4LPkLIay831oPjeV3s
nHdeJ5FrK2xGz8LBFAQTAQoAPgIbAwULCQgHAgYVCgkICwIEFgIDAQIeAQIXgBYh
BBUFhQCgI12X9dEAY7GI4raVvUdDBQJlk/cHBQkNE2VoAAoJELGI4raVvUdDgd8M
AMIeuISnbUGrd4x8gIM833I+NgLKYpNydPdzjBPIFhRxDh3K9VIMQwv5hHBlKoq2
v3d4KdO7MG/O/KJa3lX+vomX6GPwtNdCnq0xMD5ZHxlDAFjWAaVWL34ozwOoX8PE
N8v1xZW8t9E9DE5n5z1OTgKR+UCnBbO+nTStOE3TZItvfzJX11G4vOICv+XcLpi0
82Dd4Cu0ud1apaMsbk+wfn/DO12hGI2QGURjwPu7g1X14hp1SC2qnJWgKuMmKN3r
TWQcpvwzoCRdjZA1skqr3QRkMyQ7cA0Jz8udloxS7r3aBHGAo5P7A7UsEsEGHXrV
rT9ylu47JZppucua8DG/HmzGOLdCvqKo3omL52AsbwXTalRfiZSkbHa3J0pw5gzJ
LaO5qQGpjUdSPoVsFpsKz/p8Xo+wBmcEkcrO7qNC/6uq6IyXQc9e0/fBPHUO7hCp
6+mDwgajZd6zd8APrInQC2zra0KtIuPiPh9CbZQQHdA1tJZIdj29Gmc3OyYAnA2p
UsLBFAQTAQoAPgIbAwULCQgHAgYVCgkICwIEFgIDAQIeAQIXgBYhBBUFhQCgI12X
9dEAY7GI4raVvUdDBQJgK4WHBQkJP7BoAAoJELGI4raVvUdDQ/QL+wa0KQ8o8ask
ks4elU1PSdUP/ywacroMtl6BV2d/di/PtquZl4zIp/qAhUmcSJhUJMJBdGQ5S4ux
Cn0rEy2CBO8LhSTFuS01UGVHhjZQLA+GZEMunpS8KbPH5lWuwWwY1bbx9eCwpIxz
z3Krctk8WGvja4EsqIWmRcaQ1z19JndbH8Ekfhf2U7noZNFZIhHIOHK51dOm4oaS
drJUhhd52zrwLf+lOtHh0kkOad+eCByah9XwmO9qSAuHLquSv9BWfnLKSHfwRW+Y
eAHlkELui0Zi6zD2PYqcBAebZWNmyxiJUz0oHJPJH6DoXXxI6OsCdFDkqW5hP/If
VI97fbKMGY9g4RyasJmb/18F7eSFC1S7fj6hHCRnHTKR5cO3PdzYndyICGfaQMUa
+n0HsWZAw8mgWPnKZd3xXt4n+Exx/LBV3ZkOwHT7L9nTPALsoqqEtn0zjOo/eOt9
fmaW9TcvL1V1oiRpEk3lejvF/Wt5zwkPOgys2ZCZTtefx/lGoxC2lsLBFAQTAQoA
PhYhBBUFhQCgI12X9dEAY7GI4raVvUdDBQJcj2+fAhsDBQkDwmcABQsJCAcCBhUK
CQgLAgQWAgMBAh4BAheAAAoJELGI4raVvUdDROUMANJjLVGk6TLYZKyRc8HZXyMR
mw55nCQXsy8DHen6H7MuZHaxV9sf1tF1cQwPnv3HFlg7nZBFszyReW7s3LOcPuNX
S90Sk5o7WLqVMkE+t46iNNGuIt3sWxPdYqY4ueCnUHHEFDKhlwlJnNh3+yVNci4n
V+6SlzoasEjy5P82+pviop3viSlA8lgXdOYERRqZ1wh0Vip5gxcNIdm+TqWINI9+
7T/87GfZzn84Zlvd0GnfjT6aN6RCsIADIOqJUW/TPzvdytwlXc4oZvqk47P0YePS
6VFd+TrIRHHsmYxwTVPNjCT7eMz6AfEtPbTZHWI9oOWU+tiAogeR7k1yORknf+Hc
LZ1RnfDxyWgEh/p9eWuBeNCgLVSFtcYCJvRU8OFwRPz8B7rs3/tjrabrkV8iVaEe
iCZkqPpaqZF6QaY2Z2YmZEtFsUMbrVwLbfBj4+3CSY90rlRolZDJjea6oXtjWXPX
ANSJ5gJZI9qFbX0WBXJ7dilrfUfHwrsqkH97072OTcLBcwQTAQoAHRYhBDC5M9gP
zj2YGi04+wyZtw70/LsHBQJcj3EZAAoJEAyZtw70/LsH+fYP/isfQYJ2TuSe17/V
YWGF6yAxon83FbMuiz3yAKw5xbxbaVZk+XGxdRmHQKa0HSnbrdcratZDl4pPM2vu
ogwj1cyuD4D/g61F/VriXV9GSdVcRkYZxF/n3AOY4yPL7OoevWYdtxGfiUP4X0Ml
EGxx3xRI0iYqtX4sJjT1Df7sBnL3EeRc1NC8uqB6H7EJHvdtu/NsF/INgFIroh9N
OoXUkmBlt4hx/Y2hXAporNa76vOC1mndPTCt4DD5ansiYgOFHZrVb3pv5vtRoHLf
YApzb9V72NBLDShpqbXdrCeb8F+W3k9m1pv53j2XJ2ZPPMSkJYGmrtAqfnSvF/FU
CAB0bs6B6UZXC9xBHJZ67iSn2kKMnffmwTBJNe2H9KBQKaUXIIIOnid18P6TzwKX
KiA8mkOXV47HoRgM335LktcLmTvW2Y8tmNlORPEY/CXDE+1Iz/BFayyd3+ePEhoT
RBDqw8ZELvIRHTARd33kC0zcYIEUV4q+sIu8F3rlLqkcRUJr7olPZk3wMoLE4H9+
HfFyljVv28AK0dFlWC2/NfpfHs79VoH4pVHyPjMN2WD69Rt9DbT7xuIqAu2XwZca
hDMOVJET+5rI10CA59xeTmAR/NeWe4wZ2XFfDDA2oRKShX4BgHg7uazc0Ctxubwz
zLGx3gGxWVEtx8F2+s0gzkYQTSH3wsBzBBABCgAdFiEE95UmIXw8zVj8d3c51xiV
a62Ak/EFAmWrVz4ACgkQ1xiVa62Ak/FfXwf/StJfpZ+PuC5DxZ3zfwzkf1F+kcb3
UwPwosTiXinOVNKmG/gYbpgU1iqrvXEfsxQsL30Oldq6LXvAVXkVmHGqsqe1rPil
sejnnAg1PKLsowi6Iggro99EjkYaswTCTx7m3hC8SNhnOceoSP40oKyFDRnS4G++
SvMlYuh1Rp9Fk5HROLP19c00DsLifeIJj7Os7LZgHWJKL49O6KjUZW6WI1SwYMef
j/GZvd6LnGfBGNJpIFpuKG7qSN+xYJZX4lnq1U8rfgC1ySjKXxVHAiQ3mGvBZpD8
iQH4uGeGPhkb4KsxsWD5YXluCbI54cCvTXMhr2yd5CjpVEZSkp7I16LVSs7AzQRc
j2+fAQwA4McaM/y2XQSHlJBSYR7yqZtHX/kZ8g9pnViqkCEADz8XKCroEzvY1gaW
tR6obtjaq8pF0g4KtAC65/gIOtsHvWg3OclrODPkXN+xOM1LpXZGV6kwk+LXOryb
tPhVZe3FtvDMW0MVZeHYi+soZ4tTQHkKjZUPAXZs3ZoZrWfE5ft447sCxzX+jxDw
wlckkKqZ9sHYD0TV8Y5av3RsxiWBt+coch8jvw+1mDZ0zBjMO8ZRD8PuvP9UTKCN
OIm0mW9A2cUfpkk/uAwo5hCnw4iljS81/KKGM/scwc5Kx6G3WWoAb8kajt0VFG/w
YN2qjfjdhXtdu3ZxYtDdjA2UGGRbgkCsr+gRCnSTiuwvLzCVZCz9WNzZjUMg6LFP
2IrHned4Kdy4KjJo+g/weKJoxfKokZ/9vUYpw5OYx3UESUk3yHDN9r/JC4RJJ2tE
2qkeggJ892RJGxUK/Lw3/7jIQKalO3Qx2zYUqnCYMC9gPhQGH+F9kwSpGVwb0DKF
T6gR9Pt3ABEBAAHCwPwEGAEKACYCGwwWIQQVBYUAoCNdl/XRAGOxiOK2lb1HQwUC
ZcC3ywUJDPOvLAAKCRCxiOK2lb1HQ14tC/wL/az9Thu3zmg7MXeE3iGNicC3yAKM
VmWH2//p12EYJTVJQnY2i2XEcmGEGkJHzuuoSi2ycNLf5OgdWtNlGXWIlRkYCS1k
7qsX8uMtTIDKIs8iwhVNxMasVnelLmRBrCnHIlBspK5ckk5DB81oVyAZe9geW1e5
OxM4E2C3N8YRPhm9woSeU0SlbMFHRw1Vk5v5qte7wC704kU0kybNwF4PlyIwy/eh
agIzBa7ovo/U14MDB+o9RRIZt6X6VJG4xsb+M+9XdPiLud9eqGdB2v+1xdeik93P
nhTOtWUaCReujLasnx64WU04wf0rTDk4IcpyBUUoj7PGXGTcUUYzYEY/Z/fLBYbi
TO3PbCkBH8LNYMUFyL6tT0x4GS6ugaeqH9cz18yOjTCu5ddNhG3jYZTBnD7MzEmL
mEOk28K528ocdtNtGEBeRJlsu71Av7boKWIXb3FHDgqp7TeoqgvpI3IUKtUlOHvv
/wMKGZKEUG5OC65JSDnoLYJXyrpXr5KJkofCwPwEGAEKACYCGwwWIQQVBYUAoCNd
l/XRAGOxiOK2lb1HQwUCYCuFsQUJCT+wkgAKCRCxiOK2lb1HQ3icDADGRBYuqFNG
2mnAKH9W2qMKGJUBOMdEouUpFZELs5bgMfLH9/i5PNi+73IhHqsSsR3JIHRPuzt5
nmifWYFPvsVV/8eu2O1UeyCbt+KK1v+aMfJbg3J38pCLgqOrMK1a3VxKZ6mHIy6A
5xEBLdl9HP6+lGYhYPdQd2kq5H+64DyF5zlpUX9biTpiri4ZiF3kUrXKLEupUtuS
aWf+n4hTreT2olThoQIsxWPj+YV/9irNRpATY+JrD74tA3HPI02nq3Xvaz0R0gVG
8HRUcw3ejXgn8SfSmY8p3JxVtYQJTUdsR3+qTgm+91LpFhWBBJZagjUoYrGb5/ZU
iCyr1kJMo+/PceVsGuiaH9r84fxi0VGZVl4P9rP3Dwx8QLosFrElkQBhX1YIYhJX
mo/XAlzVedQ37DyJu+/TZDUXu1q/4D+7z0s3oekWmUwziFI1HBxsNbwHRQyek/To
nirX97CSifEBg1L8BRRex7eUGWJ/YI/Zjf6CNaqUt5SIUBUv0zv1lFfCwPwEGAEK
ACYWIQQVBYUAoCNdl/XRAGOxiOK2lb1HQwUCXI9vnwIbDAUJA8JnAAAKCRCxiOK2
lb1HQ9pWDACel7BTcpj9qYJOkEx9eAVH1LmdP5oHAJSe4fYVIc5Tn6X0J1pdju+U
JvtUS6WQu7pfcsQ7IkbKXVygaw/YPqk/tE/vJVUaCGlzAaVHO7y5ZM0cdDquOgmo
/RZe2WNVFhVEPILjz+qcmX1OVeTElCu4iR/5CD0ocWZmdFvMRitKL+Nt5/pS8yXR
fQlXaUxerLvx27QhwpHXHFGNgbI8Tj/yCUCButZvDKUc+5o9WCYHvt/bf6VcNY6P
585J0+CF1vAyfWQ9KCyCF5CplURsNPMKAdkPo7vKRq6qviJpeWjJzXPkADfVnfhW
9GMna8bPi86NJo1PkGcb1IInxGmNRmnCqtqyPFd+AFGk2OFuEqeDw7GvjB5zD5u1
vIdH3WE0Q+D0xxLfaxJ71qmhuTPRnpWqfmdA2tnuFOZ+Th4HRfbyA4IoJr3U8FuF
XJnJdoBjh6+pJacI9UYrIcNyOoi1I35gHvFoKJ7Ut9deNdKMeN3bAR+1JShVtdRO
zgGtPj/bMFg=
=FhGb
PUBLIC_KEY_ASC
}

apt_deactivate_sources_file(){
    require_arg @
    local src_file dest_file
    local -i r
    src_file="$1" r=1
    dest_file="${src_file%.sources}_deactivated.sources"
    # if an Enabled: line exists, replace it unconditionally with 'Enabled: no'
    if ${X[grep]} -qi '^enabled:' "$src_file"; then
        sed_ 's/^enabled:.*$/Enabled: no/I' "$src_file" "$dest_file" && r=0
    # else insert 'Enabled: no' before the first "Types:" line (case-insensitive)
    elif ${X[grep]} -qi '^types:' "$src_file"; then
        sed_ '0,/^types:/I s/^types:/Enabled: no\n&/I' "$src_file" "$dest_file" && r=0
    else
        mh "$(fn_ln) $src_file is not a valid source file"
    fi
    if (( r )); then
        mh "$(fn_ln) deactivation of $src_file failed"
    else
        # remove if deactivated file was successfully created
        ${X[rm]} -f -- "$src_file" 2> >(log_trace)
        mh "$(fn_ln) deactivation of $src_file succeeded"
    fi
    return $r
}

get_ubuntu_key_deb_url() {
    local codename version url curl_output matches
    codename="$1" version="${UBUNTU_VERSIONS[$codename]}"
    url='https://ppa.launchpadcontent.net/ondrej/php/ubuntu/pool/main/d/debsuryorg-archive-keyring/'
    curl_output=$(tf)
    ${X[curl]} -so $curl_output $url
    matches=$(${X[grep]} -oE '<a href="([^"]*ubuntu'$version'[^"]*\.deb)">' "$curl_output")
    if [ -n "$matches" ]; then
        echo "$url$(echo "$matches" | ${X[gawk]} -F\" '{print $2}')"
    fi
}

# package is eather php, apache2 nginx
sources_list_deb822(){
    (( T[rte] )) || { printf -v T[rte] "%(%s)T" -2; }
    local id codename package architecture aptsources_url
    id="$1" codename="$2" package="$3" architecture="$(${X[dpkg]} --print-architecture)"
    case "$id" in
        ubuntu) aptsources_url="https://ppa.launchpadcontent.net/ondrej/$package/ubuntu/" ;;
        debian) aptsources_url="https://packages.sury.org/$package/"
    esac
    ${X[cat]} << DEB822
## $package repository list
# https://deb.sury.org
# created $(${X[date]} -d @${T[rte]} "+%F %R %Z") by ernolfs $MS script
# https://github.com/ernolf/ebtb
## Deb822-style format
X-${M[p]}-$MS-Version: ${M[e]}
X-${M[p]}-janitor-Name: $package
Enabled: yes
Types: deb
URIs: $aptsources_url
Suites: $codename
Components: main
Architectures: $architecture
$(gpg_assemble_key_ deb822 sury_${id}_key)
DEB822
}

#    from https://packages.sury.org/php/README.txt
#    curl -sSLo /tmp/debsuryorg-archive-keyring.deb https://packages.sury.org/debsuryorg-archive-keyring.deb
#    dpkg -i /tmp/debsuryorg-archive-keyring.deb
#    sh -c 'echo "deb [signed-by=/usr/share/keyrings/debsuryorg-archive-keyring.gpg] https://packages.sury.org/php/ $(lsb_release -sc) main" > /etc/apt/sources.list.d/php.list'
install_debsuryorg_archive_keyring(){
    local deb='debsuryorg-archive-keyring'
    if q0 ${X[dpkg]} -s $deb; then
        return 0
    else
        ${X[curl]} -sSLo /tmp/$deb.deb https://packages.sury.org/$deb.deb
        ${X[dpkg]} -i /tmp/$deb.deb
    fi
}

add_apt_repository_not_found(){
    bundle echo "$(xpf; R; format_string "The $(C)add-apt-repository$(R) binary which is part of the $(Y)software-properties-common$(R) package could not be found." 3; N)"
    ipf; Yi; echo "Please run:"
    f
    echo "$(G; prompt; GRAY) sudo$(lB) apt-get install software-properties-common"; N
    f
    o3; Yi; echo ".. and start this script again."; N
    exit 1
}

# add_repository $1=ubuntu or debian, $2=codename, $3=package (defaults to php)
add_repository_oneline(){
    local -l id codename package gpgfile sources_list_file sources_list
    id="$1" codename="$2" package="${3:-php}"
    sources_list_file=/etc/apt/sources.list.d/ondrej-sury_$package.list
    case "$id" in
        debian)
            install_debsuryorg_archive_keyring
            gpgfile='/usr/share/keyrings/debsuryorg-archive-keyring.gpg'
            deb_line="deb [signed-by=$gpgfile] https://packages.sury.org/$package/ $codename main"
            echo "$deb_line" > $sources_list_file
            ;;
        ubuntu)
            [[ -n ${X[add-apt-repository]} ]] || add_apt_repository_not_found
#            sources_list="$(${X[add-apt-repository]} -y --no-update --ppa ppa:ondrej/$package | ${X[gawk]} '/Adding deb entry to/ { print $NF }')"
#            ${X[mv]} $sources_list $sources_list_file
            ${X[add-apt-repository]} -y --no-update --ppa ppa:ondrej/$package
    esac
    apt_update
    populate_can_array
}

# add_repository $1=ubuntu or debian, $2=codename, $3=package (defaults to php. can be empty (php), apache2 or nginx)
add_repository_deb822(){
    local -l id codename package
    id="$1" codename="$2" package="${3:-php}"
    sources_list_deb822 $id $codename $package > /etc/apt/sources.list.d/ondrej-sury_$package.sources
    apt_update
    populate_can_array
}

# add_repository $1=ubuntu or debian, $2=codename
add_repository(){
    local id codename
    id="$1" codename="$2"
    if dpkg_min_version apt 2.4; then
        add_repository_deb822 "$id" "$codename"
    else
        add_repository_oneline "$id" "$codename"
    fi
}

supported_suites_(){
    (( T[rte] )) || { printf -v T[rte] "%(%s)T" -2; }
    local outfile architecture url exclude suites date_str
    local -i timestamp
    local -a existing_suites
    local -A last_modified
    outfile="$(tf)" architecture="$(${X[dpkg]} --print-architecture)"
    case "$1" in
        ubuntu) url='https://ppa.launchpadcontent.net/ondrej/php/ubuntu/dists/' exclude='ondrej' ;;
        debian) url='https://packages.sury.org/php/dists/' exclude='\.\.'
    esac
    ${X[curl]} -so $outfile "$url"
    mapfile -t existing_suites< <(${X[grep]} -oP '(?<=href=")[^"]+(?=/")' "$outfile" | ${X[grep]} -v "$exclude")
    for suites in "${existing_suites[@]}";do
        date_str="$(${X[grep]} "$suites" "$outfile" | ${X[grep]} -oP '\d{4}-\d{2}-\d{2}.*\d{2}:\d{2}|\d{2}-[A-Za-z]{3}-\d{4}.*\d{2}:\d{2}')"
        if [[ -n $date_str ]]; then
            timestamp=$(${X[date]} -d "$date_str" "+%s")
            last_modified["$suites"]=$timestamp
        fi
    done
    ${X[rm]} -f -- $outfile
    for suites in "${!last_modified[@]}"; do
        if (( $(( T[rte] - last_modified[$suites] )) < 3600000 )); then
            if ! ${X[curl]} -s $url$suites/Release | ${X[grep]} -qs "d41d8cd98f00b204e9800998ecf8427e\s*0 main/binary-$architecture/Packages"; then
                echo "$suites"
            fi
        fi
    done
}

sury(){
    # return codes:
    #    0 = OK: 1 or more correct apt sources
    #   32 = No sury repo detected
    #   33 = OK but 1 or more wrong protocol (http instead of https)
    #   34 = OK but 1 or more wrong architecture
    #   35 = 33 and 34
    #   36 = 1 or more wrong suites (apt source codename)
    #   37 = 36 and 33
    #   38 = 36 and 34
    #   39 = 36, 33 and 34
    #   40 = 1 or more wrong suites AND wrong protocol
    #   41 = 40 and 33
    #   42 = 40 and 34
    #   43 = 40, 33 and 34
    #   44 = 40 and 36
    #   45 = 40, 36 and 33
    #   46 = 40, 36, 33 and 34
    #   48 = 1 or more wrong apt source (debian <-> ubuntu)
    #   64 = Not-OK
    #  128 = unknown distributor
    local -i r i
    local -l id codename arch arch_regex ubuntu_uri debian_uri expected_uri wrong_uri return
    local -a archs sources
    local -A bool
    r=128
    ubuntu_uri='https://ppa.launchpadcontent.net/ondrej/php/ubuntu'
    debian_uri='https://packages.sury.org/php'
    for x in wrong_protocol wrong_architecture wrong_suites wrong_suites_protocol wrong_distrib; do bool[$x]=_; done
    [ -f "${F[os]:="${D[vt]}/os"}" ] && . "${F[os]}"
    if q0 tnh1_strg sury; then # OS is supported!
        id="$(q2 tnh1 3 | ${X[gawk]} '{print $(NF-1)}')"
        codename="$(q2 tnh1 3 | ${X[gawk]} '{print $(NF)}')"
        case $id in
            ubuntu) expected_uri="$ubuntu_uri" wrong_uri="$debian_uri" ;;
            debian) expected_uri="$debian_uri" wrong_uri="$ubuntu_uri"
        esac
    else
        codename="${OS[version_codename]}"
        case ${OS[id]} in
            ubuntu) expected_uri="$ubuntu_uri" wrong_uri="$debian_uri" ;;
   debian|raspbian) expected_uri="$debian_uri" wrong_uri="$ubuntu_uri" ;;
                 *) if [ -n "${OS[id_like]}" ]; then
                        case ${OS[id_like]% *} in
                            debian)
                                if [ -n ${OS[debian_codename]} ]; then
                                    expected_uri="$debian_uri" wrong_uri="$ubuntu_uri" codename="${OS[debian_codename]}"
                                elif [ -n ${OS[ubuntu_codename]} ]; then
                                    expected_uri="$ubuntu_uri" wrong_uri="$debian_uri" codename="${OS[ubuntu_codename]}"
                                fi
                                ;;
                            ubuntu)
                                if [ -n ${OS[ubuntu_codename]} ]; then
                                    expected_uri="$ubuntu_uri" wrong_uri="$debian_uri" codename="${OS[ubuntu_codename]}"
                                fi
                                ;;
                            *)  expected_uri='' r=128 return="unknown distributor ${OS[id]}"
                        esac
                    else
                        expected_uri='' wrong_uri='' r=128 return="unknown distributor ${OS[id]}"
                    fi
        esac
    fi

    if [[ -n "${X[dpkg]}" && -n "$expected_uri" ]]; then
        arch="$(${X[dpkg]} --print-architecture )"
        mapfile -t archs< <(p_sort $arch $(q2 ${X[dpkg]} --print-foreign-architectures))
        (( ${#archs[@]} > 1 )) && arch_regex=($(echo ${archs[@]} | ${X[tr]} ' ' '|')) || arch_regex=$arch

        # apt sources
        mapfile -t sources< <(apt_cache_policy)
        if (( ${#sources[@]} )); then # there is at least one source
#            if (( ${#sources[@]} == 1 )); then # only one source
#                eval local ${sources[0]}
#                if [[ $uri == $expected_uri && $n == $codename && $b =~ $arch_regex ]]; then
#                    r=0 return="OK"
#                elif [[ ${expected_uri/content/} =~ $origin && $n == $codename && $b =~ $arch_regex ]]; then
#                    r=33 return="OK but http instead of https"
#                elif [[ $uri == $expected_uri && $n == $codename && ! $b =~ $arch_regex ]]; then
#                    r=34 return="wrong - apt source for a wrong architekture"
#                elif [[ $uri == $expected_uri && $n != $codename ]]; then
#                    r=36 return="wrong - apt source for $n instead of $codename"
#                elif [[ ${expected_uri/content/} =~ $origin && $n != $codename ]]; then
#                    r=40 return="wrong - apt source for $n instead of $codename and http instead of https"
#                elif [[ $uri == $wrong_uri || ${wrong_uri//content/} =~ $origin ]]; then
#                    r=48 return="wrong - apt source for wrong distribution"
#                else
#                    r=32 return="No sury repo detected"
#                fi
#            else # if (( ${#sources[@]} > 1 )) # multiple sources
            return="" r=32
            for i in ${!sources[@]}; do
                unset uri n b origin 
                eval local ${sources[i]}
                if [[ $uri == $expected_uri && $n == $codename && $b =~ $arch_regex ]]; then
                    (( r > 31 )) && r+=-32
                    return="$return - $(( i + 1 )) = ok (0)"
                elif [[ ${expected_uri/content/} =~ $origin && $n == $codename && $b =~ $arch_regex ]]; then
                    ${bool[wrong_protocol]} || r+=1 return="$return - $(( i + 1 )) = http instead of https (1)"
                    bool[wrong_protocol]=:
                elif [[ $uri == $expected_uri && $n == $codename && ! $b =~ $arch_regex ]]; then
                    ${bool[wrong_architecture]} || r+=2 return="$return - $(( i + 1 )) = wrong architekture (2)"
                    bool[wrong_architecture]=:
                elif [[ $uri == $expected_uri && $n != $codename ]]; then
                    ${bool[wrong_suites]} || r+=4 return="$return - $(( i + 1 )) = $n instead of $codename (4)"
                    bool[wrong_suites]=:
                elif [[ ${expected_uri/content/} =~ $origin && $n != $codename ]]; then
                    ${bool[wrong_suites_protocol]} || r+=8 return="$return - $(( i + 1 )) = $n instead of $codename and http instead of https (8)"
                    bool[wrong_suites_protocol]=:
                elif [[ $uri == $wrong_uri || ${wrong_uri//content/} =~ $origin ]]; then
                    ${bool[wrong_distrib]} || r+=16 return="$return - $(( i + 1 )) = wrong - apt source for wrong distribution (16)"
                    bool[wrong_distrib]=:
                fi
            done
            if [ "$return" = "multi" ]; then
                r=32 return="No sury repo detected"
            fi
#            fi

        else # if ! (( ${#sources[@]} )) # no sources, this indicates an error
            r=64 return='Not-OK'
        fi # end  if ! (( ${#sources[@]} ))
    fi # end if [[ -n "${X[dpkg]}" && -n "$expected_uri" ]]
    printf "$return"
    return $r
}

sury_message_(){
    local case aptsources_file codename suites
    case="$1" aptsources_file="$2" codename="$3" suites="$4"
    case "$case" in
        fix_yourself_if_fails)
            local string
            string="If this step fails, you should fix it yourself please. Do not run this step multiple times then. If it doesn't work after one attempt, it won't work on the second and subsequent attempts either. It will propably be fixed though in a future version of this script, so you can run this script again at a later time to try again if it fails now."
            echo "$(o3; GRAY; format_string "$string" 3; N)"
            ;;
        old_key)
            echo "$(ipf; format_string "the sources-file $(C)$aptsources_file$(N) is using an old public pgp key. The file will be deactivated and renamed to $(C)${aptsources_file%.sources}_deactivated.sources$(N) and a new sources-file using the currently valid public pgp key will be created. Please remove the old file afterwards if everything functions as expected." 3)"
            ;;
        unknown_key)
            echo "$(ipf; format_string "the sources-file $(C)$aptsources_file$(N) is not using the currently valid public pgp key. The file will be deactivated and renamed to $(C)${aptsources_file%.sources}_deactivated.sources$(N) and a new sources-file will be created using the currently valid public pgp key. Please remove the old file afterwards if everything functions as expected." 3)"
            ;;
        old_key_wrong_suites)
            echo "$(ipf; format_string "the sources-file $(C)$aptsources_file$(N) is created for $(Y)$suites$(N) instead of $(Y)$codename$(N) and additionally not using the currently valid public pgp key. The file will be deactivated and renamed to $(C)${aptsources_file%.sources}_deactivated.sources$(N) and a new sources-file will be created for $(Y)$codename$(N) using the currently valid public pgp key. Please remove the old file afterwards if everything functions as expected." 3)"
            ;;
        unknown_key_wrong_suites)
            echo "$(ipf; format_string "the sources-file $(C)$aptsources_file$(N) is created for $(Y)$suites$(N) instead of $(Y)$codename$(N) and additionally not using the currently valid public pgp key. The file will be deactivated and renamed to $(C)${aptsources_file%.sources}_deactivated.sources$(N) and a new sources-file will be created for $(Y)$codename$(N) using the currently valid public pgp key. Please remove the old file afterwards if everything functions as expected." 3)"
            ;;
        wrong_suites)
            echo "$(ipf; format_string "the sources-file $(C)$aptsources_file$(N) is created for $(Y)$suites$(N) instead of $(Y)$codename$(N). The file will be deactivated and renamed to $(C)${aptsources_file%.sources}_deactivated.sources$(N) and a new sources-file will be created for $(Y)$codename$(N) using the currently valid public pgp key. Please remove the old file afterwards if everything functions as expected." 3)"
            ;;
    esac
}

# helper: populate_aptsources_files_array <array name> <array name>
populate_aptsources_files_array(){
    local -n _files=$1
    local -n _results=$2
    local -i 1
    mapfile -t _files < <(sources_files)
    for i in ${!_files[@]}; do _results[i]=_; done
    (( ${#_files[@]} ))
#    if (nonullglob "/etc/apt/sources.list.d/*\.list" || nonullglob "/etc/apt/sources.list.d/*\.sources"); then
#        for _file in /etc/apt/sources.list.d/*\.{list,sources}; do
#            # only treat valid files and don't treat deactivated sources:
#            [ -f "$_file" ] && ! ${X[grep]} -iqs "^enabled:[[:space:]]*no$" "$_file" && _files+=("$_file") _results+=(_) r=0
#        done
#    fi
    return
}

sources_files_check(){
    local as_file
    local -l id codename as_uri as_suite package
    id="$1" codename="$2"
    local -n _bool=$3
    local -a as_uris as_suites as_files as_changed as_success
    populate_with_sury_sources as_uris as_suites as_files || return 0
    local -i i
    for i in "${!as_files[@]}"; do
        as_uri="${as_uris[i]}" as_suite="${as_suites[i]}" as_file="${as_files[i]}" as_changed[i]=_
        if [[ "$(gpg_extract_ fpr "$as_file")" != "$(gpg_extract_ fpr sury_${id}_key)" ]]; then
            package="$(sed_ 's#.*(ppa\.launchpadcontent\.net/ondrej/|packages\.sury\.org/)([^/]+)/.*#\2#p' "$as_uri" '-')" # for ubuntu: php, apache2 or nginx
            if [[ "$(gpg_extract_ fpr "$as_file")" == "$(gpg_extract_ fpr sury_${id}_old_key)" ]]; then # old key is in use
                if  [[ $as_suite != $codename ]]; then
                    bundle echo "$(sury_message_ old_key_wrong_suites "$as_file" "$codename" "$as_suite")"
                else
                    bundle echo "$(sury_message_ old_key "$as_file")"
                fi
            else
                if  [[ $as_suite != $codename ]]; then
                    bundle echo "$(sury_message_ unknown_key_wrong_suites "$as_file" "$codename" "$as_suite")"
                else
                    bundle echo "$(sury_message_ unknown_key "$as_file")"
                fi
            fi
            f
            anykey
            f
            apt_deactivate_sources_file "$as_file" && add_repository_deb822 "$id" "$codename" "${package:-php}" && as_changed[i]=:
        elif [[ $as_suite != $codename ]]; then
            bundle echo "$(sury_message_ wrong_suites "$as_file" "$codename" "$as_suite")"
            f
            anykey
            f
            apt_deactivate_sources_file "$as_file" && add_repository_deb822 "$id" "$codename" "${package:-php}" && as_changed[i]=:
        fi
        if ${as_changed[i]}; then
            as_files[i]="/etc/apt/sources.list.d/ondrej-sury_$package.sources"
            if [[ "$(gpg_extract_ fpr "${as_files[i]}")" != "$(gpg_extract_ fpr sury_${id}_key)" || $as_suite != $codename ]]; then
                as_success[i]=_
                mh "$(fn_ln) recreation of $as_file failed"
            else
                as_success[i]=:
                mh "$(fn_ln) recreation of $as_file succeeded"
            fi
            f
            anykey
        fi
        if [[ "${as_changed[@]}" =~ : ]]; then
            if [[ "${as_success[@]}" =~ : ]]; then
                os; G; echo "Recreation of apt sources file was successfull for:"
                for i in ${!as_success[@]}; do
                    if ${as_success[i]}; then
                        os; pf; C; echo "${as_files[i]}"
                    fi; N
                done
                if [[ "${as_success[@]}" =~ _ ]]; then
                    os; R; echo "Unfortunately recreation of apt sources file was not successfull for:"
                    for i in ${!as_success[@]}; do
                        if ! ${as_success[i]}; then
                            os; pf; P; echo "${as_files[i]}"
                        fi
                    done
                    os; R; echo "Please fix it yourself."; N
                fi
                apt_update
                . "${F[php]}"
                mh "$(fn_ln) after apt source recreation: $(declare -p CAN)"
                f
                anykey
            else
                os; R; echo "Unfortunately this step was not successfull. Please fix it yourself."; N
                f
                anykey
            fi
            _bool[changed]=:
        fi
    done
}

need_sury_repo(){
    local sury_return id codename wrong_codename asu asd up aptsource wrong_aptsource http_aptsource hhtp_token https_token success package
    local -i sury_r i
    local -a aptsources_files results
    local -A bool
    [ -f "${F[php]:="${D[vt]}/php"}" ] && . "${F[php]}"
    mh "$(fn_ln) start: $(declare -p CAN)"
    asu='https://ppa.launchpadcontent.net/ondrej/php/ubuntu'
    asd='https://packages.sury.org/php'
    up='(pkg-gearman|apache2|nginx-mainline|nginx|php)' # surys ubuntu packages
    sury_return="$(sury)"
    sury_r=$?
    bool[changed]=_
    if tnh1_strg sury; then # OS is supported!
        id="$(tnh1 3 | ${X[gawk]} '{print $(NF-1)}')"
        codename="$(tnh1 3 | ${X[gawk]} '{print $(NF)}')"
        case "$id" in
            ubuntu) aptsource="$asu" wrong_aptsource="$asd"
                    http_token='http://ppa.launchpad.net'
                    https_token='https://ppa.launchpadcontent.net'
                    http_aptsource="$http_token/ondrej/php/ubuntu"
                    ;;
            debian) aptsource="$asd" wrong_aptsource="$asu"
        esac
        list_apt_sources show_sury
        anykey_noquit
        f
        separator
        list_candidates
        f
        if (( sury_r )); then # NOT 0 -> needs action
            if ((sury_r == 32)); then # no sury repo
                echo "$(pf; Y; format_string "Consider adding Ondřej Surý's repo to your Apt sources to expand the range of installable PHP candidates" 3; N)"
                f
                os; GRAY; echo "Visit Ondřej Surý's website: $(W)https://deb.sury.org/$(GRAY) for more details."; N
                f
                os; echo "This script can add the right repo to your apt sources."
                sury_message_ fix_yourself_if_fails
                if ask "$(qpf)Do you want to add sury repo now" "$YES"; then
                    [ -z "${PHP[v]}" ] || switch_php_to_ "${PHP[v]}"
                    add_repository "$id" "$codename"
                    sury_return="$(sury)"
                    sury_r=$?
                    if ((sury_r == 32)); then # still no sury repo
                        mh "$(fn_ln) adding apt source failed"
                        f
                        os; R; echo "Unfortunately this step was not successfull. Please add the apt source yourself."; N
                        anykey
                    else
                        . "${F[php]}"
                        mh "$(fn_ln) adding apt source succeeded"
                        mh "$(fn_ln) after apt source added: $(declare -p CAN)"
                        bool[changed]=:
                        os; G; echo "adding apt source was successfull"; N
                        anykey
                    fi
                fi
            elif ((sury_r == 33)); then # http instead of https
                echo "$(pf; format_string "Ondřej Surý's repo is added to the apt sources but the deprecated http source $(C)$http_token/..$(N) is used instead of $(B)$https_token/.." 3; N)"
                if dpkg_min_version apt 2.0; then
                    echo "$(o3; Y; format_string "Consider fixing this for all your ppa.launchpad sources.$(N) You can find the affected files in $(B)/etc/apt/sources.list.d/$(N) directory as listed above. Simply replace $(C)$http_token$(N) with $(B)$https_token$(N) in all affected files and run $(dY)sudo apt-get update$(N) and start this script again, if this message dissapeared, you did everything right." 3)"
                    f
                    os; echo "This script can replace the http URIs with the new https URIs for you."
                    sury_message_ fix_yourself_if_fails
                    if ask "$(qpf)Do you want to replace http URIs with https URIs now" "$YES"; then
                        [ -z "${PHP[v]}" ] || switch_php_to_ "${PHP[v]}"
                        if populate_aptsources_files_array aptsources_files results; then
                            for i in ${!aptsources_files[@]}; do
                                if ${X[grep]} -Eiqs "^[[:space:]]*(deb|uris).*$http_token/" "${aptsources_files[i]}"; then
                                    if [ "${aptsources_files[i]##*.}" = 'list' ]; then
                                        sed_ "!/^deb.*launchpad\.net/ { h; s/^/# /; p; g; s#$http_token#$https_token#; }" "${aptsources_files[i]}" '-i'
                                    elif [ "${aptsources_files[i]##*.}" = 'sources' ]; then
                                        sed_ "!/^URIs:.*launchpad\.net/ { h; s/^/# /; p; g; s#$http_token#$https_token#; }" "${aptsources_files[i]}" '-i'
                                    fi
                                    if ${X[grep]} -Eiqs "^(deb|uris).*$http_token/" "${aptsources_files[i]}"; then
                                        mh "$(fn_ln) replacing $http_token with $https_token in ${aptsources_files[i]} failed"
                                    else
                                        mh "$(fn_ln) replacing $http_token with $https_token in ${aptsources_files[i]} succeeded"
                                        results[i]=:
                                    fi
                                else
                                    unset results[i]
                                fi
                            done
                        fi
                        if [[ "${results[@]}" =~ : ]]; then
                            os; G; echo "This step was successfull on this file(s):"
                            for i in ${!results[@]}; do
                                if ${results[i]}; then
                                    os; pf; C; echo "${aptsources_files[i]}"
                                fi; N
                                anykey
                            done
                            if [[ "${results[@]}" =~ _ ]]; then
                                os; R; echo "Unfortunately this step was not successfull on this file(s):"
                                for i in ${!results[@]}; do
                                    if ! ${results[i]}; then
                                        os; pf; P; echo "${aptsources_files[i]}"
                                    fi
                                done
                                os; R; echo "Please fix it yourself."; N
                                anykey
                            fi
                            bool[changed]=:
                            apt_update
                        else
                            os; R; echo "Unfortunately this step was not successfull. Please fix it yourself."; N
                            anykey
                        fi
                    fi
                else
                    os; echo "but this is normal on $codename, since the version of this OS is extremely old."
                fi
            elif ((sury_r == 36)); then # apt source for ${aptsources[i]#$aptsource} instead of $codename"
                wrong_codename=$(echo "$sury_return" | ${X[gawk]} '{print $(NF-3)}')
                echo "$(o3; format_string "Ondřej Surý's repo is added to the apt sources but for $(Y)$wrong_codename$(N) instead of $(Y)$codename$(N). You should fix that in all affected files and run $(dY)sudo apt-get update$(N) and start this script again, if this message dissapeared, you did everything right." 3)"
                f
                os; echo "This script can replace $(Y)$wrong_codename$(N) with $(Y)$codename$(N) in sury apt sources file for you."
                sury_message_ fix_yourself_if_fails
                if ask "$(qpf)Do you want to replace $(Y)$wrong_codename$(N) with $(Y)$codename$(N) in sury apt sources file now" "$YES"; then
                    [ -z "${PHP[v]}" ] || switch_php_to_ "${PHP[v]}"
                    if populate_aptsources_files_array aptsources_files results; then
                        for i in ${!aptsources_files[@]}; do
                            if [ "${aptsources_files[i]##*.}" = 'list' ]; then
                                if ${X[grep]} -Eqs "^[^#]*$aptsource/?\s*$wrong_codename" "${aptsources_files[i]}"; then
                                    sed_ "!/^[^#]*${aptsource//\//\\/}[\/]{0,1}\s*$wrong_codename/ { h; s/^/# /; p; g; s/$wrong_codename/$codename/; }" "${aptsources_files[i]}" '-i'
                                    if ${X[grep]} -Eq "^[^#]*$aptsource/?\s*$wrong_codename" "${aptsources_files[i]}"; then
                                        mh "$(fn_ln) replacing $wrong_codename with $codename in ${aptsources_files[i]} failed"
                                    else
                                        mh "$(fn_ln) replacing $wrong_codename with $codename in ${aptsources_files[i]} succeeded"
                                        results[i]=:
                                    fi
                                else
                                    unset results[i]
                                fi
                            elif [ "${aptsources_files[i]##*.}" = 'sources' ]; then
                                log_trace "treat ${aptsources_files[i]}"
                                if ${X[grep]} -Eixqs "^uris: ${aptsource/php/$up}/?$" ${aptsources_files[i]} && ${X[grep]} -ixq "^suites: $wrong_codename$" ${aptsources_files[i]}; then
                                    log_trace "${X[grep]} -Eixqs '^uris: ${aptsource/php/$up}/?$' and ${X[grep]} -ixq '^suites: $wrong_codename$' returned true"
                                    # sources-file is for sury packages and codename is wrong
                                    sed_ "s/$wrong_codename/$codename/g" "${aptsources_files[i]}" '-i' # simply replace $codename
                                    # and check result
                                    if ${X[grep]} -ixq "^suites: $wrong_codename$" "${aptsources_files[i]}"; then
                                        mh "$(fn_ln) replacing $wrong_codename with $codename in ${aptsources_files[i]} failed"
                                    else
                                        mh "$(fn_ln) replacing $wrong_codename with $codename in ${aptsources_files[i]} succeeded"
                                        results[i]=:
                                    fi
                                else log_trace "${X[grep]} -Eixqs '^uris: ${aptsource/php/$up}/?$' and ${X[grep]} -ixq '^suites: $wrong_codename$' returned false"
                                    unset results[i]
                                fi
                            fi
                        done
                    fi
                    if [[ "${results[@]}" =~ : ]]; then
                        os; G; echo "Replacing $wrong_codename with $codename was successfull in this file(s):"
                        for i in ${!results[@]}; do
                            if ${results[i]}; then
                                os; pf; C; echo "${aptsources_files[i]}"
                            fi; N
                        done
                        if [[ "${results[@]}" =~ _ ]]; then
                            os; R; echo "Unfortunately replacing $wrong_codename with $codename was not successfull in this file(s):"
                            for i in ${!results[@]}; do
                                if ! ${results[i]}; then
                                    os; pf; P; echo "${aptsources_files[i]}"
                                fi
                            done
                            os; R; echo "Please fix it yourself."; N
                        fi
                        apt_update
                        . "${F[php]}"
                        mh "$(fn_ln) after apt source recreation: $(declare -p CAN)"
                        bool[changed]=:
                        f
                        anykey
                    else
                        os; R; echo "Unfortunately this step was not successfull. Please fix it yourself."; N
                        f
                        anykey
                    fi
                fi
            fi
        fi
        sources_files_check "$id" "$codename" bool
        if ${bool[changed]}; then
            os; G; echo "After made changes.."
            list_apt_sources show_sury
            anykey_noquit
            f
            separator
            list_candidates
            f
        fi
    else
        os; Y; echo "There exists no Ondřej Surý repo for your OS version"; N
        os; GRAY; echo "Visit Ondřej Surý's website: $(W)https://deb.sury.org/$(GRAY) for more details."; N
        f
    fi
}

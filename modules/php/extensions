__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${PHP_EXTENSIONS_BASHLIB:-_} && return
PHP_EXTENSIONS_BASHLIB=:

. <(lrequire dpkg)
. <(lrequire php/versions)
[ "$MS" = 'php-updater' ] && . <(require php/sury)

[ -f "${F[php]:="${D[vt]}/php"}" ] && . "${F[php]}"

# globals
q2 declare -ag EXTS_ADMIN || declare -a EXTS_ADMIN

q2 declare -Ag SAPI || declare -A SAPI
SAPI=(
    [apache2]="libapache2-mod-php@VER@"
    [fpm]="php@VER@-fpm"
    [cli]="php@VER@-cli"
    [cgi]="php@VER@-cgi"
    [embed]="libphp@VER@-embed"
    [phpdbg]="php@VER@-phpdbg"
)
q2 declare -Ag DESCR || declare -A DESCR
DESCR=(
    [apache2]="Apache 2.0 Handler SAPI"
    [fpm]="FastCGI Process Manager SAPI"
    [cli]="Command Line Interpreter SAPI"
    [cgi]="Common Gateway Interface SAPI"
    [embed]="Embedded SAPI library"
    [phpdbg]="PHPDBG binary command interpreter SAPI"
    [apcu]="APC User Cache for PHP"
    [bcmath]="Bcmath module for PHP"
    [bz2]="bzip2 module for PHP"
    [curl]="CURL module for PHP"
    [gd]="GD module for PHP"
    [gmp]="GMP module for PHP"
    [igbinary]="igbinary PHP serializer"
    [imagick]="PHP wrapper for the ImageMagick library"
    [imap]="IMAP module for PHP"
    [inotify]="Inotify bindings for PHP"
    [intl]="Internationalisation module for PHP"
    [ldap]="LDAP module for PHP"
    [lz4]="LZ4 Extension for PHP"
    [maxminddb]="Reader for the MaxMind DB file format for PHP"
    [mbstring]="MBSTRING module for PHP"
    [memchache]="memcache extension module for PHP"
    [memchached]="memchached (libmemcached) extension module for PHP"
    [mysql]="MySQL module for PHP"
    [oauth]="OAuth 1.0 consumer and provider extension"
    [odbc]="ODBC module for PHP"
    [opcache]="Zend OpCache module for PHP"
    [pgsql]="PostgreSQL module for PHP"
    [pq]="PostgreSQL client library (libpq) binding for PHP"
    [readline]="readline module for PHP"
    [redis]="PHP extension for interfacing with Redis"
    [smbclient]="PHP wrapper for libsmbclient"
    [sqlite3]="SQLite3 module for PHP"
    [xdebug]="Xdebug Module for PHP"
    [xml]="DOM, SimpleXML, XML, and XSL module for PHP"
    [zip]="Zip module for PHP"
)
declare -n SAPIDESCR=DESCR &>$NUL

detect_installed_by_dpkg(){
    local e
    local -a p pe
    local -i i
    mapfile -t p< <(${X[dpkg]} -l | ${X[gawk]} '/^[hiu]i\s+[^\s]*php/{printf$2"/"$3"/"$4"/"$1"/";for(i=5;i<=NF;i++){printf"%s",$i;if(i<NF)printf" ";else printf"\n"}}' | ${X[sort]})
    mapfile -t pe< <(${X[apt-mark]} showmanual '*php*' | sed_ 's/$/:m/'; ${X[apt-mark]} showauto '*php*' | sed_ 's/$/:a/')
    mapfile -t pe< <(p_sort ${pe[@]})
    for i in ${!p[@]}; do
        e=${pe[i]#*:}
        echo "${p[i]}" | ${X[gawk]} -F'/' '{print$1"/"$2"/"$3"/"substr($4,1,1)"'$e'/"$5}'
    done
}

detect_extensions_in_(){
    local -a files valid_files
    local -i i
    mapfile -t files< <(${X[find]} $1 \( -type f -o -type l \) -name "*\.so"); ((${#files[@]})) || return 1
    for i in ${!files[@]}; do
        file "$(${X[realpath]} ${files[i]})" | ${X[grep]} -q "shared object" && valid_files+=("${files[i]}")
    done
    ((${#valid_files[@]})) || return 1
    p_sort "${valid_files[@]}"
}

extension_dir_of_(){
    [ -f "${F[php]:="${D[vt]}/php"}" ] && . "${F[php]}"
    local pv extension_dir
    pv="$1"
    if extension_dir="$(q2 ${X[php$pv]} -i | ${X[gawk]} '/^extension_dir/ {print $NF}')"; then
        if [ -d "$extension_dir" ]; then
            echo "$extension_dir"
            return
        fi
    fi
    echo "/usr/lib/php/${EXG[$pv]%%;*}"
}

extension_ini_case(){
    local module
    module="$1"
    case "$module" in
        igbinary)
            echo "extension=$module.so igbinary.compact_strings=On"
            ;;
        memcached)
            echo "extension=$module.so memcached.serializer=php"
            ;;
        tideways)
            echo "extension=tideways_xhprof.so tideways.auto_prepend_library=0"
            ;;
        opcache|xdebug)
            echo "zend_extension=$module.so"
            ;;
        *)  echo "extension=$module.so"
    esac
}

extension_include_dir_of_(){
    [ -f "${F[php]:="${D[vt]}/php"}" ] && . "${F[php]}"
    local pv
    pv="$1"
    echo "/usr/include/php/${EXG[$pv]%%;*}/ext"
}

detect_and_assign_extensions(){
    assign(){
        local dpkg_package phpregex
        if [ "${search:-}" = 'apache2' ]; then
            phpregex="libapache2-mod-php${PHP[vregex]}"
        else
            phpregex="php"
        fi
        spinner C " . assign detected extensions to their corresponding package ." &
        for dpkg_package in $(${X[dpkg]} -l | ${X[gawk]} '/^[hiu]i.*'$phpregex'/{print $2}'); do
            declare -ga ${dpkg_package//[.-]/_}
            mapfile -t "${dpkg_package//[.-]/_}"< <(${X[dpkg]} -L $dpkg_package|${X[grep]} "\.so$")
            mapfile -t exts_dpkg< <(p_nosort ${exts_dpkg[@]};${X[dpkg]} -L $dpkg_package|${X[grep]} "\.so$"|${X[sort]})
        done
        kill_spinner
    }
    [ -f "${F[php]:="${D[vt]}/php"}" ] && . "${F[php]}"
    local search pv
    local -a exts_all exts_dpkg
    [[ "$@" =~ apache2 ]] && search=apache2
    if [[ "$@" =~ assign ]]; then
        assign
    else
        spinner C " . detect actually installed extensions ." &
        for pv in $(${X[phpquery]} -V); do
            mapfile -t exts_all< <(p_nosort ${exts_all[@]};detect_extensions_in_ "/usr/lib/php/${EXG[$pv]%%;*}")
        done
        kill_spinner
        assign
        # EXTENSIONS_INSTALLED_BY_ADMIN
        spinner C " . detect extensions installed by admin ." &
        ${B[verbose]:-_} && echo "$(pf)Extensions installed by admin = difference between installed by dpkg and all extensions.."
        mapfile -t EXTS_ADMIN< <(${X[comm]} -23 <(p_sort ${exts_all[@]}) <(p_sort ${exts_dpkg[@]}))
        (( ${#EXTS_ADMIN[@]} )) && mapfile -t EXTS_ADMIN< <(p_sort_trim ${EXTS_ADMIN[@]})
        kill_spinner
    fi
}

assign_extensions(){
    detect_and_assign_extensions assign "$@"
}

# EIBY4_=EXTENSIONS_INSTALLED_BY_ADMIN_FOR_
# C4EIBY4_=CANDIDATES_FOR_EXTENSIONS_INSTALLED_BY_ADMIN_FOR_
# versions_iterate search_candidates_4_extensions_installed_by_admin
search_candidates_4_extensions_installed_by_admin(){
    [ -f "${F[php]:="${D[vt]}/php"}" ] && . "${F[php]}"
    local pv fullpath module package
    local -A bool
    pv="$1" bool[sort]=_
    spinner C " . searching packaged versions for php$pv extensions not installed by dpkg ." &
    declare -ga EIBY4_${pv//./}
    local -n EIBY4_pv=EIBY4_${pv//./}
    declare -ga C4EIBY4_${pv//./}
    local -n C4EIBY4_pv=C4EIBY4_${pv//./}
    for fullpath in ${EXTS_ADMIN[@]}; do
        module="${fullpath##*/}"
       if [ "${fullpath%/*}" = "/usr/lib/php/${EXG[$pv]%%;*}" ];then
            bool[sort]=:
            EIBY4_pv+=("${module%%.*}")
            package="php$pv-${module%%.*}"
            apt_exist "$package" && C4EIBY4_pv+=("$package:${module%%.*}")
        fi
    done
    ${bool[sort]} && mapfile -t EIBY4_pv< <(p_sort ${EIBY4_pv[@]})
    kill_spinner
}

extension_is_(){
    local pkg pv sapi
    local -i i r=1
    pkg="$2"
    case "$1" in
        known)
            echo "$pkg"|${X[grep]} -Eqsw "php-(amqplib|auth-sasl|bacon-qr-code|cas|codecoverage|codesniffer|common|constant-time|crypt-gpg|dapphp-radius|dasprid-enum|date|db|deepcopy|directory-scanner|dompdf|dragonmantank-cron-expression|easyrdf|email-validator|fdomdocument|fig-link-util|file-iterator|font-lib|fpdf|fxsl|geos|geshi|getallheaders|getid3|guestfs|hamcrest|htmlawed|htmlpurifier|httpful|icinga|image-text|invoker|json-schema|klogger|log|lorenzo-pinky|luasandbox|mail|mail-mime|malkusch-lock|mapi|mariadb-mysql-kbs|masterminds-html5|mdb2|mf2|mikey179-vfsstream|mime-type|monolog|mythtv|netscape-bookmark-parser|nikic-fast-route|nrk-predis|nyholm-psr7|opis-closure|patchwork-utf8|pclzip|pda-pheanstalk|pear|php-gettext|phpoption|predis|proxy-manager|pubsubhubbub-publisher|ramsey-uuid|random-compat|react-promise|remctl|roundcube-rtf-html-php|sass|seclib|shellcommand|sql-formatter|swiftmailer|tcpdf|thrift|timer|token-stream|tokenizer|validate|vlucas-phpdotenv|webmozart-assert|wikidiff2|xajax|zeroc-ice)" && return 0
            echo "$pkg"|${X[grep]} -Eqsw "php-http-(httplug|interop-http-factory-tests|message-factory|promise|psr7-integration-tests|request|request2|webdav-server)" && return 0
            echo "$pkg"|${X[grep]} -Eqsw "php(ab|cpd|dox|ldapadmin|liteadmin|lideadmin-themes|loc|md|myadmin|pgadmin|qrcode|sysinfo|webcounter|webcounter-extra)" && return 0
            echo "$pkg"|${X[grep]} -Eqs "php-(async-aws-|cache-|composer-|console-|doctrine-|finder-|gettext-|google-|guzzlehttp-|leage-|letodms-|mdb2-|mock|net-|parse|phar-io-|phpdocumentor-|phpmyadmin-|phpsec|phpstan-|psr-[cehls]|sabre-|services-|text-|tijsverkoyen-|xml-|zend-|zeta-)" && return 0
            echo "$pkg"|${X[grep]} -Eqsw "libphp-(adodb|jabber|jpgraph|jpgraph-examples|phpmailer|serialization-perl|simplepie|snoopy)" && return 0
            echo "$pkg"|${X[grep]} -Eqs "(dh|elpa|golang-github|gosa-plugin|icinga|kdevelop|libawl|libjs|libmarkdown|libnusoap|libow|libownet|libsparkline|mlmmj|newrelic|python3|slbackup|weechat|zabbix-frontend)-php" && return 0
            echo "$pkg"|${X[grep]} -Eqs "(cake|simplesaml)php" && return 0
            echo "$pkg"|${X[grep]} -Eqsw "(pkg-php-tools|uphpmvault)" && return 0
            echo "$pkg"|${X[grep]} -Eqs "(arthurhoaro|pdlib|cephposix|libphpy|symfony|twig|phpunit)" && return 0
            return 1
            ;;
        dependency)
            q2 ${X[dpkg-query]} -f'${Description}' -W $pkg | ${X[grep]} -iqsw "this package is a dependency package" && return $?
            if [[ "$pkg" =~ php- ]]; then
                [ -f "${F[php]:="${D[vt]}/php"}" ] && . "${F[php]}"
                q2 ${X[dpkg-query]} -f'${Depends}' -W $pkg | ${X[grep]} -Eiqsw "php${PHP[vregex]}-${pkg#php-}$" && return $?
            fi
            return 1
            ;;
        meta)
            q2 ${X[dpkg-query]} -f'${binary:Synopsis}' -W $pkg | ${X[grep]} -iqs "metapackage"
            return $?
            ;;
        sapi)
            for pv in $(${X[phpquery]} -V); do
                for sapi in $(${X[phpquery]} -v $pv -S); do
                    if [ "$pkg" = "${SAPI[$sapi]/@VER@/$pv}" ]; then
                        r=0
                        echo "$sapi:$pv"
                    fi
                done
            done
            return $r
    esac
}

is_sapi_true_(){
    local pkg sapi
    [ -f "${F[php]:="${D[vt]}/php"}" ] && . "${F[php]}"
    for pkg in $(${X[dpkg]} -l | ${X[gawk]} '/^[hiu]i.*php'${PHP[vregex]}'/{print $2}'); do
        sapi=''
        if sapi=$(extension_is_ sapi "$pkg"); then
            if [ "${sapi%:*}" = "$1" ];then
                return 0
            fi
        fi
    done
    return 1
}

ext_state(){
    local vlpm dir pv mod sapi registry_dir state_dir
    vlpm="/var/lib/php/modules"
    [ -d "$vlpm" ] || return
    nonullglob "$vlpm/*" || return
    case "$1" in
        cleanup)
            for dir in $vlpm/*; do
                [[ -d "$dir" && ! "$(${X[phpquery]} -V)" =~ ${dir##*/} ]] && cleanup "$dir"
            done
            return
            ;;
        fix)
            [ -f "${F[php]:="${D[vt]}/php"}" ] && . "${F[php]}"
            for mod in $(${X[dpkg]} -l | ${X[gawk]} '/^[hiu]i\s+[^\s]*php'${PHP[vregex]}'/{print $2}'); do
                for pv in $(${X[phpquery]} -V); do
                    [ "${mod%-*}" = "php$pv" ] && mod="${mod#*-}" || continue
                    registry_dir="$vlpm/$pv/registry"
                    [ -d "$registry_dir" ] || mkdir -p "$registry_dir"
                    for sapi in $(${X[phpquery]} -v $pv -S); do
                        state_dir="$vlpm/$pv/$sapi"
                        if [ -f "$state_dir/enabled_by_admin/$mod" ]; then
                            cleanup "$state_dir/enabled_by_admin/$mod"
                            [ -d "$state_dir/enabled_by_maint" ] || mkdir -p "$state_dir/enabled_by_maint"
                            touch "$state_dir/enabled_by_maint/$mod"
                            [ -f "$registry_dir/$mod" ] || touch "$registry_dir/$mod"
                        fi
                    done
                done
            done
            ;;
        purge)
            mod="$2" pv="$3"
            [[ "$pv" ]] && vlpm=$vlpm/$pv
            [ -d "$vlpm" ] || return
            ${X[find]} $vlpm -type f -name "$mod" -empty -delete
    esac
}

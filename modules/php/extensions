__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${EXTENSIONS_BASHLIB:-_} && return
EXTENSIONS_BASHLIB=:

. <(lrequire dpkg)
. <(lrequire php/versions)
[ "$MS" = 'php-updater' ] && . <(require php/sury)

# globals
q2 declare -ag EXTS_ADMIN || declare -a EXTS_ADMIN
q2 declare -Ag APIS || declare -A APIS
APIS=(
    [5.6]="20131226"
    [7.0]="20151012"
    [7.1]="20160303"
    [7.2]="20170718"
    [7.3]="20180731"
    [7.4]="20190902"
    [8.0]="20200930"
    [8.1]="20210902"
    [8.2]="20220829"
    [8.3]="20230831"
    [8.4]="20240924"
)
q2 declare -Ag SAPIS || declare -A SAPIS
SAPIS=(
    [apache2]="libapache2-mod-php@VER@"
    [fpm]="php@VER@-fpm"
    [cli]="php@VER@-cli"
    [cgi]="php@VER@-cgi"
    [embed]="libphp@VER@-embed"
    [phpdbg]="php@VER@-phpdbg"
)
q2 declare -Ag SAPIDESCR || declare -A SAPIDESCR
SAPIDESCR=(
    [apache2]="Apache 2.0 Handler SAPI"
    [fpm]="FastCGI Process Manager SAPI"
    [cli]="Command Line Interpreter SAPI"
    [cgi]="Common Gateway Interface SAPI"
    [embed]="Embedded SAPI library"
    [phpdbg]="PHPDBG binary command interpreter SAPI"
    [apcu]="APC User Cache for PHP"
    [bcmath]="Bcmath module for PHP"
    [bz2]="bzip2 module for PHP"
    [curl]="CURL module for PHP"
    [gd]="GD module for PHP"
    [gmp]="GMP module for PHP"
    [igbinary]="igbinary PHP serializer"
    [imagick]="PHP wrapper for the ImageMagick library"
    [inotify]="Inotify bindings for PHP"
    [intl]="Internationalisation module for PHP"
    [ldap]="LDAP module for PHP"
    [lz4]="LZ4 Extension for PHP"
    [maxminddb]="Reader for the MaxMind DB file format for PHP"
    [mbstring]="MBSTRING module for PHP"
    [memchache]="memcache extension module for PHP"
    [memchached]="memchached (libmemcached) extension module for PHP"
    [mysql]="MySQL module for PHP"
    [oauth]="OAuth 1.0 consumer and provider extension"
    [odbc]="ODBC module for PHP"
    [opcache]="Zend OpCache module for PHP"
    [pgsql]="PostgreSQL module for PHP"
    [pq]="PostgreSQL client library (libpq) binding for PHP"
    [readline]="readline module for PHP"
    [redis]="PHP extension for interfacing with Redis"
    [smbclient]="PHP wrapper for libsmbclient"
    [sqlite3]="SQLite3 module for PHP"
    [xdebug]="Xdebug Module for PHP"
    [xml]="DOM, SimpleXML, XML, and XSL module for PHP"
    [zip]="Zip module for PHP"
)
readonly -A APIS SAPIS SAPIDESCR

detect_installed_by_dpkg(){
    local e
    local -a p pe
    local -i i
    mapfile -t p< <(${X[dpkg]} -l | ${X[gawk]} '/^[hiu]i\s+[^\s]*php/{printf$2"/"$3"/"$4"/"$1"/";for(i=5;i<=NF;i++){printf"%s",$i;if(i<NF)printf" ";else printf"\n"}}' | ${X[sort]})
    mapfile -t pe< <(${X[apt-mark]} showmanual '*php*' | ${X[sed]} 's/$/:m/';${X[apt-mark]} showauto '*php*' | ${X[sed]} 's/$/:a/')
    mapfile -t pe< <(p_sort ${pe[@]})
    for i in ${!p[@]}; do
        e=${pe[i]#*:}
        echo "${p[i]}" | ${X[gawk]} -F'/' '{print$1"/"$2"/"$3"/"substr($4,1,1)"'$e'/"$5}'
    done
}

detect_extensions_in_(){
    local -a files valid_files
    local -i i
    mapfile -t files< <(${X[find]} $1 \( -type f -o -type l \) -name "*\.so"); ((${#files[@]})) || return 1
    for i in ${!files[@]}; do
        file "$(${X[realpath]} ${files[i]})" | ${X[grep]} -q "shared object" && valid_files+=("${files[i]}")
    done
    ((${#valid_files[@]})) || return 1
    p_sort "${valid_files[@]}"
}

extension_dir_of_(){
    local pv extension_dir
    pv="$1"
    if extension_dir="$(q2 ${X[php$pv]} -i | ${X[gawk]} '/^extension_dir/ {print $NF}')"; then
        if [ -d "$extension_dir" ]; then
            echo "$extension_dir"
            return
        fi
    fi
    echo "/usr/lib/php/${APIS[$pv]}"
}

extension_ini_case(){
    local module
    module="$1"
    case "$module" in
        igbinary)
            echo "extension=$module.so igbinary.compact_strings=On"
            ;;
        memcached)
            echo "extension=$module.so memcached.serializer=php"
            ;;
        tideways)
            echo "extension=tideways_xhprof.so tideways.auto_prepend_library=0"
            ;;
        opcache|xdebug)
            echo "zend_extension=$module.so"
            ;;
        *)  echo "extension=$module.so"
    esac
}

extension_include_dir_of_(){
    local pv
    pv="$1"
    echo "/usr/include/php/${APIS[$pv]}/ext"
}

detect_and_assign_extensions(){
    assign(){
        local dpkg_package phpregex
        if [ "${search:-}" = 'apache2' ]; then
            phpregex="libapache2-mod-$PHPVREGEX"
        else
            phpregex="php"
        fi
        spinner C " . assign detected extensions to their corresponding package ." &
        for dpkg_package in $(${X[dpkg]} -l | ${X[gawk]} '/^[hiu]i.*'$phpregex'/{print $2}'); do
            declare -ga ${dpkg_package//[.-]/_}
            mapfile -t "${dpkg_package//[.-]/_}"< <(${X[dpkg]} -L $dpkg_package|${X[grep]} "\.so$")
            mapfile -t exts_dpkg< <(p_nosort ${exts_dpkg[@]};${X[dpkg]} -L $dpkg_package|${X[grep]} "\.so$"|${X[sort]})
        done
        kill_spinner
    }
    local search pv
    local -a exts_all exts_dpkg
    [[ "$@" =~ apache2 ]] && search=apache2
    if [[ "$@" =~ assign ]]; then
        assign
    else
        spinner C " . detect actually installed extensions ." &
        for pv in $(${X[phpquery]} -V); do
            mapfile -t exts_all< <(p_nosort ${exts_all[@]};detect_extensions_in_ "/usr/lib/php/${APIS[$pv]}")
        done
        kill_spinner
        assign
        # EXTENSIONS_INSTALLED_BY_ADMIN
        spinner C " . detect extensions installed by admin ." &
        ${B[verbose]:-_} && echo "$(pf)Extensions installed by admin = difference between installed by dpkg and all extensions.."
        mapfile -t EXTS_ADMIN< <(${X[comm]} -23 <(p_sort ${exts_all[@]}) <(p_sort ${exts_dpkg[@]}))
        mapfile -t EXTS_ADMIN< <(p_sort_trim ${EXTS_ADMIN[@]})
        kill_spinner
    fi
}

assign_extensions(){
    detect_and_assign_extensions assign "$@"
}

# EIBY4_=EXTENSIONS_INSTALLED_BY_ADMIN_FOR_
# C4EIBY4_=CANDIDATES_FOR_EXTENSIONS_INSTALLED_BY_ADMIN_FOR_
# versions_iterate search_candidates_4_extensions_installed_by_admin
search_candidates_4_extensions_installed_by_admin(){
    local pv fullpath module package
    local -A bool
    pv="$1" bool[sort]=_
    spinner C " . searching packaged versions for php$pv extensions not installed by dpkg ." &
    declare -ga EIBY4_${pv//./}
    local -n EIBY4_pv=EIBY4_${pv//./}
    declare -ga C4EIBY4_${pv//./}
    local -n C4EIBY4_pv=C4EIBY4_${pv//./}
    for fullpath in ${EXTS_ADMIN[@]}; do
        module="${fullpath##*/}"
       if [ "${fullpath%/*}" = "/usr/lib/php/${APIS[$pv]}" ];then
            bool[sort]=:
            EIBY4_pv+=("${module%%.*}")
            package="php$pv-${module%%.*}"
            apt_exist "$package" && C4EIBY4_pv+=("$package:${module%%.*}")
        fi
    done
    ${bool[sort]} && mapfile -t EIBY4_pv< <(p_sort ${EIBY4_pv[@]})
    kill_spinner
}

extension_is_(){
    local pkg pv sapi
    local -i i r=1
    pkg="$2"
    case "$1" in
        known)
            echo "$pkg"|${X[grep]} -Eqsw "php-(amqplib|auth-sasl|bacon-qr-code|cas|codecoverage|codesniffer|common|constant-time|crypt-gpg|dapphp-radius|dasprid-enum|date|db|deepcopy|directory-scanner|dompdf|dragonmantank-cron-expression|easyrdf|email-validator|fdomdocument|fig-link-util|file-iterator|font-lib|fpdf|fxsl|geos|geshi|getallheaders|getid3|guestfs|hamcrest|htmlawed|htmlpurifier|httpful|icinga|image-text|invoker|json-schema|klogger|log|lorenzo-pinky|luasandbox|mail|mail-mime|malkusch-lock|mapi|mariadb-mysql-kbs|masterminds-html5|mdb2|mf2|mikey179-vfsstream|mime-type|monolog|mythtv|netscape-bookmark-parser|nikic-fast-route|nrk-predis|nyholm-psr7|opis-closure|patchwork-utf8|pclzip|pda-pheanstalk|pear|php-gettext|phpoption|predis|proxy-manager|pubsubhubbub-publisher|ramsey-uuid|random-compat|react-promise|remctl|roundcube-rtf-html-php|sass|seclib|shellcommand|sql-formatter|swiftmailer|tcpdf|thrift|timer|token-stream|tokenizer|validate|vlucas-phpdotenv|webmozart-assert|wikidiff2|xajax|zeroc-ice)" && return 0
            echo "$pkg"|${X[grep]} -Eqsw "php-http-(httplug|interop-http-factory-tests|message-factory|promise|psr7-integration-tests|request|request2|webdav-server)" && return 0
            echo "$pkg"|${X[grep]} -Eqsw "php(ab|cpd|dox|ldapadmin|liteadmin|lideadmin-themes|loc|md|myadmin|pgadmin|qrcode|sysinfo|webcounter|webcounter-extra)" && return 0
            echo "$pkg"|${X[grep]} -Eqs "php-(async-aws-|cache-|composer-|console-|doctrine-|finder-|gettext-|google-|guzzlehttp-|leage-|letodms-|mdb2-|mock|net-|parse|phar-io-|phpdocumentor-|phpmyadmin-|phpsec|phpstan-|psr-[cehls]|sabre-|services-|text-|tijsverkoyen-|xml-|zend-|zeta-)" && return 0
            echo "$pkg"|${X[grep]} -Eqsw "libphp-(adodb|jabber|jpgraph|jpgraph-examples|phpmailer|serialization-perl|simplepie|snoopy)" && return 0
            echo "$pkg"|${X[grep]} -Eqs "(dh|elpa|golang-github|gosa-plugin|icinga|kdevelop|libawl|libjs|libmarkdown|libnusoap|libow|libownet|libsparkline|mlmmj|newrelic|python3|slbackup|weechat|zabbix-frontend)-php" && return 0
            echo "$pkg"|${X[grep]} -Eqs "(cake|simplesaml)php" && return 0
            echo "$pkg"|${X[grep]} -Eqsw "(pkg-php-tools|uphpmvault)" && return 0
            echo "$pkg"|${X[grep]} -Eqs "(arthurhoaro|pdlib|cephposix|libphpy|symfony|twig|phpunit)" && return 0
            return 1
            ;;
        dependency)
            q2 ${X[dpkg-query]} -f'${Description}' -W $pkg | ${X[grep]} -iqsw "this package is a dependency package" && return $?
            if [[ "$pkg" =~ php- ]]; then
                q2 ${X[dpkg-query]} -f'${Depends}' -W $pkg | ${X[grep]} -Eiqsw "$PHPVREGEX-${pkg#php-}$" && return $?
            fi
            return 1
            ;;
        meta)
            q2 ${X[dpkg-query]} -f'${binary:Synopsis}' -W $pkg | ${X[grep]} -iqs "metapackage"
            return $?
            ;;
        sapi)
            for pv in $(${X[phpquery]} -V); do
                for sapi in $(${X[phpquery]} -v $pv -S); do
                    if [ "$pkg" = "${SAPIS[$sapi]/@VER@/$pv}" ]; then
                        r=0
                        echo "$sapi:$pv"
                    fi
                done
            done
            return $r
    esac
}

is_sapi_true_(){
    local pkg sapi
    for pkg in $(${X[dpkg]} -l | ${X[gawk]} '/^[hiu]i.*'$PHPVREGEX'/{print $2}'); do
        sapi=''
        if sapi=$(extension_is_ sapi "$pkg"); then
            if [ "${sapi%:*}" = "$1" ];then
                return 0
            fi
        fi
    done
    return 1
}

ext_state(){
    local vlpm dir pv mod sapi registry_dir state_dir
    vlpm="/var/lib/php/modules"
    [ -d "$vlpm" ] || return
    nonullglob "$vlpm/*" || return
    case "$1" in
        cleanup)
            for dir in $vlpm/*; do
                [[ -d "$dir" && ! "$(${X[phpquery]} -V)" =~ ${dir##*/} ]] && cleanup "$dir"
            done
            return
            ;;
        fix)
            for mod in $(${X[dpkg]} -l | ${X[gawk]} '/^[hiu]i\s+[^\s]*'$PHPVREGEX'/{print $2}'); do
                for pv in $(${X[phpquery]} -V); do
                    [ "${mod%-*}" = "php$pv" ] && mod="${mod#*-}" || continue
                    registry_dir="$vlpm/$pv/registry"
                    [ -d "$registry_dir" ] || mkdir -p "$registry_dir"
                    for sapi in $(${X[phpquery]} -v $pv -S); do
                        state_dir="$vlpm/$pv/$sapi"
                        if [ -f "$state_dir/enabled_by_admin/$mod" ]; then
                            cleanup "$state_dir/enabled_by_admin/$mod"
                            [ -d "$state_dir/enabled_by_maint" ] || mkdir -p "$state_dir/enabled_by_maint"
                            touch "$state_dir/enabled_by_maint/$mod"
                            [ -f "$registry_dir/$mod" ] || touch "$registry_dir/$mod"
                        fi
                    done
                done
            done
            ;;
        purge)
            mod="$2" pv="$3"
            [[ "$pv" ]] && vlpm=$vlpm/$pv
            [ -d "$vlpm" ] || return
            ${X[find]} $vlpm -type f -name "$mod" -empty -delete
    esac
}

detect_wrong_extensions(){
    local pv sapi php_ini ini_scan_dir ini_file valid_regex
    pv="$1" sapi="$2"
    php_ini="/etc/php/$pv/$sapi/php.ini"
    ini_scan_dir="/etc/php/$pv/$sapi/conf.d"
    valid_regex='^\s*([a-z._]|SMTP)+\s*=\s*[^#;]*'
    invalid_regex='^\s*priority\s*=\s*[1-9][0-9]?\s*$'
    for ini_file in $php_ini $ini_scan_dir/*\.ini; do
        if [[ -f "$ini_file" || -L "$ini_file" ]] && ( stripconf "$ini_file" | ${X[grep]} -Eqsv $valid_regex || ${X[grep]} -Eqx $invalid_regex "$ini_file" ); then
            echo "$ini_file:"
            ${X[grep]} -Enx '^\s*priority\s*=\s*[1-9][0-9]?\s*$' "$ini_file"
            for wrong_extension in "$(stripconf "$ini_file" | ${X[grep]} -Ev '^\s*([a-z._]|SMTP)+\s*=\s*[^#;]*')"; do
                ${X[grep]} -xn "\s*$wrong_extension\s*" "$ini_file"
            done
        fi
    done
}

# create temporary ini file to load all existing extensions without any directives
php_ext_file_create(){
    local pv sapi ext_file ini_file ext ext_in_ext_file
    local -a exts_all exts_in_ext_file
    local -i line_number
    pv="$1" sapi="$2" ext_file="$(tf)"
#    mapfile -t exts_all< <(detect_extensions_in_ "$(extension_dir_of_ $pv)")
    mapfile -t exts_all< <(detect_extensions_in_ "/usr/lib/php/${APIS[$pv]}")
    ${X[grep]} -E '^\s*(zend_)?extension\s*=\s*' /etc/php/$pv/$sapi/php.ini > "$ext_file"
    if nonullglob "/etc/php/$pv/$sapi/conf.d/*.ini"; then
        for ini_file in /etc/php/$pv/$sapi/conf.d/*.ini; do
            ${X[grep]} -E '^\s*(zend_)?extension\s*=\s*' "$(${X[realpath]} "$ini_file")" >> "$ext_file"
        done
    fi
    for ext in ${exts_all[@]##*/}; do
        if [[ "${ext#.so}" =~ (opcache|xdebug|ZendDebugger|ioncube_loader) ]]; then
            echo "zend_extension=$ext" >> "$ext_file"
        else
            echo "extension=$ext" >> "$ext_file"
        fi
    done
    ${X[sed]} -i 's/[ "]//g' "$ext_file"
    uniq_lines "$ext_file"
    mapfile -t exts_in_ext_file < "$ext_file"
    for ext_in_ext_file in ${exts_in_ext_file[@]#*extension=}; do
        if ! [[ " $(echo ${exts_all[@]##*/}|${X[sed]} 's/\.so//g') " =~ " ${ext_in_ext_file%.so} " ]]; then
            line_number=$(${X[grep]} -Enx "^\s*(zend_)?extension\s*=\s*$ext_in_ext_file" "$ext_file" | ${X[cut]} -d: -f1)
            if (( $line_number )); then
#                ${X[sed]} -i "${grep_output}d" "$ext_file"
                ${X[sed]} -i "${line_number}d" "$ext_file"
            fi
        fi
    done
    echo "$ext_file"
}

php_apache2_vals() {
    local pv mode apache_dir ext_file phpmodule
    local -i port
    local -A bool
    pv="$1" mode="$2" apache_dir=$(${X[mktemp]} -d) port=8080 # bool[debug]=:
    while q2 ${X[netstat]} -tulpn | ${X[grep]} -q ":$port "; do ((port++)); done
    (( ${pv%.*} > 7 )) || phpmodule="php${pv%.*}_module"
    if [[ "${mode:-}" =~ default ]]; then
        ext_file="$(php_ext_file_create $pv apache2)"
        minimalini="PHPIniDir $apache_dir"
        mv $ext_file $apache_dir/php.ini
    fi
    ${X[cat]} > $apache_dir/httpd.conf <<EOF
ServerRoot $apache_dir
PidFile $apache_dir/httpd.pid
User www-data
Group www-data
$(${bool[debug]:-_} && echo -e "ErrorLog $apache_dir/error.log\nLogLevel debug" || echo "ErrorLog /dev/null")
LoadModule mpm_prefork_module /usr/lib/apache2/modules/mod_mpm_prefork.so
LoadModule ${phpmodule:-php_module} /usr/lib/apache2/modules/libphp$pv.so
LoadModule authz_core_module /usr/lib/apache2/modules/mod_authz_core.so
LoadModule env_module /usr/lib/apache2/modules/mod_env.so
SetHandler application/x-httpd-php
$minimalini
Listen $port
<Directory $apache_dir>
    Require all granted
</Directory>
<VirtualHost *:$port>
    ServerName localhost
    DocumentRoot $apache_dir
</VirtualHost>
EOF
    ${X[cat]} > $apache_dir/index.php <<"EOF"
<?php
foreach(ini_get_all() as $k => $v) {
    if (strlen($v["local_value"])) {
        echo "$k=" . $v["local_value"] . "\n";
    }
}
?>
EOF
    ${X[chown]} -R www-data:www-data $apache_dir
    if ${bool[debug]:-_}; then
        exec 3>&1 4>&2  # Save the original stdout and stderr
        exec > $TTY 2>&1  # Redirect both stdout and stderr to $TTY
        trap 'set +x;read -rp "$(printf "\033[0;31m")[DEBUG:]$(printf "\033[0;m") press Enter to proceed...";set -x' DEBUG
        ${X[start-stop-daemon]} --start --user www-data --pidfile "$apache_dir/httpd.pid" --exec ${X[apache2]} -- -f "$apache_dir/httpd.conf"
        echo "returnvalue: $? - pid $!"
        set +x; bool[debug]=_; trap - DEBUG; set +x; read -rsn 1 -p "Press any key to continue " dummy; echo
        exec 1>&3 2>&4  # Restore the original stdout and stderr
        exec 3>&- 4>&-  # Close the temporary file descriptors
    else
        ${X[start-stop-daemon]} --start --background --quiet --user www-data --pidfile "$apache_dir/httpd.pid" --exec ${X[apache2]} -- -f "$apache_dir/httpd.conf"
    fi
    for i in {1..3}; do q0 ${X[curl]} -s "http://localhost:$port/index.php" && break; sleep 0.3; done
    ${X[curl]} -s "http://localhost:$port/index.php" | ${X[sort]}
    kill "$(< $apache_dir/httpd.pid)"
    ${bool[debug]:-_} || cleanup "$apache_dir"
}

# outputs directives values, default or local
php_directive_vals_(){
    local arg; local -a args
    for arg in "$@"; do
        if [[ "${arg%=*}" =~ (err|section) ]]; then
            local $arg
        else
            args+=("$arg")
        fi
    done
    set -- "${args[@]}" && unset -v arg args
    [ -n "$section" ] && section="\"${section//\"/}\""
    local pv sapi ext_file
    local -a garbage
    pv="$2" sapi="$3"
    >${err:=$NUL}
    case "$1" in
        default)
            ext_file="$(php_ext_file_create $pv $sapi)"
            ini_scan_dir=$NUL
            garbage+=("$ext_file")
        ;;
        local)
            ext_file="/etc/php/$pv/$sapi/php.ini"
            ini_scan_dir="/etc/php/$pv/$sapi/conf.d"
    esac
    if [ "$sapi" = 'apache2' ]; then
        q2 php_apache2_vals $pv $1
        if [ -n "${X[php$pv]}" ]; then
            q1 ${X[env]} PHP_INI_SCAN_DIR=$ini_scan_dir LC_MESSAGES=C ${X[php$pv]##* } \
            -c "$ext_file" \
            -d "error_reporting='~E_ALL'" \
            -v 2>$err
        else
            echo "no php$pv binary installed" >$err
        fi
    elif [ "$sapi" = 'fpm' ]; then
        ${X[env]} PHP_INI_SCAN_DIR=$ini_scan_dir LC_MESSAGES=C ${X[php-fpm$pv]##* } \
        -c "$ext_file" \
        -d "error_reporting='~E_ALL'" \
        -i 2>$err | ${X[grep]} -E '^[^A-Z].*=>.*=>' | ${X[sort]} | \
        ${X[php$pv]} -r '
            $lines = file("php://stdin", FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
            foreach ($lines as $line) {
                list($directive, $local, $master) = array_map("trim", explode("=>", $line));
                $value = $local === "On" ? 1 : ($local === "Off" ? 0 : ($local === "no value" ? "" : $local));
                echo "$directive=$value\n";
            }
        '
    else
        ${X[env]} PHP_INI_SCAN_DIR=$ini_scan_dir LC_MESSAGES=C ${X[php$pv]##* } \
        -c "$ext_file" \
        -d "error_reporting='~E_ALL'" \
        -r 'foreach(ini_get_all('$section') as $k => $v) if (strlen($v["local_value"])) echo "$k=".$v["local_value"]."\n";' 2>$err
    fi
    cleanup "${garbage[@]}"
}

# outputs directives default values
php_default_vals(){
    local arg; local -a args
    for arg in "$@"; do
        if [ "${arg%=*}" = 'section' ]; then
            local $arg
        else
            args+=("$arg")
        fi
    done
    set -- "${args[@]}" && unset -v arg args
    [ -n "$section" ] && section="\"${section//\"/}\""
    local pv sapi ext_file
    pv="$1" sapi="$2"
    ext_file="$(php_ext_file_create $pv $sapi)"
    if [ "$sapi" = 'apache2' ]; then
        q2 php_apache2_vals $pv default
    elif [ "$sapi" = 'fpm' ]; then
        q2 ${X[env]} PHP_INI_SCAN_DIR=$NUL LC_MESSAGES=C ${X[php-fpm$pv]##* } -c "$ext_file" -d "error_reporting='~E_ALL'" -i | \
        ${X[grep]} -E '^[^A-Z].*=>.*=>' | ${X[sort]} | \
        ${X[php$pv]} -r '
            $lines = file("php://stdin", FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
            foreach ($lines as $line) {
                list($directive, $local, $master) = array_map("trim", explode("=>", $line));
                $value = $local === "On" ? 1 : ($local === "Off" ? 0 : ($local === "no value" ? "" : $local));
                echo "$directive=$value\n";
            }
        '
    else
        q2 ${X[env]} PHP_INI_SCAN_DIR=$NUL LC_MESSAGES=C ${X[php$pv]##* } \
        -c "$ext_file" \
        -d "error_reporting='~E_ALL'" \
        -r 'foreach(ini_get_all('$section') as $k => $v) if (strlen($v["local_value"])) echo "$k=".$v["local_value"]."\n";'
    fi
    cleanup "$ext_file"
}

# outputs directives as localy configured
php_local_vals(){
    local arg; local -a args
    for arg in "$@"; do
        if [[ "${arg%=*}" =~ (err|section) ]]; then
            local $arg
        else
            args+=("$arg")
        fi
    done
    set -- "${args[@]}" && unset -v arg args
    [ -n "$section" ] && section="\"${section//\"/}\""
    local pv sapi
    pv="$1" sapi="$2"
    >${err:=$NUL}
    if [ "$sapi" = 'apache2' ]; then
        php_apache2_vals $pv local 2>>$err
    elif [ "$sapi" = 'fpm' ]; then
        ${X[env]} PHP_INI_SCAN_DIR=/etc/php/$pv/$sapi/conf.d/ LC_MESSAGES=C ${X[php-fpm$pv]##* } \
        -c "/etc/php/$pv/$sapi/php.ini" \
        -d "error_reporting='~E_ALL'" \
        -i  2>>$err | ${X[grep]} -E '^[^A-Z].*=>.*=>' | ${X[sort]} | \
        ${X[php$pv]} -r '
            $lines = file("php://stdin", FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
            foreach ($lines as $line) {
                list($directive, $local, $master) = array_map("trim", explode("=>", $line));
                $value = $local === "On" ? 1 : ($local === "Off" ? 0 : ($local === "no value" ? "" : $local));
                echo "$directive=$value\n";
            }
        '
    else
        ${X[env]} PHP_INI_SCAN_DIR=/etc/php/$pv/$sapi/conf.d/ LC_MESSAGES=C ${X[php$pv]##* } \
        -c "/etc/php/$pv/$sapi/php.ini" \
        -d "error_reporting='~E_ALL'" \
        -r 'foreach(ini_get_all('$section') as $k => $v) if (strlen($v["local_value"])) echo "$k=".$v["local_value"]."\n";' 2>>$err
    fi
}

# outputs directives that differ from default value
php_ini_local(){
    local pv sapi err line key
    local -a locals defaults
    unset default_map local_map
    local -A default_map local_map
    pv="$1" sapi="$2" err="$3"

    # collect all default values
#    mapfile -t defaults < <(php_default_vals $pv $sapi)
    mapfile -t defaults < <(php_directive_vals_ default "$pv" "$sapi")
    for line in "${defaults[@]}"; do default_map["${line%%=*}"]="${line#*=}"; done

    # collect local values
#    mapfile -t locals < <(php_local_vals $pv $sapi err=$err)
    mapfile -t locals < <(php_directive_vals_ local "$pv" "$sapi" "err=$err")
    for line in "${locals[@]}"; do local_map["${line%%=*}"]="${line#*=}"; done

    # output directives that differ from default value
    for key in "${!local_map[@]}"; do
        [[ "${local_map[$key]}" != "${default_map[$key]}" ]] && echo "$key=${local_map[$key]} (${default_map[$key]})"
    done
}

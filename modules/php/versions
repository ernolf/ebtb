__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${PHP_VERSIONS_BASHLIB:-_} && return
PHP_VERSIONS_BASHLIB=:

. <(lrequire interval)
. <(lrequire php/sury)

no_php(){
    f; R
    pf; echo "php (PHP: Hypertext Preprocessor) is not (yet) installed on this system."
    if [[ "$MS" =~ php-module-builder ]]; then
        o3; echo "This script is meant to build extensions for an installed basic php but not (yet) to do a first install"
        o3; echo "You should at least install the package php\$version-cli first"
        exit0
    elif [[ "$MS" =~ php-updater ]]; then
        o3; echo "This script is meant to up- or downgrade php but not (yet) to do a first install"
        N
        anykey
        explain
    fi
}

versions_iterate(){
    local job php_version
    job="$1"
    for php_version in $(${X[phpquery]} -V | ${X[sort]}); do
        $job $php_version
    done
    kill_spinner
}

declare -gA EXG &>$NUL || declare -A EXG
declare -ga CAN &>$NUL || declare -a CAN
declare -gA SAPI &>$NUL || declare -A SAPI

[ -f "${F[php]:="${D[vt]}/php"}" ] && . "${F[php]}"
[ -n "${X[php]}" ] && PHP[v]="$(${X[php]} -r 'echo implode(".", array_slice(explode(".", PHP_VERSION), 0, 2));')" || no_php
declare -p PHP > "${F[php]}"
mh "$(fn_ln) PHP[v]: ${PHP[v]}"

EXG=(
#   [ver]="api;end of life;end of support;supported nextcloud versions"
    [8.4]="20240924;1861833600;1830211200;31"
    [8.3]="20230831;1830211200;1767139200;28 29 30 31"
    [8.2]="20220829;1798675200;1735603200;26 27 28 29 30 31"
    [8.1]="20210902;1767139200;1700870400;24 25 26 27 28 29 30 31"
    [8.0]="20200930;1669420800;1700956800;21 22 23 24 25 26 27 28 29"
    [7.4]="20190902;1638054000;1669590000;18 19 20 21 22 23 24 25"
    [7.3]="20180731;1607209200;1638745200;15 16 17 18 19 20 21 22 23"
    [7.2]="20170718;1575068400;1606690800;13 14 15 16 17 18 19 20"
    [7.1]="20160303;1543618800;1575154800;11 12 13 14 15 16 17"
    [7.0]="20151012;1512255600;1543791600;10 11 12 13 14 15"
    [5.6]="20131226;1484780400;1546210800;9 10 11 12 13"
    [5.5]="20121212;1436479200;1468101600;9 10"
    [5.4]="20100525;1410645600;1442181600;9 10"
    [5.3]="20090626;1407967200"
    [5.2]="20041225_20060613;1294268400"
    [5.1]="20041225_20050922;1156370400"
    [5.0]="20031224_20040412;1125871200"
    [4.4]="20020918;1218060000"
    [4.3]="20020918;1112220000"
    [4.2]="20010901;1031263200"
    [4.1]="20010901;1015887600"
    [4.0]="19990421;993247200"
    [3.0]="0;971992800"
)
declare -p EXG >> "${F[php]}"
declare -n EXISTING=EXG

populate_can_array(){
    . "${F[php]}" &>$NUL
    mapfile -t CAN < <(${X[apt-cache]} search "^php${PHP[vregex]}$" | ${X[gawk]} '{print substr($1,4,3)}' | ${X[sort]} -ru)
    declare -p PHP > "${F[php]}"
    declare -p EXG >> "${F[php]}"
    declare -p CAN >> "${F[php]}"
}
populate_can_array

# increment & decrement version, echoes next higher or lower candidate if exist
i_ver(){
    require_arg $@
    local -i i r=1
    populate_can_array
    . "${F[php]}" &>$NUL
    for i in ${!CAN[@]}; do
        if [ "${CAN[i]}" = "$1" ] && ((i)); then
            echo "${CAN[i-1]}"
            r=0
        fi
    done
    return $r
}

d_ver(){
    require_arg $@
    local -i i r=1
    populate_can_array
    . "${F[php]}" &>$NUL
    for i in ${!CAN[@]}; do
        if [ "${CAN[i]}" = "$1" ] && (( i < $(( ${#CAN[@]} - 1 )) )); then
            echo "${CAN[i+1]}"
            r=0
        fi
    done
    return $r
}

# end_of_ life & end_of_ support
end_of_(){
    required_args 2 $@
    local -i ut
    . "${F[php]}" &>$NUL
    case $1 in
          life) ut=$(A_fld EXG ';' "$2" 2)
                ;;
       support) ut=$(A_fld EXG ';' "$2" 3)
    esac
    echo "$(ut2udF $ut) ($(interval $ut))"
}

list_existing(){
    local -i i eol eos c2 c3
    local ver supported_nextcloud_versions
    . "${F[php]}" &>$NUL
    c2=10 c3=49
    line '=' P 2/78 b1
    o2; B; echo "This is a list of existing php versions for your information."; N
    o2; Y; echo "Version$(o $c2)End of life$(o $c3)End of active support"; N
    line '-' dP 2/78
    for ver in $(p_rsort ${!EXG[@]}); do
        read -r ext eol eos supported_nextcloud_versions<<<${EXG[$ver]//;/ }
        if [ $today -le $eos ];then
            o2; pf; lG
            echo "$ver$(o $c2)$(ut2udF $eol) ($(interval $eol))$(o $c3)$(ut2udF $eos) ($(interval $eos))"; N
        elif [ $today -le $eol ];then
            o2; pf; G
            echo "$ver$(o $c2)$(ut2udF $eol) ($(interval $eol))$(o $c3;dR)$(ut2udF $eos) ($(interval $eos))"; N
        else
            o2; pf; GRAY
            echo "$ver$(o $c2)$(ut2udF $eol) ($(interval $eol))"; N
        fi
    done
    line '-' dP 2/78
    o2; GRAY; echo "More info: $(W)https://www.php.net/supported-versions.php"; N
}

list_candidates() {
    local can eol
    local -i i c2=11 c3=50
    . "${F[php]}" &>$NUL
    line '=' P 2/78 b1
    o2; B; echo "This is a list of php versions offered by the actual apt sources"; N
    o2; Y; echo "Version$(o $c2)End of life$(o $c3)Description"; N
    line '-' dP 2/78
    for i in "${!CAN[@]}";do
        can="${CAN[i]}"
        if does_exist_ "$can" 0; then
            (( i )) && line '-' GRAY 2/78
            eol="$(end_of_ life $can)"
            if [ "${PHP[v]}" = "$can" ];then
                line ' ' bGbg 1/80 a0
                o2; bGbg; echo "-> $can$(o $c2)$eol$(o $c3)<-actually running version$(N)"
            elif [[ "$(${X[phpquery]} -V)" =~ $can ]];then
                o2; lG; echo "$(pf)$can$(o $c2)$eol$(o $c3;GRAY)installed (at least partially)$(N)"
            else
                o2; pf; GRAY; echo "$can$(o $c2)$eol$(N)"
            fi
            o 7; GRAY; echo "\\$(o c2;dY)supported by Nextcloud version $(listify_ C dY $(A_fld EXG ';' $can 4))"; N
        else version_mismatch; fi
    done
    line '-' dP 2/78
}

does_exist_(){
    require_arg $@
    local -i r a
    r=0 a=${2:-0}
    . "${F[php]}" &>$NUL
    if ((a)); then
        if [[ " ${!EXG[@]} " =~ " $1 " ]]; then
            if ! [[ "$(${X[phpquery]} -V)" =~ $1 ]]; then
                wrong_first_argument "$1" 1
            fi
        else
            wrong_first_argument "$1" 0
        fi
    else
        if [[ " ${!EXG[@]} " =~ " $1 " ]]; then
            if ! [[ " ${CAN[@]%%;*} " =~ " $1 " ]]; then
                r=1
                no_candidate "$1"
            fi
        else
            r=1
            does_not_exist "$1"
        fi
    fi
#    ((r))&&exit$r
    return $r
}

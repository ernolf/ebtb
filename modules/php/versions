__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${VERSIONS_BASHLIB:-false} && return 0 || {
    VERSIONS_BASHLIB=:

    . <(require today)
    . <(require interval)
    . <(require ansi)
    . <(require line)
    . <(require array)

    declare PHP_VERSION phpvregex
    declare -a EXISTING VERSIONS CAN
    phpvregex='php(5\.6|7\.[01234]|8\.[0123])'

    no_php(){
        f;R
        pf;echo "php (PHP: Hypertext Preprocessor) is not (yet) installed on this system."
        os;echo "This script is meant to up- or downgrade php but not (yet) to do a first install"
        N
        anykey
        explain
    }

    which php >/dev/null 2>&1 && PHP_VERSION="$(php -r 'echo implode(".", array_slice(explode(".", PHP_VERSION), 0, 2));')" || no_php

    existing_php_versions(){
        cat <<PHP_VERSIONS
        8.3;20230831;1795388400;1763852400
        8.2;20220829;1765148400;1733612400
        8.1;20210902;1732489200;1700866800
        8.0;20200930;1700953200
        7.4;20190902;1669590000
        7.3;20180731;1638745200
        7.2;20170718;1606690800
        7.1;20160303;1575154800
        7.0;20151012;1547074800
        5.6;20131226;1546210800
        5.5;0;1469052000
        5.4;0;1441231200
        5.3;0;1407967200
        5.2;0;1294268400
        5.1;0;1156370400
        5.0;0;1125871200
        4.4;0;1218060000
        4.3;0;1112220000
        4.2;0;1031263200
        4.1;0;1015887600
        4.0;0;993247200
        3.0;0;971992800
PHP_VERSIONS
    }; mapfile -t EXISTING< <(existing_php_versions | sed 's/^\s*//')

    populate_versions_array(){
        mapfile -t VERSIONS< <(phpquery -V | sort)
    }; populate_versions_array

    versions_iterate(){
        populate_versions_array
        local job php_version
        job="$1"
        for php_version in ${VERSIONS[@]}; do
            $job $php_version
        done
    }

    populate_can_array(){
        mapfile -t CAN< <(env LC_MESSAGES=C apt-cache search "^$phpvregex$"|awk '{print substr($1,4,3)}'|sort -ru)
    }; populate_can_array

    # increment & decrement version, echoes next higher or lower candidate if exist
    i_ver(){
        local -i i r=1
        populate_can_array
        for i in ${!CAN[@]}; do
            if [ "${CAN[i]}" = "$1" ] && ((i)); then
                echo "${CAN[i-1]}"
                r=0
            fi
        done
        return $r
    }

    d_ver(){
        local -i i r=1
        populate_can_array
        for i in ${!CAN[@]}; do
            if [ "${CAN[i]}" = "$1" ] && (( i < $(( ${#CAN[@]} - 1 )) )); then
                echo "${CAN[i+1]}"
                r=0
            fi
        done
        return $r
    }

    # end_of_ life & end_of_ support
    end_of_(){
        local -i ut
        case $1 in
              life) ut=$(a_fld EXISTING ';' "$2" 3)
                    ;;
           support) ut=$(a_fld EXISTING ';' "$2" 4)
        esac
        echo "$(ut2udF $ut) ($(interval $ut))"
    }

    list_existing(){
        local -i i eol eos c2=10 c3=49
        local ver
        line '=' P 2/78 b1
        o2;B;echo "This is a list of existing php versions for your information.";N
        Y;o2;echo "Version$(o $c2)End of life$(o $c3)End of active support";N
        line '-' dP 2/78
        for i in ${!EXISTING[@]};do
            read -r ver ext eol eos <<<${EXISTING[i]//;/ }
            if [ $today -le $eos ];then
                o2;pf;lG
                echo "$ver$(o $c2)$(ut2udF $eol) ($(interval $eol))$(o $c3)$(ut2udF $eos) ($(interval $eos))";N
            elif [ $today -le $eol ];then
                o2;pf;G
                echo "$ver$(o $c2)$(ut2udF $eol) ($(interval $eol))$(o $c3;dR)$(ut2udF $eos) ($(interval $eos))";N
            else
                o2;pf;GRAY
                echo "$ver$(o $c2)$(ut2udF $eol) ($(interval $eol))";N
            fi
        done;line '-' dP 2/78;o2;GRAY;echo "More info: $(W)https://www.php.net/supported-versions.php";N
    }

    list_candidates() {
        local eol
        local -i i c2=11 c3=50
        line '=' P 2/78 b1
        o2;B;echo "This is a list of php versions offered by the actual apt sources";N
        Y;o2;echo "Version$(o $c2)End of life$(o $c3)Description";N
        line '-' dP 2/78
        for i in "${!CAN[@]}";do
            if does_exist_ "${CAN[i]}" 0; then
                eol="$(end_of_ life ${CAN[i]})"
                if [ "$PHP_VERSION" = "${CAN[i]}" ];then
                    line ' ' bGbg 1/80 a0
                    o2;bGbg;echo "-> ${CAN[i]}$(o $c2)$eol$(o $c3)<-actually running version$(N)"
                elif [[ " ${VERSIONS[@]} " =~ " ${CAN[i]} " ]];then
                    o2;lG;echo "$(pf)${CAN[i]}$(o $c2)$eol$(o $c3;GRAY)installed (at least partially)$(N)"
                else
                    o2;pf;GRAY;echo "${CAN[i]}$(o $c2)$eol$(N)"
                fi
            else version_mismatch; fi
        done
        line '-' dP 2/78
        . <(require php/sury)
    }

#normal:
#        call_me candidates
#        f
#        [ $(echo ${EXISTING[0]%%;*} | sed 's/\.//') -eq ${CAN[0]//./} ] || need_ppa
#        anykey
#        ask "$(qpf)Do you want to list the installed php packages" "$YES" && list_installed
#        anykey
#        ask "$(qpf)Do you want to read the help" "$YES" && explain

#quiet:
#        f
#        [ $(echo ${EXISTING[0]%%;*} | sed 's/\.//') -eq ${CAN[0]//./} ] || need_ppa
#        anykey
#        ask "$(qpf)Do you want to list the installed php packages" "$YES" && list_installed
#        anykey
#        ask "$(qpf)Do you want to read the help" "$YES" && explain

#only:
#        call_me candidates
#        call_help
#        f

    does_exist_(){
        local -i r=0 a=$2
        if ((a)); then
            if [[ " ${EXISTING[@]%%;*} " =~ " $1 " ]]; then
                if ! [[ " ${VERSIONS[@]%%;*} " =~ " $1 " ]]; then
                    wrong_first_argument "$1" 1
                fi
            else
                wrong_first_argument "$1" 0
            fi
        else
            if [[ " ${EXISTING[@]%%;*} " =~ " $1 " ]]; then
                if ! [[ " ${CAN[@]%%;*} " =~ " $1 " ]]; then
                    r=1
                    no_candidate $1
                fi
            else
                r=1
                does_not_exist $1
            fi
        fi
    #    ((r))&&exit$r
        return $r
    }

    switch_default_version(){
        local key
        local -a selections
        local -i i
        populate_versions_array
        # update-alternatives
        cleanup_and_fix_alternatives before  # repair broken alternatives, remove not existing alternatives
        mapfile -t selections< <(update-alternatives --get-selections | grep -E "ph(ar|p)")
        P;echo " -$(format_string "Here you can switch the default php version linked to the generic $(C)/usr/bin/php$(P) with the means of the Debian alternatives system. All php related packages maintained by the alternatives system will get switched to manual mode instead of automatic. That will prevent php from changing its version without your dessision. Therefore you can select the actually active version as well here. In this step there is no test, if all required php packages to run a server like Nextcloud are present in the version you choose. So it is recommendet to first run $(C)$me$forceflag \$old \$new$(P), where $(C)\$old$(P) should be the version that you know exactly that everything has been installed correctly and $(C)\$new$(P) should be the version that you want to switch to here and now." 3)"
        echo "  $(format_string "In the subsequent next step it will switch your webserver to listen to the new php version as well. In some rare special cases, that step may fail though. You will have to fix it yourself then, by editing the config files of your webserver, to make it listen to the new php socket." 3;N)"
        f
        o3;dY;echo "this is how the alternatives system is configured at present:";N
        f
        for i in ${!selections[@]}; do
            o3;pf;echo "$(lG)${selections[i]}";N
        done
#        Y;echo "  $(format_string "Please consider: $(dY)if some alternatives listed here are not in the expected php version, then the package that provides these binaries may not be installed in that version." 3)"
        N;f
        pf;Y;echo "Switch default php version to:"
        for i in ${!VERSIONS[@]}; do
            f;o 10;echo "$(button $((i + 1))) - php${VERSIONS[i]}"
        done
        f;o 10;echo "$(button q) - do nothing, quit"
        N;f
        while :;do read -rsn 1 -p "$(pf;Y)Please make your choice: $(N)" key
            case $key in
                    q)  f 2;break
                        ;;
                [1-9])  if [[ ${VERSIONS[$key-1]} ]]; then
                            P;pf;echo "Your choice:$(Yi) php${VERSIONS[$key-1]}";N
                            anykey
                            separator
                            apt-mark manual $(dpkg -l|awk '/^[hiu]i.*php*/{print $2}') >/dev/null 2>&1
                            set_selections 'ph(ar|p)' 'manual' "${phpvregex#php}" "${VERSIONS[$key-1]}"
                            cleanup_and_fix_alternatives afterwards  # repair broken alternatives, remove not existing alternatives
                            mapfile -t selections< <(update-alternatives --get-selections | grep -E "ph(ar|p)")
                            o3;dY;echo "alternatives system is now switch to:";N
                            f
                            for i in ${!selections[@]}; do
                                o3;pf;echo "$(lG)${selections[i]}";N
                            done
                            f
                            Y;echo "  $(format_string "Please consider: $(dY)if some alternatives listed here are not in the expected php version, then the package that provides those binaries may not be installed in that version." 3)"
                            f
                            anykey
                            separator
                            switch_fpm_version ${VERSIONS[$key-1]}
                            switch_a2module_version ${VERSIONS[$key-1]}
                            f
                            o3;N;echo "You should once more run"
                            f;G;echo "$(prompt;lB) $me$forceflag$(C) --list-installed";N
                            f;o2;echo "$(format_string ".. until the end (do not quit in between), not only to look if the switch worked but to scan once more for possible configuration errors from the point of view of the new version. If everything looks good and is working well, considder to completely remove the old php version." 3)"
                            break
#                        else
#                            echo "$invi. Please select a valid option."
                        fi
                        ;;
#                    *)  echo "$invi. Please select a valid option."
            esac
        done
        end_message
        exit0
    }

}

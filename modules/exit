__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${EXIT_BASHLIB:-_} && return
EXIT_BASHLIB=:

# TODO 0 -->
. <(lrequire binaries)
. <(lrequire basics)
. <(lrequire ansi)
. <(lrequire debug)
# TODO 0 <--
. <(lrequire ebtb)
. <(lrequire cleanup)

F[spinner_pid]=${D[shm]}/spinner.pid

exit_msg(){
    q0 ${X[pgrep]} -f '/(ebtb-)?(ebtb|janitor)(-test)?$' && return 0
    if ebtb_is_installed janitor; then
        GRAY; echo "the $(W)janitor$(GRAY) can provide extensive system informations and more.$(W) simply run: $(Y)janitor"; N
    else
        GRAY; echo "generous? feedback? questions?$(W) simply run: $(Y)$ME --contribute"; N
    fi
}

exit0(){
    log_trace "exit 0"
    G; echo "exiting ${M[n]} script."; N
    exit_msg
    exit 0
}

exit1(){
    log_trace "exit 1"
    R; echo "exiting ${M[n]}â€¦"; N
    exit_msg
    exit 1
}

# define a trap to clean up the lock- and temporary files
exit_trap(){
    local x
    [ -f "${F[spinner_pid]}" ] && kill_spinner || ${X[sleep]} .1
    ${local_server:-_} && ls_ stop
#    cleanup "${D[l]}" # this must not be cleaned up, it would produce error messages due to race conditions
    for x in td shm; do
        nonullglob "${D[$x]}/${M[b]}${M[pid]}_*" && cleanup ${D[$x]}/${M[b]}${M[pid]}_*
        nonullglob "${D[$x]}/${M[b]:-$$}_*" && cleanup ${D[$x]}/${M[b]:-$$}_*
    done
    ${X[reset]} -IQ
    ansi_reset
}

interrupted(){
    local sig t
    local -i os # offset
    sig="$1" t="$(O)TRAP$(Yi): -" os=24
    if [ -z "${M[b]}" ]; then
        return 0
    else
        te1
        f
        separator R
        echo "$t $(C)interrupted by$(o $os; Yi)- $(R)sig$sig"
        if [ -f "${F[spinner_pid]}" ]; then
            echo "$t $(C)spinner$(o $os; Yi)- $(G)killed"
        fi
        if nonullglob "$TD/${M[b]}${M[pid]}_*" || nonullglob "$TD/${M[b]:-$$}_*"; then
            echo "$t $(C)temporary files$(o $os; Yi)- $(G)removed"
        fi
        exit1
    fi
}

trap 'exit_trap' EXIT
trap 'interrupted INT' INT
trap 'interrupted TERM' TERM

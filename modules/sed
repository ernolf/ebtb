__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${SED_BASHLIB:-false} && return 0 || {
    SED_BASHLIB=:

    # This function deletes from pattern "p" to end without deleting the line containing $p
    delafter(){
        local pattern="$1" infile="$2" outfile="$3"
        case ${outfile:--i} in
            -i) sed -i -n "0,/$pattern/p" "$infile"
                ;;
             *) sed -n "0,/$pattern/p" "$infile" > "$outfile"
        esac
    }

    # This function deletes from pattern "p" to end including the line containing $p
    delp2ei(){
        local pattern="$1" infile="$2" outfile="$3"
        case ${outfile:--i} in
            -i) sed -i -n "/$pattern/q;p" "$infile"
                ;;
             *) sed -n "/$pattern/q;p" "$infile" > "$outfile"
        esac
    }
    del_from_x_to_end_including(){ delp2ei "$@";}

    # This function searches for lines containing pattern1 and pattern2 and deletes those lines and everything in between.
    delx2yi(){
        local pattern1="$1" pattern2="$2" infile="$3" outfile="$4"
        case ${outfile:--i} in
            -i) sed -i "/$pattern1/,/$pattern2/d" "$infile"
                ;;
             *) sed "/$pattern1/,/$pattern2/d" "$infile" > "$outfile"
        esac
    }
    del_from_x_to_y_including(){ delx2yi "$@";}

    # This function only deletes the lines in between pattern1 and pattern2, remaining those lines containg the patterns untouched.
    delx2y(){
        local pattern1="$1" pattern2="$2" infile="$3" outfile="$4"
        case ${outfile:--i} in
            -i) sed -i "/$pattern1/,/$pattern2/{//!d}" "$infile"
                ;;
             *) sed "/$pattern1/,/$pattern2/{//!d}" "$infile" > "$outfile"
        esac
    }
    del_from_x_to_y(){ delx2y "$@";}

    # This function deletes all lines from the beginning until & including the line containing pattern "p".
    delb2pi(){
        local pattern="$1" infile="$2" outfile="$3"
        case ${outfile:--i} in
            -i) sed -i "1,/$pattern/d" "$infile"
                ;;
             *) sed "1,/$pattern/d" "$infile" > "$outfile"
        esac
    }
    del_from_begin_to_y_including(){ delb2pi "$@";}

    # This function deletes all lines from the beginning until the line containing pattern, remaining the line containing pattern untouched.
    delb2p(){
        local pattern="$1" infile="$2" outfile="$3"
        case ${outfile:--i} in
            -i) sed -i "1,/$pattern/{/$pattern/!d;}" "$infile"
                ;;
             *) sed "1,/$pattern/{/$pattern/!d;}" "$infile" > "$outfile"
        esac
    }
    del_from_begin_to_y(){ delb2p "$@";}

    # trim "$1" from leading and trailing spaces
    trim(){
        sed 's/^\s*//; s/\s*$//' <<< "$1"
    }

    # stripconf php.ini, exclude pattern: comment marker ';', #, empty lines and '['
    stripconf(){
        sed -E '/^\s*($|;|#|\[)/d;/=\s*$/d' "$1"
    }

    unquote() {
        sed -E "s/^'(.*)'$|^\"(.*)\"$/\1/" <<< "$1"
    }

    # remove ansi color codes
    noansi(){
        sed -re 's/\x1B\[[0-9;?]*[a-zA-Z]//g' <<< "$*"
    }

    urldecode(){
        echo -n "${*//+/ }" | sed 's/%\([0-9a-fA-F]\{2\}\)/\\x\1/g' | xargs -0 printf
    }

}

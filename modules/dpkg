__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${DPKG_BASHLIB:-_} && return
DPKG_BASHLIB=:

# TODO 0 -->
. <(lrequire binaries)
. <(lrequire basics)
. <(lrequire button)
. <(lrequire exit)
. <(lrequire anykey)
. <(lrequire awksed)
. <(lrequire ask)
. <(lrequire spinner)
# TODO <-- 0
. <(lrequire fstring)
. <(lrequire today)

declare -ga DPKG_LOCKFILES || declare -a DPKG_LOCKFILES
DPKG_LOCKFILES=(
    "/var/lib/dpkg/lock"
    "/var/lib/dpkg/lock-frontend"
    "/var/lib/apt/daily_lock"
    "/var/lib/apt/lists/lock"
    "/var/cache/apt/archives/lock"
)

check_lockfile(){
    local lockfile fuser_output
    local -A bool
    local -i pid
    lockfile="$1"
    [ "$2" = '-v' ] && bool[verbose]=: || bool[verbose]=_
    if [ -e "$lockfile" ]; then
        # Identify the process holding the lock
        fuser_output=$(q2 ${X[fuser]} "$lockfile")
        if [ -n "$fuser_output" ]; then
            processstring="$(listify_ Yi R "$(for pid in $fuser_output; do echo "$(${X[ps]} -p $pid -o comm=) (pid:$pid)"; done)")"
            o3; R; echo "- Lockfile '$(C)$lockfile$(R)' is used by: $processstring";N
# TODO 1 -->
#            for pid in $fuser_output; do echo "$(ps -p $pid -o comm=) (pid:$pid))"; done
# TODO <-- 1
        else
            ${bool[verbose]} && { o3; echo "- Lockfile '$(C)$lockfile$(N)' exists but no process seems to be using it."; }
        fi
    else
        ${bool[verbose]} && { o3; echo "- Lockfile '$(C)$lockfile$(N)' does not exist."; }
    fi
}

check_lockfiles(){
    local lockfile
    local -a checked_lockfiles
    local -A flag
    local -i i
    flag[verbose]="$1"
    mapfile -t checked_lockfiles< <(for lockfile in "${DPKG_LOCKFILES[@]}"; do check_lockfile "$lockfile" "${flag[verbose]}"; done)
    if (( $# )); then
        for i in ${!checked_lockfiles[@]}; do
            echo "${checked_lockfiles[i]}"
        done
    elif (( ${#checked_lockfiles[@]} )); then
        bundle echo "$(xpf; R) WARNING: dpkg and/or apt is locked:"; N
        for i in ${!checked_lockfiles[@]}; do
            bundle echo "${checked_lockfiles[i]}"
        done
        return 1
    else
        return 0
    fi
}

apt_update(){
    spinner C " .  resynchronizing the APT package index files  ." &
    ${X[apt-get]} -q2 update
    kill_spinner
}

# returns true if last apt-* update is done more than $1=int (defaults to 4) hours ago
apt_need_update(){
    check_lockfiles || exit1
    if (( $(( $(( $(now) - $(${X[stat]} -c %Y /var/lib/apt/lists/partial) )) / 3600 )) > ${1:-4} )); then
        f
        echo "$(pf; format_string "The APT package indexes are synchronized more than ${1:-4} hours ago. This script requires up-to-date indexes to function correctly." 3)"
        if ask "$(qpf)Do you want to resynchronize the APT package index files now" "$YES"; then
            apt_update
        else
            te0 3
        fi
    fi
}

install_time(){
    local pkg
    pkg="$1"
    if ${X[grep]} -qs " install $pkg" /var/log/dpkg.log; then
        ${X[date]} -d "$(${X[gawk]} '/ install '$pkg'/ {date=$1 " " $2} END{print date}' /var/log/dpkg.log)" "+%s"
        return 0
    fi
    return 1
}

apt_file_search(){
    local fullpath package
    local -i installed now last_apt_update
    fullpath="$1" now=$(now) last_apt_update=$(${X[stat]} -c %Y /var/lib/apt/lists/partial)
    if installed=$(install_time apt-file); then
        if (( $(( now - installed )) < $(( now - last_apt_update )) )); then
            q0 ${X[apt-get]} update -q2
        fi
    elif (( $(( $(( now - last_apt_update )) / 3600 )) > 4 )); then
        q0 ${X[apt-get]} update -q2
    fi
    package=$(q2 apt-file -l search "$fullpath") || return $?
    printf "$package"
    mh "apt-file -l search $fullpath -> $package"
    return 0
}

apt_exist(){
    local -a pkgnames
    mapfile -t pkgnames< <(${X[apt-cache]} pkgnames "$1")
    [[ " ${pkgnames[@]} " =~ " $1 " ]] || return 1
    ${X[apt-cache]} policy "$1" 2>&1 | ${X[grep]} -qs "Candidate: (none)" && return 1
# TODO 2 -->
#    ${X[apt-get]} -qqs install "$1" 2>&1 | ${X[grep]} -Eqs "(has no installation candidate|Unable to locate package)" && return 1
# TODO <-- 2
    q0 ${X[apt-get]} -qqs install "$1"
}

apt_install(){
    apt_need_update
    check_lockfiles || exit1
    local p ps yes=" -y"
    ${B[step]:-_} && yes=""
    mh "${X[apt-get]}$yes install $@"
    for p in $@; do
        ${X[dpkg]} -l | ${X[grep]} -wqs "$p" || ps="$ps $p"
        if (( $(echo "$ps" | ${X[wc]} -w) )); then
            mh "${X[apt-get]}$yes install $ps"
            ${X[apt-get]}$yes --ignore-hold --allow-change-held-packages --no-install-recommends install $ps
            (( $? )) && exit1
        fi
    done
    ${B[step]:-_} && anykey
}

apt_install_prechecked(){
    check_lockfiles || exit1
    (( $# )) && mh "apt_install_prechecked $@"
    local yes=''
    if [ "$1" = '--yes' ] || [ "$1" = '-y' ]; then
        yes=' -y'
        shift
    fi
    ${X[apt-get]}$yes --ignore-hold --allow-change-held-packages --no-install-recommends install $@ || { something_went_wrong "apt-get install returned an error"; exit1; }
}

apt_remove(){
    check_lockfiles || exit1
    (( $# )) && mh "apt_remove $@"
    local yes='' cursor_status='show'
    if [ "$1" = '--yes' ] || [ "$1" = '-y' ]; then
        yes=' -y'
        shift
    fi
    [[ -n "${X[php]}" && -z "${PHP[v]}" ]] && PHP[v]="$(${X[php]} -r 'echo implode(".", array_slice(explode(".", PHP_VERSION), 0, 2));')"
    [ -z "${PHP[v]}" ] || switch_php_to_ "${PHP[v]}"
    if [ -f "${F[cursor]}" ]; then
        if ${X[grep]} -qsw 'hide' "${F[cursor]}"; then
            cursor_status='hide'
        fi
    fi
    cursor_ show
    ${X[apt-get]}$yes --ignore-hold --allow-change-held-packages --no-install-recommends remove $@ || { something_went_wrong "apt-get remove returned an error"; exit1; }
    cursor_ $cursor_status
}

apt_purge(){
    check_lockfiles || exit1
    (( $# )) && mh "apt_purge $@"
    local yes=''
    if [ "$1" = '--yes' ] || [ "$1" = '-y' ]; then
        yes=' -y'
        shift
    fi
    [[ -n "${X[php]}" && -z "${PHP[v]}" ]] && PHP[v]="$(${X[php]} -r 'echo implode(".", array_slice(explode(".", PHP_VERSION), 0, 2));')"
    [ -z "${PHP[v]}" ] || switch_php_to_ "${PHP[v]}"
    ${X[apt-get]}$yes --ignore-hold --allow-change-held-packages --no-install-recommends purge $@ || { something_went_wrong "apt-get purge returned an error"; exit1; }
}

rdepends(){
    local glob
    local -A bool
    if [ "$1" = '-q' ]; then
        bool[quiet]='true'
        shift
    else
        bool[quiet]='_'
    fi
    glob="$1"
    if "${bool[quiet]}"; then
        (( $(q2 ${X[apt-get]} --ignore-hold --allow-change-held-packages -s -q2 remove "$glob" | ${X[wc]} -l) - 1 )) # && return 0 || return 1
    else
        q2 ${X[apt-get]} --ignore-hold --allow-change-held-packages -s -q2 remove "$glob" | ${X[gawk]} '{print $2}'
    fi
}

apt_rdepends(){
    local glob package
    glob="$1"
    for package in $(${X[dpkg]} -l | ${X[gawk]} '/^[hiu]i\s+[^\s]*'$glob'/{print $2}'); do
        q2 ${X[apt-rdepends]} -r --follow=Depends --show=Depends --state-follow=Installed --state-show=Installed $package | ${X[gawk]} '/Reverse/ {print $3}'
    done | ${X[sort]} -u
}

# this is very slow but acurate
rdependency_tree(){
    local package pkg_main pkg_sub pkg_sub_sub
    local -a depending_main depending_sub
    package="$1"
    mapfile -t depending_main< <(${X[apt-get]} --ignore-hold --allow-change-held-packages -s -q2 remove $package | ${X[gawk]} '{print $2}')
    if (( ${#depending_main[@]} > 1 )); then
        echo "$package is required by:"
        for pkg_main in ${depending_main[@]}; do
            echo -n " - $pkg_main "
            mapfile -t depending_sub< <(${X[apt-get]} --ignore-hold --allow-change-held-packages -s -q2 remove $pkg_main | ${X[gawk]} '{print $2}')
            if (( ${#depending_sub[@]} > 1 )); then
                echo "- which is required by:"
                for pkg_sub in ${depending_sub[@]}; do
                    echo "    - $pkg_sub"
                done
            else
                echo "(not required by any other package)"
            fi
        done
    else
        echo "$package is not required by any other package"
    fi
}

rdep_tree(){
    rdep(){
        local pkg
        local -a rdeps rdep
        pkg=$1
        mapfile -t rdeps< <(${X[apt-cache]} rdepends $pkg)
        mapfile -t rdep< <(comm -12 <(p_sort ${installed[@]}) <(p_sort ${rdeps[@]}))
        mapfile -t rdep< <(comm -23 <(p_sort ${rdep[@]}) <(p_sort $pkg))
        (( ${#rdep[@]} )) && p_sort ${rdep[@]}
    }
    local package rdependency
    local -a installed rdepends rrdepends
    local -i i ii depth
    package="$1"
    mapfile -t installed< <(${X[dpkg]} -l | ${X[gawk]} '/^[hiu]i\s+[^\s]/{print $2}')
    mapfile -t rdepends< <(rdep $package)
    if (( ${#rdepends[@]} )); then
        echo "$package has ${#rdepend[@]} reverse dependencies:"
        while :; do
            depth=" - "
            for i in ${!rdepend[@]}; do
                rdependency="${rdepend[i]}"
                echo -n "$depth$rdependency "
                    mapfile -t rrdepends< <(rdep $rdependency)
                    if (( ${#rrdepends[@]} )); then
                        echo "- which is required by:"
                        for ii in ${!rrdepends[@]}; do
                            rrdependency="${rrdepends[ii]}"
                            echo "    - $rrdependency"
                        done
                    else
                        echo "(not required by any other package)"
                        break
                    fi
            done
        done
    else
        echo "$package is not required by any other package"
    fi
}

# used in php/sury
dpkg_min_version(){
    required_args 2 "$@"
    local bin="$1" min="$2"
    ${X[dpkg]} --compare-versions "$(q2 $bin --version | ${X[grep]} -oP '\d+(\.\d+){1,3}')" ge "$min" # && return 0 || return 1
}

list_apt_sources(){
    local plu
    local -i i
    local -a foreign_architectures aptsources apturls aptsourcesfiles

    mapfile -t foreign_architectures< <(${X[dpkg]} --print-foreign-architectures 2>&1)
    if (( ${#foreign_architectures[@]} )); then
        f
        o2; B; echo "This is a list of the supported architectures on this machine for your information:"; N
        o2; pf; GRAY; echo "main architecture: $(${X[dpkg]} --print-architecture 2>&1)"; N
        (( ${#foreign_architectures[@]} > 1 )) && plu='s' || plu=''
        for i in ${!foreign_architectures[@]}; do
            o2; pf; GRAY; echo "foreign architecture$plu $((i+1)): ${foreign_architectures[i]}"; N
        done
    else
        f
        o2; B; echo "This is the supported architecture on this machine for your information:"; N
        o2; pf; GRAY; echo "architecture: $(${X[dpkg]} --print-architecture 2>&1)"; N
    fi

    f
    o2; B; echo "This is a list of the effective apt sources on this machine for your information:"; N
    # apt sources
    if [ -d /var/lib/apt/lists ]; then
        mapfile -t aptsources< <(p_sort "$(cd /var/lib/apt/lists/;${X[ls]} *Packages|${X[sed]} 's/_Packages.*$//;s/-deb.*$//;s/_dists_/ /;s/_binary-/ /')")
        for i in ${!aptsources[@]}; do
            o2; pf; GRAY; echo "aptsource-$(printf '%02d' $((i+1))): $(urldecode ${aptsources[i]//_/\/}|${X[sed]} 's/\(.*\)\/\(.*\)/\1 \2/')"; N
        done

    f
    o2; B; echo "This is a list of the files containing the apt sources for your information:"; N
    # apt sources files
        mapfile -t apturls< <(p_sort "$(cd /var/lib/apt/lists/;${X[ls]} *Packages|${X[sed]} 's/_dists.*$//')")
# TODO 3 -->
#        mapfile -t aptsourcesfiles< <(p_sort $(for i in ${!apturls[@]};do ${X[grep]} -r "$(urldecode ${apturls[i]//_/\/})" /etc/apt/|${X[grep]} -v ':\s*#'|${X[grep]} -E "*.(list|sources)\:"|${X[gawk]} -F':' '{print $1}'; done))
# TODO <-- 3
        mapfile -t aptsourcesfiles< <(p_sort $(for i in "${!apturls[@]}"; do ${X[grep]} -r "$(urldecode ${apturls[i]//_/\/})" /etc/apt/|${X[gawk]} -F: '/:\s*#/{next}/.*\.(list|sources):/{print$1}'; done))
        for i in ${!aptsourcesfiles[@]}; do
            o2; pf; GRAY; echo "aptsourcefile-$(printf '%02d' $((i+1))): ${aptsourcesfiles[i]}"; N
        done
    fi
}

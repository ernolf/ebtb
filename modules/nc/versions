__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${NC_VERSIONS_BASHLIB:-_} && return
NC_VERSIONS_BASHLIB=:

. <(lrequire php/version)
. <(require nc/aio)
. <(require nc/c2j)
. <(require nc/nextcloud)

[ -f "${F[nc]:=${D[vt]}/nc}" ] && . ${F[nc]}

# array with latest versions from end of life platforms
declare -ga LATEST_EOL 2>$NUL || declare -a LATEST_EOL
LATEST_EOL=(11.0.8 12.0.13 13.0.12 14.0.14 15.0.14 16.0.11 17.0.10 18.0.14 19.0.13 20.0.14 21.0.9 22.2.10 23.0.12 24.0.12 25.0.13 26.0.13 27.1.11 28.0.14 29.0.16 30.0.16)

nc_version_(){
    local version_php
    version_php="$2"
    case "$1" in
      long) ${X[gawk]} -F'[][ ,()]+' '/\$OC_Version =/{if($3=="array"){print $4"."$5"."$6"."$7}else{print $3"."$4"."$5"."$6}}' "$version_php"
            ;;
     short) ${X[gawk]} -F'[][ ,()]+' '/\$OC_Version =/{if($3=="array"){print $4"."$5"."$6}else{print $3"."$4"."$5}}' "$version_php"
            ;;
       key) ${X[gawk]} -F'[][ ,()]+' '/\$OC_Version =/{if($3=="array"){print $4"."$5}else{print $3"."$4}}' "$version_php"
            ;;
    string) ${X[gawk]} -F\' '/\$OC_VersionString =/{print $2}' "$version_php"
            ;;
       tag) ${X[gawk]} -F\' '/\$OC_VersionString/{gsub(/ /,"");$2=tolower($2);print $2}' "$version_php"
    esac
}

NC[version_long]="$(nc_version_ long "${NC[vphp]}")"
NC[version]="$(nc_version_ short "${NC[vphp]}")"
NC[key]="$(nc_version_ key "${NC[vphp]}")"
NC[version_string]="$(nc_version_ string "${NC[vphp]}")"
#NC[version_tag]="$(tolower "${NC[version_string]// /}")"
NC[version_tag]="$(nc_version_ tag "${NC[vphp]}")"
NC[min_version]="${LATEST_EOL[0]}"

declare -p NC > "${F[nc]}"
${B[rt]} && ${X[chown]} 0:0 "${F[nc]}"
${X[chmod]} 666 "${F[nc]}"


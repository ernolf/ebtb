__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${NC_C2J_BASHLIB:-_} && return
NC_C2J_BASHLIB=:

declare config_json

c2j_jq_filter(){
# TODO 1 -->
# as oneliner:
# ${X[jq]} -c '[.[]|.[]]|map(. as $item|{($item.key):{key:$item.key,value:$item.value}})|reduce .[]as $item({};. * $item)'
# TODO 1 <--
    ${X[jq]} -c '[.[] | .[]]
        | map(. as $item | {($item.key): {key: $item.key, value: $item.value}})
        | reduce .[]as $item({};. * $item)' 2> >(log_trace)
}

config2json(){
    [ -f "${F[nc]:=${D[vt]}/nc}" ] && . ${F[nc]}
    local cdir C2J
    [[ -d ${1:-} ]] && cdir="$1" || cdir=${NC[cd]}
# TODO 2 -->
# as oneliner:
# C2J='<?php $c=[];foreach($argv as $f){if($f!==$argv[0]){include $f;foreach($CONFIG as $k=>$v){$c[$f][]=["key"=>$k,"value"=>$v];}}};echo json_encode($c);'
# TODO 2 <--
    C2J='<?php
    $c = [];
    foreach ($argv as $f) {
        if ($f !== $argv[0]) {
            include $f;
            foreach ($CONFIG as $k => $v) {
                $c[$f][] = ["key" => $k, "value" => $v];
            }
        }
    }
    echo json_encode($c);
    ?>'
    if nonullglob "$cdir/*\.config.php"; then
        echo "$C2J" | ${X[php]} -- $cdir/config.php $cdir/*.config.php | c2j_jq_filter
    else
        echo "$C2J" | ${X[php]} -- $cdir/config.php | c2j_jq_filter
    fi
}

c2j(){
    config2json "$@" | ${X[gzip]} 2>&1 | ${X[base64]} -w 0
}

nc_configkey(){
    if [[ -z ${config_json:-} ]]; then
        config_json="$(config2json 2> >(log_trace))"
        ${X[jq]} -r ".[\"$1\"].value" <<< "$config_json" 2> >(log_trace)
    fi
}

nc_configkey_exist_(){
    [ -f "${F[nc]:=${D[vt]}/nc}" ] && . ${F[nc]}
    ${X[grep]} -qsw "$1" ${NC[cd]}/*config.php
#    return $?
}

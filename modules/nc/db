__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${NC_DB_BASHLIB:-_} && return
NC_DB_BASHLIB=:

. <(lrequire nc/nextcloud)

no_client_binary(){
    local binary database package cver
    cver="$(GRAY)(-\$$(C)ver$(GRAY))$(R)"
    case "${DB[type]}" in
        my) binary=mysql database="MySQL/MariaDB" package="$(B)mysql-client$cver or $(B)mariadb-client$cver" ;;
        pg) binary=psql database="PostgreSQL" package="$(B)postgresql-client$cver"
    esac
    xpf > $TTY; echo "$(R; format_string "This script requires the appropriate command-line client $(GRAY)(the '$(C)$binary$(GRAY)' binary) to access the $(dY)$database$(GRAY)-database$(R) to be installed. This could not be found." 3; N)" > $TTY
    echo "$(o3; R; format_string "Since the client version must match the database server and its version, this script cannot perform or offer the installation automatically." 3; N)" > $TTY
    echo "$(o3; R; format_string "Please first install the required package $package and restart this script." 3; N)" > $TTY
    exit1
}

# Database global:
declare -gA DB

database_call(){
    ${B[dc]:-_} && return 0
    local -A db
    db[html]="$1"
    for x in type:dbtype host:dbhost user:dbuser pass:dbpassword name:dbname pref:dbtableprefix; do
        db[${x%:*}]=$(nc_configkey ${x#*:})
    done

    DB[type]=${db[type]%sql} DB[pref]=${db[pref]}
    db[host]="${db[host]/#localhost*/localhost}"
    case ${DB[type]} in
        my) local my_client
            [ -n "${my_client:=${X[mysql]}}" ] || {
                [ -n "${X[mariadb]}" ] && my_client="${X[mariadb]}" || no_client_binary
            }
            local my_cnf=$(tf)
            echo -e "[client]\nhost=${db[host]}\nuser=${db[user]}\npassword=${db[pass]}">$my_cnf
            db[utf8mb4]=$(nc_configkey mysql.utf8mb4)
            if ${db[utf8mb4]:-_}; then
                db[dcs]="utf8mb4"
            else
                db[dcs]="utf8"
            fi
            DB[strg]="$my_client --defaults-extra-file=$my_cnf ${db[html]} --no-auto-rehash --default-character-set=${db[dcs]} -D ${db[name]}"
            DB[exec]="--execute="
            DB[raw]="-srN"
            DB[u2t]="FROM_UNIXTIME"
            DB[ut2ts]="DATE_FORMAT(FROM_UNIXTIME(stime), '%Y-%m-%d %H:%i')"
            DB[type_sql_query]="REVERSE(SUBSTRING_INDEX(REVERSE(principaluri), '/', 1))"
            ;;
        pg) ${B[aio]} && db_host="$(${X[docker]} inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' nextcloud-aio-database)" || {
                [ -n "${X[psql]}" ] || no_client_binary
            }
            export PGPASSWORD=${db[pass]}
            DB[strg]="${X[psql]} --user=${db[user]} --host=${db[host]} ${db[html]} -d ${db[name]}"
            DB[exec]="--command="
            DB[raw]="-At"
            DB[u2t]="TO_TIMESTAMP"
            DB[ut2ts]="TO_CHAR(TIMESTAMP 'epoch' + stime * INTERVAL '1 second', 'YYYY-MM-DD HH24:MI')"
# TODO 1 -->
#            DB[ut2ts]=$(format "TO_CHAR(TIMESTAMP 'epoch' + stime * INTERVAL '1 second', 'YYYY-MM-DD HH24:MI')")
# TODO <-- 1
            DB[type_sql_query]="REVERSE(SUBSTRING(REVERSE(principaluri) FROM 1 FOR POSITION('/' IN REVERSE(principaluri)) - 1))"
            ;;
         *) echo "$(Pbg) * Only mysql or pgsql as database, ${db[type]} is not (yet) supported by this script $(N)"
            exit 0
    esac
    if ${B[docker]}; then
        DB[strg]="export PSQL_HISTORY=\$PGDATA/.psql_history; psql -U ${db[user]} ${db[html]} -d ${db[name]}"
    fi
    B[dc]=:
}

db_interactive(){
    database_call &> >(log_trace)
    cursor_ show
    if ${B[docker]}; then
        aio_wrapper -it database "${DB[strg]}"
    else
        ${DB[strg]}
    fi
}

db_raw_interactive(){
    database_call &> >(log_trace)
    cursor_ show
    if ${B[docker]}; then
        aio_wrapper -it database "${DB[strg]} ${DB[raw]}"
    else
        ${DB[strg]} ${DB[raw]}
    fi
}

db_exec_(){
    database_call &> >(log_trace)
    local query="$*"
    if ${B[docker]}; then
        aio_wrapper database "${DB[strg]} ${DB[exec]}\"$query\""
    else
        ${DB[strg]} ${DB[exec]}"$query"
    fi
}

db_raw_exec_(){
    database_call &> >(log_trace)
    local query="$*"
    if ${B[docker]}; then
        aio_wrapper database "${DB[strg]} ${DB[raw]} ${DB[exec]}\"$query\""
    else
        ${DB[strg]} ${DB[raw]} ${DB[exec]}"$query"
    fi
}

is_app_enabled(){
    if [ "$(db_raw_exec_ "SELECT configvalue FROM ${DB[pref]}appconfig WHERE appid = '$1' AND configkey = 'enabled'")" = yes ]; then
        return 0
    else
        return 1
    fi
}

# returns true or false
user_exists(){
    database_call &> >(log_trace)
    local user="$1" query
    query="SELECT CASE WHEN EXISTS (SELECT 1 FROM ${DB[pref]}users WHERE uid_lower = LOWER('$user')) THEN 'true' ELSE 'false' END"
    db_raw_exec_ "$query"
}

# returns uid in corrected case
check_username_case(){
    database_call &> >(log_trace)
    local user="$1" query
    query="SELECT CASE WHEN EXISTS (SELECT 1 FROM ${DB[pref]}users WHERE uid_lower = LOWER('$user')) THEN (SELECT uid FROM ${DB[pref]}users WHERE uid_lower = LOWER('$user')) END"
    db_raw_exec_ "$query"
}

# returnns true if user disabled, else false
user_disabled(){
    database_call &> >(log_trace)
    local user="$1" query
    query="SELECT CASE WHEN (SELECT configvalue FROM ${DB[pref]}preferences WHERE userid = '$user' AND appid = 'core' AND configkey = 'enabled') = 'false' THEN 'true' ELSE 'false' END"
    db_raw_exec_ "$query"
}

__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${NC_OCC_BASHLIB:-_} && return
NC_OCC_BASHLIB=:

. <(lrequire php/version)
. <(require nc/aio)
. <(require nc/c2j)
. <(require nc/nextcloud)

[ -f "${F[nc]:=${D[vt]}/nc}" ] && . ${F[nc]}

# occ
if ${B[aio]}; then
    occ(){ docker exec --user www-data -i nextcloud-aio-nextcloud php occ $@; }
else
    # detect, if apc is required for cli
    declare phpcli
    if [ "$(nc_configkey memcache.local)" = '\OC\Memcache\APCu' ]; then
        (( $(${X[php$php_version]} -r 'echo ini_get("apc.enable_cli") ?: 0;') )) || phpcli="${X[php$php_version]} --define apc.enable_cli=1"
    else
        phpcli="${X[php$php_version]}"
    fi
    mh "nc/occ: \"nc_configkey memcache.local\" = '$(nc_configkey memcache.local 2>&1)'"
    mh "nc/occ: \"grep '^apc.enable_cli => On => On$' \$(php$php_version -i)\" = '$(${X[grep]} -i '^apc.enable_cli => On => On$'< <(${X[php$php_version]} -i) 2>&1)'"
    mh "nc/occ: phpcli = $phpcli"
    # the occ command call is saved under occ, adapted to the user and environment
    occ(){ $phpcli -f ${NC[d]}/console.php "$@"; }
    
    if ${B[rt]}; then
        occ(){ ${X[sudo]} -u ${NC[u]} $phpcli -f ${NC[d]}/console.php "$@"; }
    else
        [[ "${I[un]}" == "${NC[u]}" ]] || su_do "u=NC_USER"
    fi
fi

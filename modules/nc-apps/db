__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${DB_BASHLIB:-_} && return
DB_BASHLIB=:

# TODO 0 -->
. <(lrequire spinner)
. <(lrequire nc/nextcloud)
. <(lrequire nc-apps/github_api)
# TODO <-- 0
# used (globaly) by database:
B[database_created]=_

declare runtime_etag db
runtime_etag="${T[rte]}.000000"
D[apps]="${D[vt]}/nc-apps-data"
db="${D[apps]}/apps.db"

[ -d "${D[apps]}" ] && q0 chrf "${D[apps]}" "${NC[u]}"

q0 declare -p db_sleep || declare -r db_sleep=0.1
q0 declare -p db_max_attempts || declare -ri db_max_attempts=10

jsontf(){
    local t
    t="$(${X[mktemp]} -p ${D[apps]} -t json_data_XXXXXXXXXXXX)"
    ${X[chown]} "${NC[u]}":"${NC[u]}" "$t"
    ${X[chmod]} 666 "$t"
    echo "$t"
}

delete_db(){
    cleanup "${D[apps]}"
}

rebuild_db(){
    delete_db
    B[database_created]=_
    echo "database and json object files deleted"
    anykey
}

# initialise the SQLite-database-file, in case it does not exist
init_db(){
    [ -d "${D[apps]}" ] && q0 chrf "${D[apps]}" "${NC[u]}" || {
        q0 ${X[mkdir]} -m 777 "${D[apps]}"
        q0 ${X[chown]} "${NC[u]}":"${NC[u]}" "${D[apps]}"
    }
    ${X[sqlite3]} "$db" <<SQL && { ${X[chown]} "${NC[u]}":"${NC[u]}" "$db"; ${X[chmod]} 666 "$db"; }
    CREATE TABLE IF NOT EXISTS versions (platform TEXT PRIMARY KEY, major INTEGER, minor INTEGER, version TEXT, versionstring TEXT, tag TEXT, meta TEXT);
    CREATE TABLE IF NOT EXISTS shipped (platform TEXT PRIMARY KEY, json_data BLOB);
    CREATE TABLE IF NOT EXISTS categories (etag TEXT, lang TEXT, json_data TEXT);
    CREATE TABLE IF NOT EXISTS app_ids (section TEXT PRIMARY KEY, etag TEXT, ids BLOB);
    CREATE TABLE IF NOT EXISTS app_lists (section TEXT PRIMARY KEY, etag TEXT, json_data TEXT);
    CREATE TABLE IF NOT EXISTS apps (platform TEXT PRIMARY KEY, etag TEXT, json_data_file TEXT);
    CREATE TABLE IF NOT EXISTS filtered_apps (id INTEGER PRIMARY KEY AUTOINCREMENT, platform TEXT, lang TEXT, etag TEXT, json_data_file TEXT, UNIQUE(platform, lang));
SQL
}
# function to read the database
r_db(){
    local -i db_attempts
    db_attempts="$db_max_attempts"
    while ((db_attempts)); do
        ((db_attempts--))
        q2 ${X[sqlite3]} "$db" "$1" && break || ${X[sleep]} "$db_sleep"
    done
}

# function to write in the database
w_db(){
    local table arg fields
    local -i db_attempts
    local -a values
    local table="$1"
    shift
    for arg in "$@"; do
        values+=(\'$arg\')
    done
    fields="$(r_db "PRAGMA table_info($table);" | ${X[gawk]} -F\| '{print $2}' | ${X[paste]} -sd, - | ${X[sed]} 's/id,//')"
    db_attempts=$db_max_attempts
    while ((db_attempts)); do
        ((db_attempts--))
        q2 ${X[sqlite3]} "$db" <<SQL && break || ${X[sleep]} "$db_sleep"
        BEGIN;
        INSERT OR REPLACE INTO $table ($fields)
        VALUES ($(IFS=,;echo "${values[*]}"));
        COMMIT;
SQL
    done
}

# function to write file2blob into the database
w_f2b_db(){
    local table arg fields
    local -i db_attempts
    local -a values
    table="$1"
    shift
    for arg in "$@"; do
        [ -s "$arg" ] && arg=$(file2blob $arg)
        values+=(\'$arg\')
    done
    fields="$(r_db "PRAGMA table_info($table);" | ${X[gawk]} -F\| '{print $2}' | ${X[paste]} -sd, -)"
    db_attempts=$db_max_attempts
    while ((db_attempts)); do
        ((db_attempts--))
        q2 ${X[sqlite3]} "$db" <<SQL && break || ${X[sleep]} "$db_sleep"
        BEGIN;
        INSERT OR REPLACE INTO $table ($fields)
        VALUES ($(IFS=,;echo "${values[*]}"));
        COMMIT;
SQL
    done
}

create_database(){
    local -l latest
    local meta version_php version versionstring major minor item

    write_local_ids(){
        local local_applist="$(occ app:list --output=json)"
        w_db 'app_lists' 'local' "$runtime_etag" "$local_applist" & local -i job_id=$!
        local local_ids="$(echo "$local_applist" | ${X[jq]} -r '.enabled + .disabled|keys_unsorted[]' | ${X[base64]} -w 0)"
        w_db 'app_ids' 'local' "$runtime_etag" "$local_ids"
        wait "$job_id"
    }

    write_appstore_ids(){
        local platform="$1"
        appstore "platform=$platform" 'ids' 'map(.id)|.[]'
    }

    database_created(){
        ${X[sqlite3]} "$db" "CREATE TABLE IF NOT EXISTS database_created (runtime_etag TEXT PRIMARY KEY);"
    }

# TODO 1 -->
#TODO: create tests if up to date
#    [ -f "$db" ] && return 0
# TODO <-- 1
    spinner GRAY " . . . . . . . . . . . . . . .  create  database  . . . . . . . . . . . . . . ." &
    init_db

    if ${B[bgjobs]}; then
        write_appstore_ids 'all' & local job_ids="$!"
        write_local_ids & job_ids="$job_ids $!"
    else
        write_appstore_ids 'all'
        write_local_ids
    fi

    for latest in $(list_latest) master; do
        meta="stable"

# TODO 2 -->
# TODO Possible fix for wrong github labels:
#    case $latest in
#        v28.0.0rc1) version="28.0.0.7" versionstring="28.0.0 RC1";;
#        *)
# TODO <-- 2
        version_php="$(tf)"
        ${X[curl]} -so "$version_php" "${NC[github_raw]}/server/$latest/version.php"
        version="$(nc_version_ short $version_php)"
        versionstring="$(nc_version_ string $version_php)"
# TODO 3 -->
#    esac
# TODO <-- 3

        local -a parts=(${version//./ })
        major="${parts[0]}" minor="${parts[1]}"
        if [[ "$latest" == *a* || "$latest" == *rc* ]]; then
            meta="prerelease"
        fi
        for item in "${LATEST_EOL[@]}"; do
            if [ "$item" = "$version" ]; then
                meta=eol
                break
            fi
        done

        if ${B[trace]:-_}; then
            echo "==TRACE=start=" >$TTY
            print_stack_trace >$TTY
            echo -n "global bool values  -" >$TTY
            local iter
            for iter in ${!B[@]}; do echo -n " $iter=${B[$iter]}" >$TTY; done; echo >$TTY
            unset iter
            echo "latest              - $latest" >$TTY
            echo "version             - $version" >$TTY
            echo "versionstring       - $versionstring" >$TTY
            echo "meta                - $meta" >$TTY
            echo -e "==TRACE=end===\n" >$TTY
        fi

        if ${B[bgjobs]}; then
            write_appstore_ids "$version" & job_ids="$job_ids $!"
            w_db versions "$version" "$major" "$minor" "$version" "$versionstring" "$latest" "$meta" & job_ids="$job_ids $!"
            w_db shipped "$version" "$(${X[curl]} -s "${NC[github_raw]}/server/$latest/core/shipped.json" | ${X[jq]} -c '.' | ${X[base64]} -w 0)" & job_ids="$job_ids $!"
        else
            write_appstore_ids "$version"
            w_db versions "$version" "$major" "$minor" "$version" "$versionstring" "$latest" "$meta"
            w_db shipped "$version" "$(${X[curl]} -s "${NC[github_raw]}/server/$latest/core/shipped.json" | ${X[jq]} -c '.' | ${X[base64]} -w 0)"
        fi
    done
    database_created && w_db database_created $runtime_etag && B[database_created]=:
    if ${B[bgjobs]}; then
        wait $job_ids
        kill_spinner_te0
        if ${B[pager]}; then
            echo "  database   created"
            line '=' N 80
        fi
    fi
}

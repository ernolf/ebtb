__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${LIST_BASHLIB:-_} && return
LIST_BASHLIB=:

. <(lrequire nc-apps/github_api)
. <(lrequire nc-apps/db)


V[appcount]=0
list(){
    local id var
    id="$1"
    shift
    # declare and preset local bools
    local -a bools
    bools=(md supp unsupp is_shipped inappstore use_json_all)
    local -A bool
    for var in "${bools[@]}"; do bool[$var]=_; done #; unset -v bools
    # overwrite bools with parameter values
# TODO 5 -->
#    for var in "$@"; do bool[${var%=*}]=${var#*=}; done #; unset -v var
# TODO <-- 5
    for var in "$@"; do bool[$(varname "$var")]=$(varval "$var"); done #; unset -v var
    # app meta data
    local info_xml apps_path tag name summary categories version userDocs adminDocs developerDocs repo issueTracker website created lastModified databases phpExtensions phpMinIntSize phpMin phpMax NCmin NCmax
    local -a types apps_paths
    # app belongs to section (either "enabled", "disabled", "store" or "na")
    local section="$(get_applist_section_ $id)"
    # nextcloud version used for database queries must exist
    local query_version
    (( $(v2i "${NC[version]}") > $(v2i "${NC[master]}") )) && query_version="${NC[master]}" || query_version="${NC[version]}"
    # eather a="shipped and alwaysEnabled", d="shipped and defaultEnabled", s="shipped"
    # if a, d or s, set bool[is_shipped]=:

    if ${B[trace]:-_}; then
        echo "==TRACE=start=" >$TTY
        print_stack_trace >$TTY
        if q2 declare -p bool | ${X[grep]} -qs '^declare -A'; then
            local iter
            echo -n "local bool values   -" >$TTY
            for iter in ${!bool[@]}; do echo -n " $iter=${bool[$iter]}" >$TTY; done; echo >$TTY
            unset iter
        fi
        echo "app_id              - $id" >$TTY
        echo "section             - $section" >$TTY
        echo "NC[version]         - ${NC[version]}" >$TTY
        echo "NC[key]             - ${NC[key]}" >$TTY
        echo -e "==TRACE=end===\n" >$TTY
    fi

    local shipped
    if shipped="$(is_shipped_ "$id")"; then
        bool[is_shipped]=:
    else
        local platform app_json
        for platform in $(r_db "SELECT platform FROM filtered_apps WHERE platform <= '$query_version' AND platform >= '${NC[min_version]}' ORDER BY platform DESC;"); do
            if $(q2 ${X[jq]} -r --arg id "$id" 'any(.[];.id==$id)' "${filtered_appstore_json_[$platform]}"); then
                bool[inappstore]=:
                app_json="$(${X[jq]} --arg id "$id" '.[]|select(.id==$id)' "${filtered_appstore_json_[$platform]}")"
                break
            fi
        done

        if ( ${bool[use_json_all]} && ! ${bool[inappstore]} && $(q2 ${X[jq]} -r --arg id "$id" 'any(.[];.id==$id)' "${filtered_appstore_json_[all]}") ); then
            bool[inappstore]=:
            app_json="$(${X[jq]} --arg id "$id" '.[]|select(.id==$id)' "${filtered_appstore_json_[all]}")"
        fi

        if ${bool[inappstore]}; then
            # eval json values into sh vars
            eval "$(echo "$app_json" | ${X[jq]} -r 'keys[] as $key | "\($key)=\(.[$key] | @sh)"')"
            (( $(v2i ${NC[version]%.*}) != $(v2i ${NC[key]}) )) && section=store
        fi
    fi

    if ${B[trace]:-_}; then
        echo "==TRACE=start=" >$TTY
        print_funcname >$TTY
        if q2 declare -p bool | ${X[grep]} -qs '^declare -A'; then
            local iter
            echo -n "local bool values   -" >$TTY
            for iter in ${!bool[@]}; do echo -n " $iter=${bool[$iter]}" >$TTY; done; echo >$TTY
            unset iter
        fi
        echo "app_id              - $id" >$TTY
        echo "section             - $section" >$TTY
        echo "shipped             - $shipped" >$TTY
        echo "v2i NC[version]     - $(v2i ${NC[version]%.*})" >$TTY
        echo "v2i NC[key]         - $(v2i ${NC[key]})" >$TTY
        echo -e "==TRACE=end===\n" >$TTY
    fi

    case "$section" in
        enabled|disabled|na)
            mapfile -t apps_paths < <(nc_configkey apps_paths | ${X[jq]} -r 'if . == null then "apps" else .[] | .path | split("/")[-1] end')
            for apps_path in ${apps_paths[@]}; do
                [ -f "${NC[d]}/$apps_path/$id/appinfo/info.xml" ] && info_xml="${NC[d]}/$apps_path/$id/appinfo/info.xml"
            done
            if ${bool[is_shipped]} && (( $(v2i ${NC[version]%.*}) != $(v2i ${NC[key]}) )); then
                tag=$(r_db "SELECT tag FROM versions WHERE platform == '$query_version';")
                local rawURLserver="${NC[github_raw]}/server/$tag/apps/$id/appinfo/info.xml"
                local rawURLapp="${NC[github_raw]}/$id/$tag/appinfo/info.xml"
                local github_info_xml="$(tf)"
                if (( $(c -sD NULL -w %{http_code} -A $MS-${M[e]} -o $github_info_xml $rawURLserver) == 200 )); then
                    info_xml=$github_info_xml
                elif (( $(c -sD NULL -w %{http_code} -A $MS-${M[e]} -o $github_info_xml $rawURLapp) == 200 )); then
                    info_xml=$github_info_xml
                fi #; unset -v tag rawURLserver rawURLapp
            fi
            if [ ! -f "$info_xml" ]; then
                if [ "$command" = "ids" -o "$command" = "name" ]; then
# TODO 1 -->
            ${B[debug]} &&  #  echo "Unsupported App: $id";line '-' GRAY a
# TODO <-- 1
                   return
                else
                    echo "$(Pbg)  Database too old.  $(N)"
                    delete_db
                    exec $CMA
                fi
            fi
            name=$(${X[xmls]} -v "(//info/name)" "$info_xml" | ${X[sed]} '2,$d')
            summary=$(${X[xmls]} -v "//info/summary[@lang='$lang']" "$info_xml" | ${X[sed]} '2,$d')
            [ -n "$summary" ] || summary=$(${X[xmls]} -v "//info/summary[@lang='en' or not(@lang)]" "$info_xml" | ${X[sed]} '2,$d')
            categories="$(${X[xmls]} -v "(//info/category)" "$info_xml" | ${X[tr]} '\n' ' ')"
            version=$(${X[xmls]} -v "//info/version" "$info_xml" | ${X[sed]} '2,$d')
            userDocs=$(${X[xmls]} -v "//info/documentation/user" "$info_xml" | ${X[sed]} '2,$d')
            adminDocs=$(${X[xmls]} -v "//info/documentation/admin" "$info_xml" | ${X[sed]} '2,$d')
            developerDocs=$(${X[xmls]} -v "//info/documentation/developer" "$info_xml" | ${X[sed]} '2,$d')
            repo=$(${X[xmls]} -v "//info/repository" "$info_xml" | ${X[sed]} '2,$d;s|.git$||1')
            issueTracker=$(${X[xmls]} -v "//info/bugs" "$info_xml" | ${X[sed]} '2,$d')
            website=$(${X[xmls]} -v "//info/website" "$info_xml" | ${X[sed]} '2,$d')
            databases=$(${X[xmls]} -m "//info/dependencies/database" -v "." -o " >= " -v "@min-version" -o ", " -n "$info_xml")
            phpExtensions=$(${X[xmls]} -m "//info/dependencies/lib" -v "." -o " >= " -v "@min-version" -o ", " -n "$info_xml")
            phpMinIntSize=$(${X[xmls]} -v "//info/dependencies/php/@min-int-size" "$info_xml" | ${X[sed]} '2,$d')
            phpMin=$(${X[xmls]} -v "//info/dependencies/php/@min-version" "$info_xml" | ${X[sed]} '2,$d')
            phpMax=$(${X[xmls]} -v "//info/dependencies/php/@max-version" "$info_xml" | ${X[sed]} '2,$d')
            NCmin=$(${X[xmls]} -v "//info/dependencies/nextcloud/@min-version" "$info_xml" | ${X[sed]} '2,$d')
            NCmax=$(${X[xmls]} -v "//info/dependencies/nextcloud/@max-version" "$info_xml" | ${X[sed]} '2,$d')
            ;;
        *)  :
    esac

    if [[ "$issueTracker" =~ github.com ]]; then
        if [[ "${issueTracker%/}" =~ /issues$ ]]; then
            [ -n "$repo" ] || repo=$(echo ${issueTracker%/} | ${X[sed]} 's|/issues$||1')
        else
            issueTracker="${issueTracker%/}/issues"
        fi
    fi
    [ -n "$repo" ] || repo=$(echo ${issueTracker%/} | ${X[sed]} 's|/issues$||1')
    (( $(v2i ${NC[version]%.*}) != $(v2i ${NC[key]}) )) && section="$(get_applist_section_ $id)"

    if [ -z "$info_xml" ]; then
        if [[ "$repo" =~ github.com ]]; then
            local url="$(${X[sed]} 's/github/raw.githubusercontent/' <<< "$repo")"
            local github_info_xml=$(tf)
            for tag in "$version" "v$version" master main; do
                if (( $(c -sD NULL -w %{http_code} -A $MS-${M[e]} -o $github_info_xml $url/$tag/appinfo/info.xml) == 200 )); then
                    info_xml=$github_info_xml
                    break
                fi
            done
        fi
    fi
    [ -z "$info_xml" ] || mapfile -t types< <(${X[xmls]} -m "//types/*" -v "name()" -n "$info_xml")

    not_restrictable_to_groups() {
        (( ${#types[@]} )) || return 1
        local type
        for type in "${types[@]}"; do
            case $type in
                filesystem|prelogin|authentication|logging|prevent_group_restriction) return 0
            esac
        done
        return 1
    }

    known_issues(){ # Fixes and known issues
        case "$id" in
            discretepdfsigner)
                website=""
                repo="https://github.com/salonikumawat28/NextCloud_DiscretePDFSigner/tree/master/discretepdfsigner"
                issueTracker="https://github.com/salonikumawat28/NextCloud_DiscretePDFSigner/issues"
                ;;
            chores)
                repo="https://git.sr.ht/~cypheon/nextcloud-chores-app"
                ;;
            *)  :
        esac
    }

  # Check the conditions for further processing
    if ${bool[supp]}; then
        if ( [ -n "$NCmax" ]  && (( ${NC[version]%%.*} > ${NCmax%%.*} )) ) ||
           ( [ -n "$NCmin" ]  && (( ${NC[version]%%.*} < ${NCmin%%.*} )) ) ||
           ( [ -n "$phpMax" ] && (( $(v2i $php_version) > $(v2i $phpMax) )) ); then
            return 0
        fi
    elif ${bool[unsupp]}; then
        if ( [ -z "$NCmax" ]  || (( ${NCmax%%.*} >= ${NC[version]%%.*} )) ) &&
           ( [ -z "$phpMax" ] || (( $(v2i $phpMax) >= $(v2i $php_version) )) ); then
            return 0
        fi
    fi

    if ( [ -n "$NCmax" ] && (( ${NCmax%%.*} < ${NC[min_version]%%.*} )) ); then
        return 0
    fi

    known_issues
    ((V[appcount]++))
    kill_spinner

    if ${bool[md]}; then
        echo -e "| | |\n| - | - |"
        in="|"
        mid="$(N)|"
    elif [[ " ${availupd[@]%%#*} " =~ " $id " ]]; then
        in="$(P)>    $(GRAY)"
# TODO 2 -->
#        mid="$(o 21)" # <- does not work in less -R
# TODO <-- 2
        mid=""
    else
        in="  $(GRAY)"
# TODO 3 -->
#        mid="$(o 20)" # <- does not work in less -R
# TODO <-- 3
        mid="  "
    fi

    # App-ID
# TODO 4 -->
    if ! ${bool[md]}; then
        local counter="$(printf "%7d" ${V[appcount]})"
    fi
    echo "${in}App-Id${counter:-}$(Yi)$mid$(${bool[md]} || es 3)$id"
# TODO <-- 4
    echo "${in}App-Id$(Yi)$mid$(${bool[md]} || es 10)$id"

    # Name
    echo "${in}App-Name$(Bi)$mid$(${bool[md]} || es 8)$name"

    # Summary
    if [ -n "$summary" ]; then
        echo "${in}Summary$(C)$mid$(${bool[md]} || es 9)$(htmldecode "$summary")"
    fi

    # not restrictable to groups
    if not_restrictable_to_groups; then
        echo "$in $(O)$mid$(${bool[md]} || es 15)App can not be restricted to groups"
# TODO 5 -->
#    else
#        echo "$in $(G)$mid$(${bool[md]} || es 15)App can be restricted to groups"
# TODO <-- 5
    fi

    # Categories
    if [ -n "$categories" ]; then
        echo "${in}Categories$(Y)$mid$(${bool[md]} || es 6)$categories"
    fi

    # Version
    if ( ! ${bool[md]} && [[ " ${availupd[@]%%#*} " =~ " $id " ]] ); then
        printf "$(Pbg)==> $(N) $(GRAY)App-Version$(B)$mid$(${bool[md]} || es 5)$version  $(Obg) -->  "
        echo "new version available: $(a_fld availupd '#' $id 2)  <-- $(N)"
    else
        echo "${in}App-Version$(N)$mid$(${bool[md]} || es 5)$version"
    fi

    # Website
    if [[ -n "$website" && "$(tlwr ${website%/})" != "$(tlwr ${repo%/})" ]]; then
        echo "${in}Website$(W)$mid$(${bool[md]} || es 9)$website"
    fi

    # Repo
    if [ -n "$repo" ]; then
        echo "${in}Repository$(W)$mid$(${bool[md]} || es 6)$repo"
    fi

    # Issues
    if [ -n "$issueTracker" ]; then
        echo "${in}Issue-Tracker$(W)$mid$(${bool[md]} || es 3)$issueTracker"
    fi

    # User manual
    if [[ -n "$userDocs" && "$(tlwr ${repo%/})" != "$(tlwr ${userDocs%/})" ]]; then
        echo "${in}User-Doc.$(W)$mid$(${bool[md]} || es 7)$userDocs"
    fi

    # Admin manual
    if [ -n "$adminDocs" ]; then
        [[ "$(tlwr ${repo%/})"     = "$(tlwr ${adminDocs%/})" ||
           "$(tlwr ${userDocs%/})" = "$(tlwr ${adminDocs%/})" ]] || echo "${in}Admin-Doc.$(W)$mid$(${bool[md]} || es 6)$adminDocs"
    fi

    # Developer manual
    if [ -n "$developerDocs" ]; then
        [[ "$(tlwr ${repo%/})"      = "$(tlwr ${developerDocs%/})" ||
           "$(tlwr ${userDocs%/})"  = "$(tlwr ${developerDocs%/})" ||
           "$(tlwr ${adminDocs%/})" = "$(tlwr ${developerDocs%/})" ]] || echo "${in}Developer-Doc.$(W)$mid$(${bool[md]} || es 2)$developerDocs"
    fi

    # PHP min / max
    if ! [[ -z "$phpMin" && -z "$phpMax" ]]; then
        if ( ! ${bool[md]} && [ -n "$phpMax" ] && (( $(v2i $php_version) > $(v2i $phpMax) )) ); then
            phpMax="$(blinkR)$phpMax$(N)"
        elif ( ! ${bool[md]} && [ -z "$phpMax" ] || (( $(v2i $php_version) <= $(v2i $phpMax) )) ); then
            phpMax="$(lG)$phpMax$(N)"
        fi
        echo "${in}PHP min/max$(N)$mid$(${bool[md]} || es 5)$phpMin / $phpMax"
    fi

    # PHP intsize
    if [ -n "$phpMinIntSize" ]; then
        echo "${in}PHP min-intsize$(N)$mid$(${bool[md]} || es 1)$phpMinIntSize"
    fi

    # PHP extensions
    if [ -n "$phpExtensions" ]; then
        phpExtensions="$(htmldecode $phpExtensions | ${X[sed]} 's/\s*>=\s*,/,/g;s/,\s*$//1')"
        echo "${in}php-Extensions$(N)$mid$(${bool[md]} || es 2)$phpExtensions"
    fi

    # Databases
    if [ -n "$databases" ]; then
        databases=$(htmldecode $databases | ${X[sed]} 's/\s*>=\s*,/,/g;s/,\s*$//1')
        echo "${in}Databases$(N)$mid$(${bool[md]} || es 7)$databases"
    fi

    # Nextcloud min / max
    if ( ! ${bool[md]} && [ -n "$NCmax" ] && (( ${NC[version]%%.*} > ${NCmax%%.*} )) ); then
        NCmax="$(blinkR)$NCmax$(N)"
    elif ( ! ${bool[md]} && [ -n "$NCmax" ] && (( ${NC[version]%%.*} <= ${NCmax%%.*} )) ); then
        NCmax="$(lG)$NCmax$(N)"
    fi
    echo "${in}NC min/max$(N)$mid$(${bool[md]} || es 6)$NCmin / $NCmax"

    # shipped or appstore
    if ${bool[is_shipped]}; then
        case "$shipped" in
            a) printf "$in $(dG)$mid$(${bool[md]} || es 15)Shipped (included), always enabled App" ;;
            d) printf "$in $(G)$mid$(${bool[md]} || es 15)Shipped (included), default enabled App" ;;
            s) printf "$in $(G)$mid$(${bool[md]} || es 15)Shipped (included) App"
        esac
        ${bool[md]} && f
    else
        printf "$in $(lG)$mid$(${bool[md]} || es 15)Not-shipped (not included) App"
        ${bool[md]} && echo " available in appstore"
    fi

    # Section
    if ! ${bool[md]}; then
        case "$section" in
          enabled) echo ", $(G)enabled"               ;;
         disabled) echo ", $(Y)disabled"              ;;
            store) echo ", $(Y)available in appstore" ;;
               na) echo ", $(Y)not installed, unknown origin"
        esac
    fi

    # Appstore link
    printf "${in}Appstore$(W)$mid$(${bool[md]} || es 8)"
    if ${bool[inappstore]}; then
        echo "https://apps.nextcloud.com/apps/$id"
    else
        echo "This app is currently not published in the Nextcloud app store."
    fi

    # Creation date
    if [ -n "$created" ]; then
        echo "${in}Created$(W)$mid$(${bool[md]} || es 9)$created"
    fi

    # Last modified
    if [ -n "$lastModified" ]; then
        echo "${in}Last modified$(W)$mid$(${bool[md]} || es 3)$lastModified"
    fi

    line '-' GRAY a
    return 0
}

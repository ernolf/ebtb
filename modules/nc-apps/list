__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${LIST_BASHLIB:-false} && return 0 || {
    LIST_BASHLIB=:

    . <(require ansi)
    . <(require xml)
    . <(require $sin/github_api)
    . <(require $sin/db)

    declare -i count=0
    list(){
        # declare and preset id and bools
        local id=$1 md=false supp=false unsupp=false is_shipped=false inappstore=false
        # shift $1=id out from parameter array
        shift
        # overwrite bools with parameter values
        local var; for var in "$@"; do local $var; done #; unset -v var
        # app meta data
        local name summary categories version userDocs adminDocs developerDocs repo issueTracker website created lastModified databases phpExtensions phpMinIntSize phpMin phpMax NCmin NCmax
        # app belongs to section (either "enabled", "disabled", "store" or "na")
        local section="$(get_applist_section_ $id)"
        # nextcloud version used for database queries must exist
        local query_version=$nc_version
        (( $(v2i $nc_version) > $(v2i $nc_master) )) && query_version="$nc_master"
        # eather a="shipped and alwaysEnabled", d="shipped and defaultEnabled", s="shipped"
        # if a, d or s, set is_shipped=true
        local shipped
        if shipped=$(is_shipped_ "$id"); then
            is_shipped=true
        else
            local platform app_json
            for platform in $(r_db "SELECT platform FROM filtered_apps WHERE platform <= '$query_version' AND platform >= '$nc_min_version' ORDER BY platform DESC;"); do
                if $(jq -r --arg id "$id" 'any(.[];.id==$id)' "${filtered_appstore_json_[$platform]}" 2>/dev/null); then
                    inappstore=true
                    app_json="$(jq --arg id "$id" '.[]|select(.id==$id)' "${filtered_appstore_json_[$platform]}")"
                    break
                fi
            done
# TODO
            if ( $use_json_all && ! $inappstore &&
            $(jq -r --arg id "$id" 'any(.[];.id==$id)' "${filtered_appstore_json_[all]}" 2>/dev/null) ); then
                inappstore=true
                app_json="$(jq --arg id "$id" '.[]|select(.id==$id)' "${filtered_appstore_json_[all]}")"
            fi

            if $inappstore; then
                # eval json values into sh vars
                eval "$(echo "$app_json" | jq -r 'keys[] as $key | "\($key)=\(.[$key] | @sh)"')"
                (( $(v2i ${nc_version%.*}) != $(v2i $nc_key) )) && section=store
            fi
        fi
$debug&&{ echo -e "app_id = $id\ninsappstore = $inappstore"; anykey; }
        case $section in
            enabled|disabled|na)
                local info_xml="$NC_DIR/apps/$id/appinfo/info.xml"
                if $is_shipped && (( $(v2i ${nc_version%.*}) != $(v2i $nc_key) )); then
                    local tag=$(r_db "SELECT tag FROM versions WHERE platform == '$query_version';")
                    local rawURLserver=$github_raw/server/$tag/apps/$id/appinfo/info.xml
                    local rawURLapp=$github_raw/$id/$tag/appinfo/info.xml
                    local github_info_xml=$(tf)
                    if (( $(hc sD $bm-$epoch -o $github_info_xml $rawURLserver) == 200 )); then
                        info_xml=$github_info_xml
                    elif (( $(hc sD $bm-$epoch -o $github_info_xml $rawURLapp) == 200 )); then
                        info_xml=$github_info_xml
                    fi #; unset -v tag rawURLserver rawURLapp
                fi
                if [ ! -f "$info_xml" ]; then
                    if [ "$command" = "ids" -o "$command" = "name" ]; then
$debug&& #  echo "Unsupported App: $id";line '-' GRAY 80
                       return
                    else
                        echo "$(Pbg)  Database too old.  $(N)"
                        delete_db
                        $me "json=$my_json" $my_args
                        exit 0
                    fi
                fi
                name=$(xmls -v "(//info/name)" "$info_xml" | sed '2,$d')
                summary=$(xmls -v "//info/summary[@lang='$lang']" "$info_xml" | sed '2,$d')
                [ -n "$summary" ] || summary=$(xmls -v "//info/summary[@lang='en' or not(@lang)]" "$info_xml" | sed '2,$d')
                categories="$(xmls -v "(//info/category)" "$info_xml" | tr '\n' ' ')"
                version=$(xmls -v "//info/version" "$info_xml" | sed '2,$d')
                userDocs=$(xmls -v "//info/documentation/user" "$info_xml" | sed '2,$d')
                adminDocs=$(xmls -v "//info/documentation/admin" "$info_xml" | sed '2,$d')
                developerDocs=$(xmls -v "//info/documentation/developer" "$info_xml" | sed '2,$d')
                repo=$(xmls -v "//info/repository" "$info_xml" | sed '2,$d;s|.git$||1')
                issueTracker=$(xmls -v "//info/bugs" "$info_xml" | sed '2,$d')
                website=$(xmls -v "//info/website" "$info_xml" | sed '2,$d')
                databases=$(xmls -m "//info/dependencies/database" -v "." -o " >= " -v "@min-version" -o ", " -n "$info_xml")
                phpExtensions=$(xmls -m "//info/dependencies/lib" -v "." -o " >= " -v "@min-version" -o ", " -n "$info_xml")
                phpMinIntSize=$(xmls -v "//info/dependencies/php/@min-int-size" "$info_xml" | sed '2,$d')
                phpMin=$(xmls -v "//info/dependencies/php/@min-version" "$info_xml" | sed '2,$d')
                phpMax=$(xmls -v "//info/dependencies/php/@max-version" "$info_xml" | sed '2,$d')
                NCmin=$(xmls -v "//info/dependencies/nextcloud/@min-version" "$info_xml" | sed '2,$d')
                NCmax=$(xmls -v "//info/dependencies/nextcloud/@max-version" "$info_xml" | sed '2,$d')
                ;;
            *)  :
        esac

        if [[ "$issueTracker" =~ github.com ]]; then
            if [[ "${issueTracker%/}" =~ /issues$ ]]; then
                [ -n "$repo" ] || repo=$(echo ${issueTracker%/} | sed 's|/issues$||1')
            else
                issueTracker="${issueTracker%/}/issues"
            fi
        fi
        [ -n "$repo" ] || repo=$(echo ${issueTracker%/} | sed 's|/issues$||1')
        (( $(v2i ${nc_version%.*}) != $(v2i $nc_key) )) && section="$(get_applist_section_ $id)"

        known_issues(){ # Fixes and known issues
            case "$id" in
                discretepdfsigner)
                    website=""
                    repo="https://github.com/salonikumawat28/NextCloud_DiscretePDFSigner/tree/master/discretepdfsigner"
                    issueTracker="https://github.com/salonikumawat28/NextCloud_DiscretePDFSigner/issues"
                    ;;
                chores)
                    repo="https://git.sr.ht/~cypheon/nextcloud-chores-app"
                    ;;
                *)  :
            esac
        }

      # Check the conditions for further processing
        if $supp; then
            if ( [ -n "$NCmax" ]  && (( ${nc_version%%.*} > ${NCmax%%.*} )) ) ||
               ( [ -n "$NCmin" ]  && (( ${nc_version%%.*} < ${NCmin%%.*} )) ) ||
               ( [ -n "$phpMax" ] && (( $(v2i $php_version) > $(v2i $phpMax) )) ); then
                return 0
            fi
        elif $unsupp; then
            if ( [ -z "$NCmax" ]  || (( ${NCmax%%.*} >= ${nc_version%%.*} )) ) &&
               ( [ -z "$phpMax" ] || (( $(v2i $phpMax) >= $(v2i $php_version) )) ); then
                return 0
            fi
        fi

        if ( [  -n "$NCmax" ] && (( ${NCmax%%.*} < ${nc_min_version%%.*} )) ); then
            return 0
        fi

        known_issues

        if $md; then
            echo -e "| | |\n| - | - |"
            in="|"
            mid="$(N)|"
        elif [[ " ${availupd[@]%%#*} " =~ " $id " ]]; then
            in="$(P)>    $(GRAY)"
#            mid="$(o 21)" # <- does not work in less -R
            mid=""
        else
            in="  $(GRAY)"
#            mid="$(o 20)" # <- does not work in less -R
            mid="  "
        fi

        ((count++))

        # App-ID
        if ! $md; then
            local counter="$(printf "%7d" $count)"
        fi
        echo "${in}App-Id${counter:-}$(Yi)$mid$($md||es 3)$id"

        # Name
        echo "${in}App-Name$(Bi)$mid$($md||es 8)$name"

        # Summary
        if [ -n "$summary" ]; then
            echo "${in}Summary$(C)$mid$($md||es 9)$(htmldecode "$summary")"
        fi

        # Categories
        if [ -n "$categories" ]; then
            echo "${in}Categories$(Y)$mid$($md||es 6)$categories"
        fi

        # Version
        if ( ! $md && [[ " ${availupd[@]%%#*} " =~ " $id " ]] ); then
            printf "$(Pbg)==> $(N) $(GRAY)App-Version$(B)$mid$($md||es 5)$version  $(Obg) -->  "
            echo "new version available: $(a_fld availupd '#' $id 2)  <-- $(N)"
        else
            echo "${in}App-Version$(N)$mid$($md||es 5)$version"
        fi

        # Website
        if [[ -n "$website" && "$(tlwr ${website%/})" != "$(tlwr ${repo%/})" ]]; then
            echo "${in}Website$(W)$mid$($md||es 9)$website"
        fi

        # Repo
        if [ -n "$repo" ]; then
            echo "${in}Repository$(W)$mid$($md||es 6)$repo"
        fi

        # Issues
        if [ -n "$issueTracker" ]; then
            echo "${in}Issue-Tracker$(W)$mid$($md||es 3)$issueTracker"
        fi

        # User manual
        if [[ -n "$userDocs" && "$(tlwr ${repo%/})" != "$(tlwr ${userDocs%/})" ]]; then
            echo "${in}User-Doc.$(W)$mid$($md||es 7)$userDocs"
        fi

        # Admin manual
        if [ -n "$adminDocs" ]; then
            [[ "$(tlwr ${repo%/})"     = "$(tlwr ${adminDocs%/})" ||
               "$(tlwr ${userDocs%/})" = "$(tlwr ${adminDocs%/})" ]] || echo "${in}Admin-Doc.$(W)$mid$($md||es 6)$adminDocs"
        fi

        # Developer manual
        if [ -n "$developerDocs" ]; then
            [[ "$(tlwr ${repo%/})"      = "$(tlwr ${developerDocs%/})" ||
               "$(tlwr ${userDocs%/})"  = "$(tlwr ${developerDocs%/})" ||
               "$(tlwr ${adminDocs%/})" = "$(tlwr ${developerDocs%/})" ]] || echo "${in}Developer-Doc.$(W)$mid$($md||es 2)$developerDocs"
        fi

        # PHP min / max
        if ! [[ -z "$phpMin" && -z "$phpMax" ]]; then
            if ( ! $md && [ -n "$phpMax" ] && (( $(v2i $php_version) > $(v2i $phpMax) )) ); then
                phpMax="$(blinkR)$phpMax$(N)"
            elif ( ! $md && [ -z "$phpMax" ] || (( $(v2i $php_version) <= $(v2i $phpMax) )) ); then
                phpMax="$(lG)$phpMax$(N)"
            fi
            echo "${in}PHP min/max$(N)$mid$($md||es 5)$phpMin / $phpMax"
        fi

        # PHP intsize
        if [ -n "$phpMinIntSize" ]; then
            echo "${in}PHP min-intsize$(N)$mid$($md||es 1)$phpMinIntSize"
        fi

        # PHP extensions
        if [ -n "$phpExtensions" ]; then
            phpExtensions="$(htmldecode $phpExtensions | sed 's/\s*>=\s*,/,/g;s/,\s*$//1')"
            echo "${in}php-Extensions$(N)$mid$($md||es 2)$phpExtensions"
        fi

        # Databases
        if [ -n "$databases" ]; then
            databases=$(htmldecode $databases | sed 's/\s*>=\s*,/,/g;s/,\s*$//1')
            echo "${in}Databases$(N)$mid$($md||es 7)$databases"
        fi

        # Nextcloud min / max
        if ( ! $md && [ -n "$NCmax" ] && (( ${nc_version%%.*} > ${NCmax%%.*} )) ); then
            NCmax="$(blinkR)$NCmax$(N)"
        elif ( ! $md && [ -n "$NCmax" ] && (( ${nc_version%%.*} <= ${NCmax%%.*} )) ); then
            NCmax="$(lG)$NCmax$(N)"
        fi
        echo "${in}NC min/max$(N)$mid$($md||es 6)$NCmin / $NCmax"

        # shipped or appstore
        if $is_shipped; then
            case $shipped in
                a) printf "$in $(dG)$mid$($md||es 15)Shipped (included), always enabled App"
                   ;;
                d) printf "$in $(G)$mid$($md||es 15)Shipped (included), default enabled App"
                   ;;
                s) printf "$in $(G)$mid$($md||es 15)Shipped (included) App"
            esac
            $md && f
        else
            printf "$in $(lG)$mid$($md||es 15)Not-shipped (not included) App"
            $md && echo " available in appstore"
        fi

        # Section
        if ! $md; then
            case $section in
                enabled)  echo ", $(G)enabled"
                          ;;
                disabled) echo ", $(Y)disabled"
                          ;;
                store)    echo ", $(Y)available in appstore"
                          ;;
                na)       echo ", $(Y)not installed, unknown origin"
            esac
        fi

        # Appstore link
        printf "${in}Appstore$(W)$mid$($md||es 8)"
        if $inappstore; then
            echo "https://apps.nextcloud.com/apps/$id"
        else
            echo "This app is currently not published in the Nextcloud app store."
        fi

        # Creation date
        if [ -n "$created" ]; then
            echo "${in}Created$(W)$mid$($md||es 9)$created"
        fi

        # Last modified
        if [ -n "$lastModified" ]; then
            echo "${in}Last modified$(W)$mid$($md||es 3)$lastModified"
        fi

        line '-' GRAY 80
        return 0
    }

}

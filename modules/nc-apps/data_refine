__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${DATA_REFINE_BASHLIB:-_} && return
DATA_REFINE_BASHLIB=:

# TODO 0 -->
. <(lrequire spinner)
. <(lrequire nc-apps/db)
# TODO 0 <--
create_json_objects(){
    local query_version platform parts major minor item
    query_version=${NC[version]}
    if (( $(v2i ${NC[version]}) > $(v2i ${NC[master]}) )); then
        query_version="${NC[master]}"
    fi
    spinner GRAY " . . . . . . . . . .   create  and  update  json  objects   . . . . . . . . . ." &
    if ${B[bgjobs]}; then
        appstore 'platform=all' 'new' & local job_ids="$!"
    else
        appstore 'platform=all' 'new'
    fi
    for platform in $(r_db "SELECT platform FROM versions WHERE meta == 'eol';"); do
        if ! (( $(r_db "SELECT COUNT(platform) FROM filtered_apps WHERE platform == '$platform' AND lang == '$lang';") )); then
            if ${B[bgjobs]}; then
                appstore "platform=$platform" "new" & job_ids="$job_ids $!"
            else
                appstore "platform=$platform" "new"
            fi
        fi
    done
    for platform in $(r_db "SELECT platform FROM versions WHERE meta != 'eol';"); do
        ${B[bgjobs]} && {
            appstore "platform=$platform" "new" & job_ids="$job_ids $!"
        }|| appstore "platform=$platform" "new"
    done
    if ${B[bgjobs]}; then
        wait $job_ids
        kill_spinner_te0
        if ${B[pager]} && ! ${B[silent]}; then
            echo "  json  objects  created"
            line '=' N 80
        fi
    fi
}

query_apps(){
    local -A bool
    while (( $# )); do bool[${1%=*}]="${1#*=}"; shift; done
    local local_applist appstore_ids local_ids app_id appstore_json global_applist platform="${NC[version]}"
    local -a appstore_ids_not_installed
    local_applist="$(r_db "SELECT json_data FROM app_lists WHERE section == 'local';")"

    ${B[unsupported]} || ${bool[all]} && platform='all'
    appstore_ids="$(r_db "SELECT ids FROM app_ids WHERE section == 'appstore_$platform';" | ${X[base64]} -d)"

    local_ids="$(r_db "SELECT ids FROM app_ids WHERE section == 'local';" | ${X[base64]} -d)"

    # iterate through appstore_ids and filter out IDs that are not in local_ids array
    for app_id in $appstore_ids; do
        echo "$local_ids" | ${X[grep]} -qsw "$app_id" || appstore_ids_not_installed+=("$app_id")
    done

    # convert appstore_ids into JSON object format
    appstore_json=$(echo "${appstore_ids_not_installed[*]}" | ${X[jq]} -R 'split(" ")|(reduce .[] as $item ({};.[$item] = ""))')
    # merge the appstore_json object into the original local_applist
    global_applist=$(echo "$local_applist" | ${X[jq]} -c --argjson new_data "$appstore_json" '. * {store: $new_data}')
    w_db app_lists global "$runtime_etag" "$global_applist"

    return 0
}

stock_up_arrays(){
    local platform
    local -A bool tf
    read_json_data_file(){ r_db "SELECT json_data_file FROM filtered_apps WHERE platform == '$1' AND lang == '$lang'"; }
    create_json_objects
    NC[master]="$(r_db "SELECT platform FROM versions WHERE tag = 'master';")"
    while (( $# )); do bool[${1%=*}]="${1#*=}"; shift; done
    tf[availupd]="$(tf)"
    spinner GRAY " . . . . . . . . . . .  stocking  up  arrays  with  data  . . . . . . . . . . ." &
    ${B[bgjobs]} && {
        query_apps all="${bool[all]:-_}" & local job_ids="$!"
    } || query_apps all="${bool[all]:-_}"
    ${bool[filtered_appstore]:-_} && {
        declare -gA filtered_appstore_json_
        ${B[bgjobs]} && {
            query_updates ${tf[availupd]} & job_ids="$job_ids $!"
        } || query_updates ${tf[availupd]}
        for platform in $(r_db "SELECT platform FROM filtered_apps;"); do
            filtered_appstore_json_[$platform]="$(read_json_data_file $platform)"
        done
    }
    ${B[bgjobs]} && wait $job_ids
    applist_json="$(r_db "SELECT json_data FROM app_lists WHERE section == 'global';")"
    ${bool[filtered_appstore]:-_} && mapfile -t availupd < "${tf[availupd]}"
    kill_spinner_te0
    if ! ${B[silent]} && ${B[bgjobs]} && ${B[pager]}; then
        echo "  all arrays stocked up"
        line '=' N 80
    fi
}

# Get different lists of apps from JSON format
apps_(){
    case "$1" in
        enabled|disabled|store) ${X[jq]} -r '.'$1'|keys|sort[]' <<< "$applist_json";;
        local) ${X[jq]} -r '.enabled + .disabled|keys|sort[]' <<< "$applist_json"  ;;
        all) ${X[jq]} -r '.enabled + .disabled + .store|keys|sort[]' <<< "$applist_json"
    esac
}

# $1=app, $2=-q  #### D O N 'T   T O U C H   T H I S
is_shipped_(){
    local query_version shipped_json
    (( $(v2i ${NC[version]}) > $(v2i ${NC[master]}) )) && query_version="${NC[master]}" || query_version=${NC[version]}
    shipped_json="$(r_db "SELECT json_data FROM shipped WHERE platform == '$query_version';" | ${X[base64]} -d)"
    local -A bool
    [ "$2" = "-q" ] && bool[quiet]=: || bool[quiet]=_
    if $(${X[jq]} 'has("alwaysEnabled")' <<< "$shipped_json") && ${X[jq]} '.alwaysEnabled[]' <<< "$shipped_json" | ${X[grep]} -qsw "$1"; then
        ${bool[quiet]} || printf "a"
        return 0
    elif $(${X[jq]} 'has("defaultEnabled")' <<< "$shipped_json") && ${X[jq]} '.defaultEnabled[]' <<< "$shipped_json" | ${X[grep]} -qsw "$1"; then
        ${bool[quiet]} || printf "d"
        return 0
    elif ${X[jq]} '.shippedApps[]' <<< "$shipped_json" | ${X[grep]} -qsw "$1"; then
        ${bool[quiet]} || printf "s"
        return 0
    else
        return 1
    fi
}

# returns if app is either "enabled", "disabled", "store" or "na"
get_applist_section_(){
    ${X[jq]} -r --arg app "$1" 'if .enabled|has($app) then "enabled" elif .disabled|has($app) then "disabled" elif .store|has($app) then "store" else "na" end' <<< "$applist_json"
}

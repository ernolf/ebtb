__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${COMMANDS_BASHLIB:-_} && return
COMMANDS_BASHLIB=:

# TODO 0 -->
. <(lrequire spinner)
. <(lrequire php/version)
. <(lrequire nc/nextcloud)
. <(lrequire nc/logo)
. <(lrequire nc-apps/data_refine)
. <(lrequire nc-apps/list)
. <(lrequire nc-apps/app_update)
. <(lrequire nc-apps/l10n)
# TODO <-- 0
${X[mkdir]} -p ${D[li]}/nc-apps/commands.d

. <(lrequire nc-apps/commands.d/install_overwrite)
. <(lrequire nc-apps/commands.d/help)
. <(lrequire nc-apps/commands.d/filters)

search_matching_spinner(){
    ${B[pager]} || spinner GRAY " . . . . . . . . . .   searching  for  matching  apps   . . . . . . . . . . ." &
}

summary(){
    kill_spinner
    o2; echo -n "Summary: "
    if (( V[appcount] )); then
        echo "${V[appcount]} matching apps"
    else
        echo "no matching apps"
    fi
    line '-' GRAY a
    line '=' N a
}

all_apps(){
    stock_up_arrays filtered_appstore=:
    local all_endis app
    local -a local_args
    local -A bool
# TODO 1 -->
#    if ${B[trace]:-_}; then
#        echo "==TRACE=start=" >$TTY
#        print_stack_trace >$TTY
#        echo -n "global bool values  -" >$TTY
#        for x in ${!B[@]}; do echo -n " $x=${B[$x]}" >$TTY; done; echo >$TTY
#        if q2 declare -p bool | ${X[grep]} -qs '^declare -A'; then
#            echo -n "local bool values   -" >$TTY
#            for x in ${!bool[@]}; do echo -n " $x=${bool[$x]}" >$TTY; done; echo >$TTY
#        fi
#        echo "V[app_id]           - ${V[app_id]}" >$TTY
#        echo "section             - $section" >$TTY
#        echo "v2i NC[version]     - $(v2i ${NC[version]%.*})" >$TTY
#        echo "v2i NC[key]         - $(v2i ${NC[key]})" >$TTY
#        echo "==TRACE=end===" >$TTY
#    fi
#trap 'set +x;read -rp "$(printf "\033[0;31m")[DEBUG:]$(printf "\033[0;m") press Enter to proceed...";set -x' DEBUG
# TODO <-- 1
    while (( $# )); do
        case "$1" in
            shipped)
                bool[s]=:
                shift
                ;;
            not_shipped)
                bool[ns]=:
                shift
                ;;
            updatable)
                bool[up]=:
                shift
                ;;
            enabled|disabled|local|store|all)
                all_endis="$1"
                shift
                ;;
            *)  local_args+=("$1")
                shift
        esac
    done
    ( ${bool[s]:-_} || ${bool[up:-_]} ) && [[ "$all_endis" =~ all|store ]] && all_endis=local
    for app in $(apps_ "$all_endis"); do
        search_matching_spinner
        if ${bool[s]:-_}; then     # only list the shipped apps
            is_shipped_ "$app" -q && list "$app" "${local_args[@]}"
        elif ${bool[ns]:-_}; then  # only list the not shipped apps
            is_shipped_ "$app" -q || list "$app" "${local_args[@]}"
        elif ${bool[up]:-_}; then  # only list the updatable apps
            [[ " ${availupd[@]%%#*} " =~ " $app " ]] && list "$app" "${local_args[@]}"
        else # list all apps
            list "$app" "${local_args[@]}"
        fi
    done
    summary
}

shipped(){
    all_apps shipped "$@" use_json_all=${B[use_json_all]}
}

not_shipped(){
    all_apps not_shipped "$@" use_json_all=${B[use_json_all]}
}

updatable(){
    all_apps updatable "$@" use_json_all=${B[use_json_all]}
}

id(){
    stock_up_arrays filtered_appstore=: all=:
    local app
    for app in $(apps_ all); do
        search_matching_spinner
        [[ "${app,,}" =~ ${V[app_id],,} ]] && list "$app" "$@" use_json_all=:
    done
    summary
}

ids(){
    stock_up_arrays filtered_appstore=: all=:
    local app
    for app in "${app_ids[@]}"; do
        search_matching_spinner
        list "$app" "$@" use_json_all=:
    done
    summary
}

name(){
    stock_up_arrays filtered_appstore=: all=:
    build_id_name_array(){
        local app xml_f name tmp
        tmp="$1"
        shift
        appstore platform=all ".[]|select(.name|ascii_downcase|contains(\"$(tolower "$@")\"))|.id" | ${X[jq]} -r >> "$tmp"
        for app in $(apps_ all); do
            if ! ${X[grep]} -qsw "$app" "$tmp"; then
                xml_f="${NC[d]}/apps/$app/appinfo/info.xml"
                if [ -f "$xml_f" ]; then
                    name=$(${X[xmls]} -v "(//info/name)" "$xml_f" | ${X[sed]} '2,$d')
                    echo "$name" | ${X[grep]} -iqs "$*" && echo "$app" >> "$tmp"
                fi
            fi
        done
    }
    local n_tmp=$(tf)
    spinner GRAY " . . . . . . . . . .  building  'app_id_-_name'  array  . . . . . . . . . . ." &
    build_id_name_array $n_tmp "${V[app_name]}" & job_id=$!
    wait $job_id
    mapfile -t id_name_array < "$n_tmp"
    kill_spinner
    for app in "${id_name_array[@]}";do
        search_matching_spinner
        list "$app" "$@" use_json_all=:
    done
    summary
}

update(){
    stock_up_arrays filtered_appstore=:
    local -a local_args
    while (( $# )); do
        case "$1" in
            enabled|disabled|local|all)
                all_endis=$1
                shift ;;
            *)  local_args+=("$1")
                shift
        esac
    done
    for app in $(apps_ $all_endis); do
        [[ " ${availupd[@]%%#*} " =~ " $app " ]] && do_update_ $app "${local_args[@]}"
    done
}

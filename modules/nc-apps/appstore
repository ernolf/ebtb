__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${APPSTORE_BASHLIB:-_} && return
APPSTORE_BASHLIB=:

. <(lrequire nc-apps/db)

# appstore-functions:
dl_appstore_json_db(){
    local unit appstore_api platform etag platformdir appstore_url unix_etag response new_etag new_unix_etag
    local -i http_code
    unit="$1" appstore_api='https://apps.nextcloud.com/api/v1'

    # etag to unix, with check if the string is in hexadecimal format (lowercase only)
    e2u(){
        [ -z "$1" ] || {
            [[ "$1" =~ ^[0-9a-f-]+$ ]] && printf "$1" || printf "$(${X[date]} --utc --date="${1%%.*}" +"%s").$(printf "${1#*.}" | ${X[sed]} 's/+.*//')"
        }
    }
    # unix to etag, with check if the string is in hexadecimal format (lowercase only)
    u2e(){
        [ -z "$1" ] || {
            [[ "$1" =~ ^[0-9a-f-]+$ ]] && echo "$1" || ${X[date]} --utc --date="@$1" +"%Y-%m-%d %H:%M:%S".${1#*.}+00:00
        }
    }

    if [ "$unit" = "apps" ]; then
        platform="$2"
        shift
        case "$platform" in
            all) :
                 ;;
              *) platformdir="/platform/$platform"
        esac
    fi
    appstore_url="$appstore_api$platformdir"
    if [ "$unit" = 'apps' ]; then
        unix_etag="$(r_db "SELECT etag FROM apps WHERE platform = '$platform';")" # try to fetch ETag from database
        if [ "$platform" != "all" ]; then
            if [ 0$(v2i "$platform") -le 0$(v2i "${LATEST_EOL[${#LATEST_EOL[@]}-1]}") ]; then
                if (( $(r_db "SELECT COUNT(*) FROM apps WHERE platform == '$platform';") )); then
                    echo reuse:$unix_etag

                    if ${B[trace]:-_}; then
                        echo "==TRACE=start=" >$TTY
                        print_stack_trace >$TTY
                        echo "platform            - $platform" >$TTY
                        echo "unix_etag           - $unix_etag" >$TTY
                        echo "response            - reuse:$unix_etag" >$TTY
                        echo -e "==TRACE=end===\n" >$TTY
                    fi

                    return 0
                fi
            fi
        fi
    elif (( $(r_db "SELECT COUNT(*) FROM $unit;") )); then
        return 0
    else
        unix_etag="$(r_db "SELECT etag FROM $unit;")"
    fi
    etag="\"$(u2e $unix_etag)\""
    response="$(${X[curl]} --compressed -D - -H "If-None-Match: $etag" -s $appstore_url/$unit.json)"
    http_code="$(echo "$response" | ${X[head]} -n1 | ${X[gawk]} 'tolower($0)~/http\//{print $2}')"
    new_etag="$(echo "$response" | ${X[grep]} -ioPs 'etag: "\K[^"]+')"
    new_unix_etag="$(e2u "$new_etag")"

    if ${B[trace]:-_}; then
        echo "==TRACE=start=" >$TTY
        print_stack_trace >$TTY
        echo "unix_etag / etag    - $unix_etag / $etag" >$TTY
        echo "url                 - $appstore_url/$unit.json" >$TTY
        echo "curl command        - curl --compressed -D - -H \"If-None-Match: \$etag\" -s \$url" >$TTY
        echo "response header:" >$TTY
        echo "----------------" >$TTY
        echo "$response" | sed_ '$d;/^\s*$/d' >$TTY
        echo "----------------" >$TTY
        echo "http_code           - $http_code" >$TTY
        echo "new_etag / unix_etag- $new_etag / $new_unix_etag" >$TTY
    fi

    if (( http_code == 200 )); then
        if [ "$unit" = "apps" ]; then
            local json_data_file="$(jsontf)"

            if ${B[trace]:-_}; then
                print_funcname >$TTY
                echo "json_data_file      - $json_data_file" >$TTY
            fi

            echo "$response" | ${X[tail]} -n 1 > "$json_data_file"
            cleanup "$(r_db "SELECT json_data_file FROM apps WHERE platform == '$platform' AND etag == '$unix_etag'")"
            w_db apps "$platform" "$new_unix_etag" "$json_data_file"
        else
            w_db "$unit" "$new_unix_etag" "$(echo "$response" | ${X[tail]} -n 1)"
        fi
    fi
    if ${B[trace]:-_}; then
        echo -e "==TRACE=end===\n" >$TTY
    fi
    echo $http_code:$new_unix_etag
}

appstore(){
    local jq_filter platform extra_jq response http_code unix_etag json_data_file ids
    local -A bool
    platform="${NC[version]}" bool[ids]=_ bool[new]=_
    case "$(varname "$1")" in
        platform) platform="$(varval "$1")"
                  shift ;;
               *) :
    esac
    case "$1" in
         ids|new) bool["$1"]=:
                  shift ;;
               *) :
    esac
    extra_jq="$*"

    if ${B[trace]:-_}; then
        echo "==TRACE=start=" >$TTY
        print_stack_trace >$TTY
        local iter
        echo -n "global path values  -" >$TTY
        for iter in ${!D[@]}; do echo -n " $iter=${D[$iter]}" >$TTY; done; echo >$TTY
        echo -n "nextcloud values    -" >$TTY
        for iter in ${!NC[@]}; do echo -n " $iter=${NC[$iter]}" >$TTY; done; echo >$TTY
        echo -n "global bool values  -" >$TTY
        for iter in ${!B[@]}; do echo -n " $iter=${B[$iter]}" >$TTY; done; echo >$TTY
        unset iter
        if q2 declare -p bool | ${X[grep]} -qs '^declare -A'; then
            local iter
            echo -n "local bool values   -" >$TTY
            for iter in ${!bool[@]}; do echo -n " $iter=${bool[$iter]}" >$TTY; done; echo >$TTY
            unset iter
        fi
        echo "platform            - $platform" >$TTY
        echo "extra_jq            - $extra_jq" >$TTY
        echo "lang                - $lang" >$TTY
        echo -e "==TRACE=end===\n" >$TTY
    fi

    response=$(dl_appstore_json_db apps $platform 2>$TTY)
    http_code=${response%:*} unix_etag=${response#*:}
    json_data_file="$(r_db "SELECT json_data_file FROM apps WHERE platform == '$platform' AND etag == '$unix_etag'")"

    if ${B[trace]:-_}; then
        echo "==TRACE=start=" >$TTY
        print_funcname >$TTY
        if q2 declare -p bool | ${X[grep]} -qs '^declare -A'; then
            local iter
            echo -n "local bool values   -" >$TTY
            for iter in ${!bool[@]}; do echo -n " $iter=${bool[$iter]}" >$TTY; done; echo >$TTY
            unset iter
        fi
        echo "http:code           - $http_code" >$TTY
        echo "unix_etag           - $unix_etag" >$TTY
        echo "json_data_file      - $json_data_file" >$TTY
        echo -e "==TRACE=end===\n" >$TTY
    fi

  # jq-filter as here-document:
    read -rd '' jq_filter << 'JQ'
  # Define a function to get the translation for a given language
    def get_translation($lang):
      .translations[$lang] // .translations["en"];
  # Define a function to extract min and max from latestPlatformVersion
    def extract_version:
      (.latestPlatformVersion|gsub(">=|<=";"")) as $versions|
      ($versions|split(" ")) as [$min, $max]|
      {NCmin: $min, NCmax: $max};
  # Define a function to extract PHP versions
    def extract_php_versions:
      .phpVersionSpec as $phpSpec|
      if $phpSpec == "*" then
        {phpMin: "", phpMax: ""}
      else
        ($phpSpec|gsub(">=|<";"")) as $versions|
        ($versions|split(" ")) as [$min, $max]|
        {
          phpMin: ($min|sub("\\.[0-9]+$";"")),
          phpMax: ($max|if . == null then "" else .|sub("\\.[0-9]+$";"")|split(".")|map(tonumber)|.[0] * 10 + .[1] - 1|tostring|sub("(?<major>[0-9])(?<minor>[0-9])";"\(.major).\(.minor)") end)
        }
      end;
    map(select(.releases|length > 0))|
    map({
        id,
        name: get_translation($lang).name,
        summary: get_translation($lang).summary,
        categories: (.categories|join(", ")),
    #    isFeatured,
        version: (.releases|sort_by(.created)|last|.version),
        userDocs,
        adminDocs,
        developerDocs,
        issueTracker,
        website,
        created,
        lastModified,
        databases: (.releases|sort_by(.created)|last|.databases|map("\(.id) \(.rawVersionSpec)"|sub(" +";" ")|sub(" \\*";"")|sub(",$";""))|join(", ")),
        phpVersionSpec: (.releases|sort_by(.created)|last|.phpVersionSpec),
        phpExtensions: (.releases|sort_by(.created)|last|.phpExtensions|map("\(.id) \(.rawVersionSpec)"|sub(" +";" ")|sub(" \\*";"")|sub(",$";""))|join(", ")),
        phpMinIntSize: (.releases|sort_by(.created)|last|.minIntSize),
        latestPlatformVersion: (.releases|sort_by(.created)|last|.rawPlatformVersionSpec),
    })|map(. + (extract_php_versions)|del(.phpVersionSpec))|map(. + (extract_version)|del(.latestPlatformVersion))
JQ
    [ -z "$extra_jq" ] || jq_filter="$jq_filter|$extra_jq"
    ${bool[new]} && (( $(r_db "SELECT COUNT(*) FROM filtered_apps WHERE platform == '$platform' AND etag == '$unix_etag' AND lang == '$lang';") )) && return 0
    if ${bool[new]}; then
        local json_filtered_data_file="$(jsontf)"
        ${X[jq]} --arg lang "$lang" -f <(echo "$jq_filter") "$json_data_file" > $json_filtered_data_file
        cleanup "$(r_db "SELECT json_data_file FROM filtered_apps WHERE platform == '$platform' AND lang == '$lang'")"
        w_db filtered_apps "$platform" "$lang" "$unix_etag" "$json_filtered_data_file"
        return 0
    elif ${bool[ids]}; then
        ids="$(${X[jq]} -cr --arg lang "$lang" -f <(echo "$jq_filter") "$json_data_file" | ${X[base64]} -w 0)"
        w_db app_ids appstore_$platform "$unix_etag" "$ids"
        return 0
    fi
    ${X[jq]} --arg lang "$lang" -f <(echo "$jq_filter") "$json_data_file"
    exit 0
}

# TODO: Fix this or throw it out?
categories(){
    local jq_filter extra_jq="$*" query json_data
    dl_appstore_json_db categories 2>$TTY
    read -rd '' jq_filter << 'JQ'
      # Define a function to get the translation for a given language
        def get_translation($lang):
          .translations[$lang] // .translations["en"];
        map({
          id,
          name: (get_translation($lang)|.name),
          description: (get_translation($lang)|.description)
        })
JQ
    [ -z "$extra_jq" ] || jq_filter="$jq_filter|$extra_jq"
    query="SELECT json_data FROM categories;"
    json_data="$(q2 r_db "$query")"
    ${X[jq]} --arg lang "$lang" -f <(echo "$jq_filter") <<< "$json_data" # "$TMPDIR/${basename_me}_categories.json"
    exit 0
}

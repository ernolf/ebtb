__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${APPSTORE_BASHLIB:-false} && return
APPSTORE_BASHLIB=:

# for backwards compatibility
declare -f lrequire &>/dev/null||lrequire(){ require $@;}

. <(lrequire $sin/db)

# appstore-functions:
dl_appstore_json_db(){
    local unit=$1 appstore_api='https://apps.nextcloud.com/api/v1' p etag # p stands for platform

    # etag to unix, with check if the string is in hexadecimal format (lowercase only)
    e2u(){
        [ -z "$1" ] || {
            [[ "$1" =~ ^[0-9a-f-]+$ ]] && printf "$1" || printf "$(date --utc --date="${1%%.*}" +"%s").$(printf "${1#*.}" | sed 's/+.*//')"
        }
    }
    # unix to etag, with check if the string is in hexadecimal format (lowercase only)
    u2e(){
        [ -z "$1" ] || {
            [[ "$1" =~ ^[0-9a-f-]+$ ]] && echo "$1" || date --utc --date="@$1" +"%Y-%m-%d %H:%M:%S".${1#*.}+00:00
        }
    }

    local platformdir new_etag unix_etag new_unix_etag response
    local -i http_code
    if [ "$unit" = "apps" ]; then
        p=$2
        shift
        case $p in
            all) :
                 ;;
              *) platformdir="/platform/$p"
        esac
    fi
    local appstore_url="$appstore_api$platformdir"
    if [ "$unit" = "apps" ]; then
        unix_etag="$(r_db "SELECT etag FROM apps WHERE platform = '$p';")" # try to fetch ETag from database
        if [ "$p" != "all" ]; then
            if [ 0$(v2i "$p") -le 0$(v2i "${LATEST_EOL[${#LATEST_EOL[@]}-1]}") ]; then
                if (( $(r_db "SELECT COUNT(*) FROM apps WHERE platform == '$p';") )); then
                    echo reuse:$unix_etag
                    return 0
                fi
            fi
        fi
    elif (( $(r_db "SELECT COUNT(*) FROM $unit;") )); then
        return 0
    else
        unix_etag="$(r_db "SELECT etag FROM $unit;")"
    fi
    etag="\"$(u2e $unix_etag)\""
    response="$(curl -D - -H "If-None-Match: ${etag}" -s $appstore_url/$unit.json)"
    http_code="$(echo "$response" | head -n 1 | awk 'tolower($0)~/http\//{print $2}')"
    new_etag="$(echo "$response" | grep -ioPs 'etag: "\K[^"]+')"
    new_unix_etag="$(e2u "$new_etag")"
    if (( http_code == 200 )); then
        if [ "$unit" = "apps" ]; then
            local json_data_file="$(jsontf)"
            echo "$response" | tail -n 1 > "$json_data_file"
            rm -f "$(r_db "SELECT json_data_file FROM apps WHERE platform == '$p' AND etag == '$unix_etag'")"
            w_db apps "$p" "$new_unix_etag" "$json_data_file"
        else
            w_db "$unit" "$new_unix_etag" "$(echo "$response" | tail -n 1)"
        fi
    fi
    echo $http_code:$new_unix_etag
}

appstore(){
    local JQ_FILTER platform="$nc_version" ids=false new=false
    case "${1%%=*}" in
        platform)   local $1
                    shift
                    ;;
               *)   :
    esac
    case "$1" in
         ids|new)   local $1=true
                    shift
                    ;;
               *)   :
    esac
    local extra_jq="$*"
# TODO 0 -->
$debug && echo "${FUNCNAME[0]}: platform=$platform, ids=$ids, new=$new, extra_jq=$extra_jq, lang=$lang"
$debug && anykey
$debug && set -x
# TODO <-- 0
    local response=$(dl_appstore_json_db apps $platform)
    local http_code=${response%:*} unix_etag=${response#*:}
# TODO 1 -->
$debug && echo "${FUNCNAME[0]}: http:code=$http_code, unix_etag=$unix_etag"
$debug && anykey
$debug && set +x
# TODO <-- 1
    local json_data_file="$(r_db "SELECT json_data_file FROM apps WHERE platform == '$platform' AND etag == '$unix_etag'")"

  # jq-filter as here-document:
    read -rd '' JQ_FILTER << 'JQ'
  # Define a function to get the translation for a given language
    def get_translation($lang):
      .translations[$lang] // .translations["en"];
  # Define a function to extract min and max from latestPlatformVersion
    def extract_version:
      (.latestPlatformVersion|gsub(">=|<=";"")) as $versions|
      ($versions|split(" ")) as [$min, $max]|
      {NCmin: $min, NCmax: $max};
  # Define a function to extract PHP versions
    def extract_php_versions:
      .phpVersionSpec as $phpSpec|
      if $phpSpec == "*" then
        {phpMin: "", phpMax: ""}
      else
        ($phpSpec|gsub(">=|<";"")) as $versions|
        ($versions|split(" ")) as [$min, $max]|
        {
          phpMin: ($min|sub("\\.[0-9]+$";"")),
          phpMax: ($max|if . == null then "" else .|sub("\\.[0-9]+$";"")|split(".")|map(tonumber)|.[0] * 10 + .[1] - 1|tostring|sub("(?<major>[0-9])(?<minor>[0-9])";"\(.major).\(.minor)") end)
        }
      end;
    map(select(.releases|length > 0))|
    map({
        id,
        name: get_translation($lang).name,
        summary: get_translation($lang).summary,
        categories: (.categories|join(", ")),
    #    isFeatured,
        version: (.releases|sort_by(.created)|last|.version),
        userDocs,
        adminDocs,
        developerDocs,
        issueTracker,
        website,
        created,
        lastModified,
        databases: (.releases|sort_by(.created)|last|.databases|map("\(.id) \(.rawVersionSpec)"|sub(" +";" ")|sub(" \\*";"")|sub(",$";""))|join(", ")),
        phpVersionSpec: (.releases|sort_by(.created)|last|.phpVersionSpec),
        phpExtensions: (.releases|sort_by(.created)|last|.phpExtensions|map("\(.id) \(.rawVersionSpec)"|sub(" +";" ")|sub(" \\*";"")|sub(",$";""))|join(", ")),
        phpMinIntSize: (.releases|sort_by(.created)|last|.minIntSize),
        latestPlatformVersion: (.releases|sort_by(.created)|last|.rawPlatformVersionSpec),
    })|map(. + (extract_php_versions)|del(.phpVersionSpec))|map(. + (extract_version)|del(.latestPlatformVersion))
JQ
    [ -z "$extra_jq" ] || JQ_FILTER="$JQ_FILTER|$extra_jq"
    $new && (( $(r_db "SELECT COUNT(*) FROM filtered_apps WHERE platform == '$platform' AND etag == '$unix_etag' AND lang == '$lang';") )) && return 0
    if $new; then
        local json_filtered_data_file="$(jsontf)"
$debug && set +x
        jq --arg lang "$lang" -f <(echo "$JQ_FILTER") "$json_data_file" > $json_filtered_data_file
$debug && set -x
        rm -f "$(r_db "SELECT json_data_file FROM filtered_apps WHERE platform == '$platform' AND lang == '$lang'")"
        w_db filtered_apps "$platform" "$lang" "$unix_etag" "$json_filtered_data_file"
$debug && set +x
        return 0
    elif $ids; then
        local ids="$(jq -cr --arg lang "$lang" -f <(echo "$JQ_FILTER") "$json_data_file"|base64 -w 0)"
        w_db app_ids appstore_$platform "$unix_etag" "$ids"
        return 0
    fi
    jq --arg lang "$lang" -f <(echo "$JQ_FILTER") "$json_data_file"
    exit 0
}

# TODO: Fix this or throw it out?
categories(){
    local JQ_FILTER extra_jq="$*" query json_data
    dl_appstore_json_db categories
    read -rd '' JQ_FILTER << 'JQ'
      # Define a function to get the translation for a given language
        def get_translation($lang):
          .translations[$lang] // .translations["en"];
        map({
          id,
          name: (get_translation($lang)|.name),
          description: (get_translation($lang)|.description)
        })
JQ
    [ -z "$extra_jq" ] || JQ_FILTER="$JQ_FILTER|$extra_jq"
    query="SELECT json_data FROM categories;"
    json_data="$(r_db "$query" 2>/dev/null)"
    jq --arg lang "$lang" -f <(echo "$JQ_FILTER") <<< "$json_data" # "$TMPDIR/${basename_me}_categories.json"
    exit 0
}

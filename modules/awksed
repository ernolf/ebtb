__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${AWKSED_BASHLIB:-false} && return
AWKSED_BASHLIB=:

# awk (iof=intermediate output file)
awk_remove_trailing_empty_lines(){
    local infile="$1"
    local iof="$infile~iof~"
    awk '/^$/{n=n RS}; /./{printf "%s",n; n=""; print}' "$infile" > "$iof" && mv "$iof" "$infile"
}
# radicaly delete duplicate lines
uniq_lines(){
    local infile="$1"
    local iof="$infile~iof~"
    awk '!seen[$0]++' "$infile" > "$iof" && mv "$iof" "$infile"
}

# delete duplicate empty lines, keep single empty lines
uniq_empty_lines(){
    local infile="$1"
    local iof="$infile~iof~"
    awk 'NF || prev { print; prev = NF }' "$infile" > "$iof" && mv "$iof" "$infile" \
    && remove_trailing_empty_lines "$infile"
}

# delete duplicate lines, keep single empty lines INSIDE the file, remove empty lines at the end of the file
dedup_lines(){
    local infile="$1"
    local iof="$infile~iof~"
    awk '!seen[$0]++ || ($0 == "" && prev != "") { print } { prev = $0 }' "$infile" > "$iof" && mv "$iof" "$infile" \
    && remove_trailing_empty_lines "$infile"
}

# sed
remove_trailing_empty_lines(){
    local infile="$1"
    sed -i ':a;N;$!ba;s/\n*$//' $infile
}

# delete from $pattern to end without deleting the line containing $pattern
delafter(){
    local pattern="$1" infile="$2" outfile="$3"
    case ${outfile:--i} in
        -i) sed -i -n "0,/$pattern/p" "$infile"
            ;;
         *) sed -n "0,/$pattern/p" "$infile" > "$outfile"
    esac
}

# delete from $pattern to end including the line containing $pattern
delp2ei(){
    local pattern="$1" infile="$2" outfile="$3"
    case ${outfile:--i} in
        -i) sed -i -n "/$pattern/q;p" "$infile"
            ;;
         *) sed -n "/$pattern/q;p" "$infile" > "$outfile"
    esac
}
del_from_x_to_end_including(){ delp2ei "$@";}

# search for lines containing pattern1 and pattern2 and delete those lines and everything in between.
delx2yi(){
    local pattern1="$1" pattern2="$2" infile="$3" outfile="$4"
    case ${outfile:--i} in
        -i) sed -i "/$pattern1/,/$pattern2/d" "$infile"
            ;;
         *) sed "/$pattern1/,/$pattern2/d" "$infile" > "$outfile"
    esac
}
del_from_x_to_y_including(){ delx2yi "$@";}

# only delete the lines in between pattern1 and pattern2, remain those lines containg the patterns untouched.
delx2y(){
    local pattern1="$1" pattern2="$2" infile="$3" outfile="$4"
    case ${outfile:--i} in
        -i) sed -i "/$pattern1/,/$pattern2/{//!d}" "$infile"
            ;;
         *) sed "/$pattern1/,/$pattern2/{//!d}" "$infile" > "$outfile"
    esac
}
del_from_x_to_y(){ delx2y "$@";}

# delete all lines from the beginning until & including the line containing pattern "p".
delb2pi(){
    local pattern="$1" infile="$2" outfile="$3"
    case ${outfile:--i} in
        -i) sed -i "1,/$pattern/d" "$infile"
            ;;
         *) sed "1,/$pattern/d" "$infile" > "$outfile"
    esac
}
del_from_begin_to_y_including(){ delb2pi "$@";}

# delete all lines from the beginning until the line containing pattern, remain the line containing pattern untouched.
delb2p(){
    local pattern="$1" infile="$2" outfile="$3"
    case ${outfile:--i} in
        -i) sed -i "1,/$pattern/{/$pattern/!d;}" "$infile"
            ;;
         *) sed "1,/$pattern/{/$pattern/!d;}" "$infile" > "$outfile"
    esac
}
del_from_begin_to_y(){ delb2p "$@";}

# trim "$1" from leading and trailing spaces
trim(){
    sed 's/^\s*//; s/\s*$//' <<< "$1"
}

# stripconf php.ini, exclude pattern: comment marker ';', #, empty lines and '['
stripconf(){
    sed -E '/^\s*($|;|#|\[)/d;/=\s*$/d' "$1"
}

# remove single and double  quotes from begin and end of line $1
unquote() {
    sed -E "s/^'(.*)'$|^\"(.*)\"$/\1/" <<< "$1"
}

# Remove ANSI color codes and invisible characters like 'ZERO WIDTH SPACE', and \xE2\x9A\xA0\xEF\xB8\x8F or \xE2\x9A\xA0 (instead of ⚠️)
noansi(){
    sed -re 's/\x1B\[[0-9;?]*[a-zA-Z]//g; s/\xE2\x9A\xA0/!/g; s/\xEF\xB8\x8F//g; s/\xE2\x80\x8B//g' <<< "$*"
# TODO 0 -->
#    perl -CSD -pe 's/\x1B\[[0-9;?]*[a-zA-Z]//g; s/\x{26A0}/!/g; s/\x{FE0F}//g; s/\x{200B}//g' <<< "$*"
# TODO <-- 0
}

urldecode(){
    echo -n "${*//+/ }" | sed 's/%\([0-9a-fA-F]\{2\}\)/\\x\1/g' | xargs -0 printf
}

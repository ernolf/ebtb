__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

declare -f _ &>${NUL:=/dev/null} || _(){ false; }
if (( M[e] < 1737773190 )); then
    q0(){ "$@" &>$NUL; }
    q1(){ "$@" >$NUL; }
    q2(){ "$@" 2>$NUL; }
fi
q0 declare -f lrequire || lrequire(){ req $@; }

${BASICS_BASHLIB:-_} && return
BASICS_BASHLIB=:

. <(lrequire binaries)

# Empty spaces
es(){
    (( ${1:-1} )) || return
    printf "%*s" ${1:-1} ' '
}; es2(){ es 2;}; es3(){ es 3;}; es4(){ es 4;}; es5(){ es 5;}; es6(){ es 6;}

# Empty lines ( we use the f (feed) function from ansi)
el(){ f ${1:-1};}; el2(){ f 2;}; el3(){ f 3;}; el4(){ f 4;}; el5(){ f 5;}; el6(){ f 6;}

# Print literal "\n" $1 times
ell(){
    local -i i
    for (( i=0; i<${1:-1}; i++ )); do
        printf '%s' '\n'
    done
}; ell2(){ ell 2;}; ell3(){ ell 3;}; ell4(){ ell 4;}; ell5(){ ell 5;}; ell6(){ ell 6;}

# remove square brackets:
desquare(){
    ${X[tr]} -d '[]' <<< "$@"
}

# tolower
tlwr(){
    printf %s "${*,,}"
}
tolower(){
    printf %s "${*,,}"
}

# printf not sorted line by line
p_notempty(){
    printf '%s\n' "$@" | ${X[grep]} -v '^[[:space:]]*$'
}

# printf not sorted line by line
p_nosort(){
    printf '%s\n' "$@"
}

# printf not sorted line by line
p_nosort_trim(){
    (( $# )) || return 0
    if [[ "$(trim "$@")" ]]; then
        p_nosort "$@"
    fi
}

# printf sorted and remove duplicates
p_sort(){
    local arg
    if [ "$1" = '-V' ]; then
        arg="-V"
        shift
    else
        arg='-'
    fi
    printf '%s\n' "$@" | ${X[sort]} ${arg}u
}

# printf sorted and remove duplicates
p_sort_trim(){
    (( $# )) || return 0
    if [[ "$(trim "$@")" ]]; then
        p_sort "$@"
    fi
}

# printf sorted and remove duplicates reverse order
p_rsort(){
    printf '%s\n' "$@" | ${X[sort]} -ru
}

# printf sorted and remove duplicates reverse order
p_rsort_trim(){
    if [[ "$(trim "$@")" ]]; then
        p_rsort "$@"
    fi
}

# printf sorted, remove duplicates, and numerate lines dynamically based on line count
p_sort_numerate(){
    local -i line_count digits
    line_count=$(p_sort "$@" | ${X[wc]} -l)
    digits=$(( line_count < 10 ? 1 : (line_count < 100 ? 2 : 3) ))
    p_sort "$@" | ${X[nl]} -v 1 -n rz -w "$digits" -s ': '
}

# version to integer
v2i(){
    ${X[gawk]} '{print $1*1000000000000+$2*100000000+$3*10000+$4}' <<< "${1//./ }"
}

# htmldecode
htmldecode(){
    ${X[php]} -r "echo html_entity_decode('$*');"
}

# encrypt
encr(){
    ${X[php]} -r "
        \$d='$1';
        \$p='$2';
        \$iv=random_bytes(openssl_cipher_iv_length('aes-256-cbc'));
        \$encrypted=openssl_encrypt(\$d,'aes-256-cbc',\$p,OPENSSL_RAW_DATA,\$iv);
        echo rtrim(base64_encode(\$iv . \$encrypted),'=');
    "
}

# no nullglob
nonullglob(){
    local -a glob_expanded=($1)
    [ "${glob_expanded[0]}" = "$1" ] && return 1 || return 0
}

# is_path <path>
# Returns:
#   0 and echoes "full" if <path> exists (file or directory)
#   0 and echoes "dir"  if <path> does not exist but its parent directory does
#   0 and echoes "not"  if <path> syntactically looks like a UNIX path but neither it nor its parent exists
#   1 (and echoes nothing) if <path> does not look like a UNIX path (i.e. does not begin with '/')
is_path(){
    local p
    p="$1"
    [[ "$p" == /* ]] || return 1
    if [[ -e "$p" ]]; then
        echo full
    elif [[ -d "$(${X[dirname]} -- "$p")" ]]; then
        echo dir
    else
        echo not
    fi
    return 0
}

# check if bool
boolean(){
    if ${X[grep]} -qswiE "(on|1)" <<< "$1"; then
        echo -n 'true'
        return 0
    elif ${X[grep]} -qswiE "(off|0)" <<< "$1"; then
        echo -n 'false'
        return 0
    fi
    return 1
}

out_of_scope(){
    ( "$@" )
}

# escape $, [, ], ( and ) etc.
# %q = "shell quoted string", a great bash include!
# shex â€“ portmanteau from "shell" + "escape".
shex(){
    printf '%q' "$@"
}

# Pads a Base64 encoded string to ensure its length is divisible by 4 by adding '=' at the end if necessary.
pad(){
    local i="$1"
    (( $((${#i}%4)) )) && i="${i}$(printf '=%.0s' $(${X[seq]} 1 $((4 - $((${#i} % 4)) )) ) )"
    echo "$i"
}

canonicalize_array(){
    local path
    local -a ca
    mapfile -t ca< <(for path in "$@"; do
            printf '%s\n' "$(${X[realpath]} "$path")"
        done)
    p_sort "${ca[@]}"
}

canonicalize(){
    local target
    if ! [ -e "$1" ]; then 
        printf '%s' "$1"
        return 1
    fi
    target="$(${X[realpath]} "$1")"
    if [ "$1" = "$target" ]; then
        printf '%s' "$1"
        return 1
    else
        printf '%s' "$target"
        return 0
    fi
}

# truncate STRING to a maximum length
trunc(){
    local str
    local -i max_len
    max_len=$1
    if [[ "$max_len" =~ ^[0-9]+$ ]]; then
        shift
        str="$*"
        (( ${#str} > max_len )) && printf '%s' "${str:0:$(( max_len - 1 ))}~" || printf '%s' "$str"
    else
        printf '%s' "$*"
        return 1
    fi
}

# sanitize: turn arbitrary user input into a-zA-Z0-9_- only
sanitize() {
    local raw="$1"
    # replace spaces and tabs with underscore
    raw="${raw//[[:space:]]/_}"
    # remove everything that's not letter, digit, underscore or dash
    raw="${raw//[^a-zA-Z0-9_-]/}"
    # collapse multiple underscores
    raw="${raw//__/_}"
    # trim leading/trailing underscore
    raw="${raw##_}"
    raw="${raw%%_}"
    echo "$raw"
}

# var_ name/prefix and var_ val/sufix
var_(){
    local fix strg fs
    fix="$1" strg="$2" fs="$3"
    case "$fix" in
        prefix)
            trim "${strg%%$fs*}" ;;
        sufix)
            if [[ "$strg" =~ $fs ]]; then
                trim "${strg##*$fs}"
            else
                printf ''
            fi
    esac
}

varname(){
    local string fs
    string="$1" fs="${2:-=}"
    [ -n "$string" ] || return
    var_ prefix "$string" "$fs"
}

varval(){
    local string fs
    string="$1" fs="${2:-=}"
    [ -n "$string" ] || return
    var_ sufix "$string" "$fs"
}

prefix(){
    local string fs
    string="$1" fs="${2:-.}"
    [ -n "$string" ] || return
    var_ prefix "$string" "$fs"
}

sufix(){
    local string fs
    string="$1" fs="${2:-.}"
    [ -n "$string" ] || return
    var_ sufix "$string" "$fs"
}

# print the n th line
hnt1(){
    local file
    local -i hn
    hn="${1:-2}" file="${2:-$MP}"
    ${X[head]} -n $hn "$file" | ${X[tail]} -n 1
}

# print the n th line counted from the bottom
tnh1(){
    local file
    local -i tn
    tn="${1:-2}" file="${2:-$MP}"
    ${X[tail]} -n $tn "$file" | ${X[head]} -n 1
}

tnh1_strg(){
    local string file
    local -i tn
    string="$1" tn="${2:-3}" file="${3:-$MP}"
    [[ " $(tnh1 $tn "$file") " =~ " $string " ]]
}

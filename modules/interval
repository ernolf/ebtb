__bashlib__
__path_and_modulename__
__version_and_datestring__
#
__copyright__
#
__license__
#

${INTERVAL_BASHLIB:-_} && return
INTERVAL_BASHLIB=:

# TODO 0 -->
. <(lrequire binaries)
# TODO <-- 0
. <(lrequire today)

# d=Date n=Newer o=Older f=Formated ut=UnixTime t=Today iy=IntervalYears im=IntervalMonths id=IntervalDays m=Month y=Year
interval(){
    require_arg $@
    local until since years months and n_d_f o_d_f
    local -i ut_1 ut_2 n_d o_d n_y n_m n_day o_y o_m o_day iy im id
    ut_1=$1 ut_2=$2 until='' since='' years=' year' months=' month' and=' and '
    (( $# == 1 )) && ut_2=$today
    (( ut_1 > ut_2 )) && n_d=$ut_1 o_d=$ut_2 || n_d=$ut_2 o_d=$ut_1
    (( n_d == today )) && since=" ago"
    (( o_d == today )) && until="in "
    n_d_f=$(${X[date]} -ud @$n_d +%Y-%-m-%-d)
    o_d_f=$(${X[date]} -ud @$o_d +%Y-%-m-%-d)
    read -r n_y n_m n_day <<< ${n_d_f//-/ }
    read -r o_y o_m o_day <<< ${o_d_f//-/ }
    iy=$((n_y-o_y)) im=$((n_m-o_m)) id=$((n_day-o_day))
    (( id < 0 )) && (( im-- ))
    (( im < 0 )) && {
        ((iy--))
        ((im+=12))
    }
    (( iy == 1 )) || years=" years"
    (( im == 1 )) || months=" months"
    if (( iy > 0 || im > 0 )); then
        (( im )) || unset and im months
        (( iy )) || unset and iy years
        echo "$until$iy$years$and$im$months$since"
    else
        echo "${until}less than 1$months$since"
    fi
}

# from seconds to human readable
sec2hr(){
    require_arg $@
    local outstring
    local -i seconds minutes hours days
    seconds=${1%.*}
    days=$((seconds / 86400))
    (( days ))&&outstring="$days days"
    hours=$((seconds / 3600 % 24))
    (( hours ))&&outstring="$outstring, $hours hours"
    minutes=$((seconds / 60 % 60))
    outstring="$outstring and $minutes minutes"
    echo "$outstring"
}

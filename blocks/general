# general
q0(){
    "$@" &>$NUL
}
q1(){
    "$@" >$NUL
}
q2(){
    "$@" 2>$NUL
}
mkld(){
    ${C[md]} ${D[l]:=${D[lu]}/${I[u]}/${M[p]}}
    [[ -d ${D[l]} ]] || { D[l]=${D[tu]}/lock; mkld; }
}
chrf(){
    ${C[fi]} $1 -type d -exec ${C[cm]} 777 {} +
    ${C[fi]} $1 -type f -exec ${C[cm]} 666 {} +
    ${B[rt]} && [[ $2 ]] && ${C[co]} $2:$2 $1
}
fn_ln(){
    local ln fn f t
    read -r ln fn f <<< "$(caller ${1:-0})"
    t="$(${C[rp]} $f)"
    [[ $t = $MP ]] && f="${M[n]}" t="${M[n]}"
    [[ $fn = main ]] && fn='' || fn="$fn():"
    if [[ $t =~ /fd/ ]]; then
        echo -n "$fn$ln:"
    elif [ "$t" = "$f" ]; then
        echo -n "$f:$fn$ln:"
    else
        echo -n "$f->$t:$fn$ln:"
    fi
}
trace(){
    local f t
    local -i i d
    # build a single-line trace: f1 -> f2 -> â€¦
    d=$(( ${#FUNCNAME[@]} - $(( 1 + ${2:-0} )) ))
    t=''
    for (( i=d; i>${1:-0}; i-- )); do
        f=$(fn_ln $i)
        (( i == d )) && t="$f" || t+="->$f"
    done
    printf '%s' "$t"
}
log(){
    mkld
    (   ${C[f]} -x 200
        echo "$(ts) - ${M[b]}-${M[e]} - $(fp)$@" >> "${F[log]:=${D[log]}/${M[b]}[uid:${I[u]}].log}"
    ) 200>"${D[l]}/log" 2> $NUL
}
ts(){
    printf "%(%s-(%F_%R_%Z))T"
}
fp(){
    [ -f "${F[fp]:=${D[vt]}/fp}" ] && printf "$(< ${F[fp]})"
    printf "${M[pid]}:"
}
c(){
    mkld
    (   ${C[f]} -x 200
        ${C[cu]} --compressed "${@//NULL/\/dev\/null}"
    ) 200>"${D[l]}/cio" 2> $NUL
}
hc(){
    log "$(fn_ln)${V[astr]}${M[args]}"
    c -$1 NULL -w %{http_code} -A "$(fp;fn_ln)${V[astr]}${M[args]}" ${V[cargs]}/scripts/${M[n]}.json
}
purge_li(){
    [[ -d ${D[li]} ]] && (
        set -eu
        cd "${D[li]}" && [[ $(pwd -P) == "/var/tmp/${M[p]}/modules"* ]] && ${C[fi]} . -mindepth 1 -type f ! -name 'modules.*' -exec ${C[r]} {} +
    ) &>$NUL
    return 0
}
tabula_rasa(){ purge_li; }
nohome(){
    echo -e "\n\n\e[31m - Failed to load required module '$1'\n   this can happen if the module server is down e.g. for maintenance\n   try again later or run\n\n\e[37m     sudo\e[36m wget -O $MP ${M[url]}\n\n\e[31m   and start the script again.\e[0m\n" > $TTY
    kill -TERM ${M[pid]}
}
sourced(){
    local -u m
    shopt -s extglob
    eval 'm="${1/+(.d|apt|deb|dist|nc|php)\//_}_bashlib"'
    shopt -u extglob
    m="${m##*/}"
    q0 declare -p "$m" || declare -g "$m"=_
    ${!m}
}
json_etag(){
    [ -f "$1" ] || return 1
    [[ -v C[jq] || -v X[jq] ]] && q2 ${C[jq]:-${X[jq]:-}} -r '.etag' "$1" || return 1
}
module_etag(){
    ${C[jq]:-${X[jq]:-jq}} -r '.modules[]|select(.name=="'$1'")|.etag' $2
}
c4u(){
    local -u m="${1#*/}_BASHLIB"
    [ -f "${D[li]}/$1" ] || return 0
    local -i le=$(module_etag "$1" "${F[lmj]}") re=$(module_etag "$1" "${F[lmjn]}")
    (( le < re )) && {
        ${C[r]} "${D[li]}/$1"
        declare -g $m=_
    }
}
req(){
    sourced $1 || {
        local mc=$(c -A "$(fp;fn_ln)req $1" ${V[cargs]}/${D[ri]}/$1)
        [ "${mc:0:9}" = "# BASHLIB" ] && @HEREDOC@ || nohome "$1"
    }
}
require(){ req $@; }
lreq(){
    local m=${D[li]}/$1
    if [ -f $m ]; then
        sourced $1 || ${C[c]} $m
    elif (( $(${C[md]} -p $(${C[d]} $m); c -o $m -w %{http_code} -A "$(fp;fn_ln)REQ $1" ${V[cargs]}/${D[ri]}/$1) == 200 )) && [ "$(${C[h]} -c9 $m 2>&1)" = "# BASHLIB" ]; then
        log $(fn_ln)REQ $1
        ${C[c]} $m
    else
        nohome $1
    fi
}
lrequire(){ lreq $@; }
V[astr]="${I[l]}: " M[url]=${M[home]%/apps/raw}/script/${M[n]} V[cargs]="-se ${M[b]}-${M[e]} ${M[home]}"
bools=(run2 irun2 do_update do_restore_backup do_integrity_check firstrun)
for x in ${bools[@]}; do B[$x]=_; done
for x in "$@"; do
    case "$x" in
        json=*)         B[run2]=: J[o]="${x#*=}" V[astr]="run2 ${V[astr]}"    ;;
        irun2)          B[irun2]=: V[astr]="irun2 ${V[astr]}"                 ;;
        my_update)      B[do_update]=: V[astr]="update ${V[astr]}"            ;;
        restore_backup) B[do_restore_backup]=: V[astr]="backup ${V[astr]}"    ;;
        integrity_check)B[do_integrity_check]=: V[astr]="integrity ${V[astr]}";;
        --firstrun)     B[firstrun]=:                                         ;;
        --trace)        B[trace]=:                                            ;;
        *)              [ -z "${x// /}" ] || args+=("$x")
    esac
done
set -- "${args[@]}"
args=()
M[args]="$*"
${B[run2]} && q0 hc Io || {
    mapfile -t jnr < <(hc D)
    (( jnr[1] == 200 )) && J[o]="${jnr[0]}"
}
CMA="$ME json=${J[o]} ${M[args]}"

# general
q0(){
  "$@" &>/dev/null
}
q1(){
  "$@" >/dev/null
}
q2(){
  "$@" 2>/dev/null
}
log(){
    ( flock -x 200
      echo "$(ts) - $bm-$epoch - $(fp)$@" >> "$lf"
    ) 200>"$lf.lock"
}
ts() {
    printf "%(%s-(%F_%R_%Z))T"
}
ver_() {
    awk '/^# v/{print$3,$4}' "$1"
}
epch_() {
    awk '/^# v/{print$NF}' "$1"
}
fp() {
    q2 cat $lincld/fp
}
hc() {
    local a=$1
    shift
    log "$1" &
    $curlc -$a /dev/null -w %{http_code} -A "$(fp)$@"
}
checkbin() {
    q1 type -t $1 || { echo -e "\n\e[31m - '$1' binary not found.\e[0m\n" > /dev/tty
    kill -TERM $mpid; }
}
nohome() {
    echo -e "\n\n\e[31m - Failed to load required module '$1'\n   this can happen if the module server is down e.g. for maintenance\n   try again later or run\n\n\e[37m     sudo\e[36m wget -O $ca_me $my_url\n\n\e[31m   and start the script again.\e[0m\n" > /dev/tty
    [[ "$lincld" == *"/ebtb/"* ]] && rm -r "$lincld"
    kill -TERM $mpid
}
sourced() {
    local am
    local -u m="${1/\.d\//_}_BASHLIB"
    eval am="\$${m#*/}"
    ${am:-false}
}
json_etag() {
    [ -n "${BINARIES[jq]}" ] || return 1
    q2 ${BINARIES[jq]} -r '.etag' "$1"
}
c4u() {
    local -u m="${1#*/}_BASHLIB"
    [ -f "$lincld/$1" ] || return 0
    local -i le=$(module_etag "$1" "$lmj") re=$(module_etag "$1" "$lmjn")
    ((le < re)) && {
        rm "$lincld/$1"
        declare -g $m=false
    }
}
req() {
    sourced $1 || { local mc=$($curlc -A "$(fp)req $1" $cargs/$rincld/$1); [ "${mc:0:9}" = "# BASHLIB" ] && @HEREDOC@ || nohome "$l"; }
}
require() { req $@; }
lreq() {
    local m="$lincld/$1"
    if [ -f "$m" ]; then
        sourced $1 || cat "$m"
    elif ! $rt; then
        req $1
    elif (($(mkdir -p $(dirname $m); $curlc -o $m -w %{http_code} -A "$(fp)REQ $1" $cargs/$rincld/$1) == 200)) && [ "$(head -c9 $m 2>&1)" = "# BASHLIB" ]; then
        log REQ $1
        cat "$m"
    else
        nohome $1
    fi
}
lrequire() { lreq $@; }
module_etag() { jq -r '.modules[]|select(.name=="'$1'")|.etag' $2; }
declare -i mpid=$$ epoch my_epoch my_size lce mje mjne w4uc
for bin in id uname mkdir awk cat curl; do checkbin $bin; done
declare lf="$TMPDIR/ebtb-logfiles/$bm.log" version my_url curlc cargs opt opts astr="$(id -un): " A="$(uname -a)"
declare -a args tntd
[ -d "${lf%/*}" ] || mkdir -p "${lf%/*}"
version="$(ver_ "$apm")" epoch="$(epch_ "$apm")"
my_url="${my_home%/apps/raw}/script/$scriptname" curlc="/usr/bin/env LC_MESSAGES=C $(type -P curl) --compressed" cargs="-se $bm-$epoch $my_home"
opts="rt run2 irun2 do_update do_restore_backup do_integrity_check"
for opt in $opts; do declare $opt=false; done
(($(id -u))) || rt=:
for arg in "$@"; do
    if [ "${arg%=*}" = 'json' ]; then
        declare run2=: my_$arg astr="run2 $astr"
    elif [ "$arg" = 'irun2' ]; then
        declare irun2=: astr="irun2 $astr"
    elif [ "$arg" = 'my_update' ]; then
        declare do_update=: astr="update $astr"
    elif [ "$arg" = 'restore_backup' ]; then
        declare do_restore_backup=: astr="backup $astr"
    elif [ "$arg" = 'integrity_check' ]; then
        declare do_integrity_check=: astr="integrity $astr"
    else
        args+=("$arg")
    fi
done
set -- "${args[@]}" && unset -v args
declare my_args="$*" r my_json my_scriptname my_hash
$run2 && r=$(hc Io "$astr$my_args" $cargs/scripts/${scriptname}.json) || {
    r=$(hc D "$astr$my_args" $cargs/scripts/${scriptname}.json)
    ((${r##*$'\n'} == 200)) && my_json="${r%$'\n'*}"
}
unset -v r

# general
q0(){
    "$@" &>/dev/null
}
q1(){
    "$@" >/dev/null
}
q2(){
    "$@" 2>/dev/null
}
mkld(){
    [ -d "${D[l]:=/run/lock/${I[u]}/ebtb}" ] || ${C[md]} -p "${D[l]}"
    [ -d "${D[l]}" ] || { D[l]=$TD/ebtb/lock; ${C[md]} -p "${D[l]}"; }
}
log(){
    mkld
    (   ${C[f]} -x 200
        echo "$(ts) - ${M[b]}-${M[e]} - $(fp)$@" >> "${F[log]}"
    ) 200>"${D[l]}/log" 2>/dev/null
}
ts(){
    printf "%(%s-(%F_%R_%Z))T"
}
fp(){
    q2 ${C[c]} "${F[fp]}"
}
c(){
    mkld
    (   ${C[f]} -x 200
        ${C[cu]} --compressed "${@//NULL/\/dev\/null}"
    ) 200>"${D[l]}/curl" 2>/dev/null
}
hc(){
    log "${V[astr]}${M[args]}" &
    c -$1 NULL -w %{http_code} -A "$(fp)${V[astr]}${M[args]}" ${V[cargs]}/scripts/${M[n]}.json
}
checkbin(){
    q1 type -t $1 || { echo -e "\n\e[31m - '$1' binary not found.\e[0m\n" > /dev/tty
    kill -TERM ${M[pid]}; }
}
nohome(){
    echo -e "\n\n\e[31m - Failed to load required module '$1'\n   this can happen if the module server is down e.g. for maintenance\n   try again later or run\n\n\e[37m     sudo\e[36m wget -O $MP ${M[url]}\n\n\e[31m   and start the script again.\e[0m\n" > /dev/tty
    [[ "${D[li]}" == *"/ebtb/"* || "${D[li]}" == *"/.ebtb/"* ]] && ${C[r]} -r "${D[li]}"
    kill -TERM ${M[pid]}
}
sourced(){
    local -u m="${1/\.d\//_}_BASHLIB"
    m="${m#*/}"
    q0 declare -p "$m" || declare -g "$m"=_
    ${!m}
}
json_etag(){
    [ -n "${X[jq]:-jq}" ] || return 1
    [ -f "$1" ] || return 1
    q2 ${X[jq]:-jq} -r '.etag' "$1"
}
c4u(){
    local -u m="${1#*/}_BASHLIB"
    [ -f "${D[li]}/$1" ] || return 0
    local -i le=$(module_etag "$1" "${F[lmj]}") re=$(module_etag "$1" "${F[lmjn]}")
    (( le < re )) && {
        ${C[r]} "${D[li]}/$1"
        declare -g $m=_
    }
}
req(){
    sourced $1 || {
        local mc=$(c -A "$(fp)req $1" ${V[cargs]}/${D[ri]}/$1)
        [ "${mc:0:9}" = "# BASHLIB" ] && @HEREDOC@ || nohome "$l"
    }
}
require(){ req $@; }
lreq(){
    local m=${D[li]}/$1
    if [ -f $m ]; then
        sourced $1 || ${C[c]} $m
    elif (( $(${C[md]} -p $(${C[d]} $m); c -o $m -w %{http_code} -A "$(fp)REQ $1" ${V[cargs]}/${D[ri]}/$1) == 200 )) && [ "$(${C[h]} -c9 $m 2>&1)" = "# BASHLIB" ]; then
        log REQ $1 &
        ${C[c]} $m
    else
        nohome $1
    fi
}
lrequire(){ lreq $@; }
module_etag() { ${X[jq]:-jq} -r '.modules[]|select(.name=="'$1'")|.etag' $2; }
checkbin curl
V[astr]="${I[l]}: "
[ -d "${D[log]:=$TD/ebtb/log}" ] || ${C[md]} -p "${D[log]}"
F[log]="${D[log]}/${M[b]}.log" F[fp]="${D[log]}/fp"
M[url]="${M[home]%/apps/raw}/script/${M[n]}" V[cargs]="-se ${M[b]}-${M[e]} ${M[home]}"
bools=(run2 irun2 do_update do_restore_backup do_integrity_check)
for x in ${bools[@]}; do B[$x]=_; done
for x in "$@"; do
    case "$x" in
        json=*)         B[run2]=: J[o]="${x#*=}" V[astr]="run2 ${V[astr]}"    ;;
        irun2)          B[irun2]=: V[astr]="irun2 ${V[astr]}"                 ;;
        my_update)      B[do_update]=: V[astr]="update ${V[astr]}"            ;;
        restore_backup) B[do_restore_backup]=: V[astr]="backup ${V[astr]}"    ;;
        integrity_check)B[do_integrity_check]=: V[astr]="integrity ${V[astr]}";;
        *)              [ -z "${x// /}" ] || args+=("$x")
    esac
done
set -- "${args[@]}"
args=()
M[args]="$*"
${B[run2]} && q0 hc Io || {
    mapfile -t jnr < <(hc D)
    (( jnr[1] == 200 )) && J[o]="${jnr[0]}"
}
CMA="$ME json=${J[o]} ${M[args]}; exit 0"

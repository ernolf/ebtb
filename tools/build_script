#!/bin/bash

# Ensure we have the correct number of arguments
if [[ "$#" -lt 2 ]]; then
    echo "Usage: $0 <input_script> <output_script> [test]"
    exit 1
fi

# Ensure that the first argument is an existing file
if ! [ -f "$1" ]; then
    echo "\"$1\" does not exist"
    echo "Usage: $0 <input_script> <output_script>"
    exit 1
fi

# whoami, whereami
# b=basename m=me a=absolute p=path ca=canonical
declare bm apm me ca_me ca_dir
declare -i i
bm="$(basename "$0")"; apm="$(cd "$(dirname "$0")" && pwd)/$bm"
[ "$(command -v "$bm")" = "$apm" ] && me="$bm" || me="$apm"
ca_me="$(readlink -e "$apm")"; ca_dir="$(dirname "$ca_me")"

cd "$ca_dir/.."

# source common functions
source tools/common_build_functions
# Source the time
source config/runtime

# Declare variables
declare input_script output_script channel scriptname tempfile placeholder placeholder_pattern
# Assign the arguments to variables
input_script="$1" output_script="$2" channel="${3:-prod}"
tempfile="$(${X[mktemp]})"

if [ "$channel" = 'test' ]; then
    scriptname="$(${X[basename]} $input_script)-test"
else
    scriptname="$(${X[basename]} $input_script)"
fi

# cat the input module into the tempfile
${X[cat]} "$input_script" > "$tempfile"
strip_ "$tempfile"
replace_placeholders_ "$tempfile" "$output_script" "$scriptname" $epoch "$channel"
${X[rm]} -f "$tempfile"

# minify modules array
$MINIFY && ${X[sed]} -i '/^modules=(/ {
        :a; N; /)/!ba;
        s/\n[[:space:]]*/ /g;
        s/( */(/;
        s/ *)/)/;
        s/[[:space:]]*#/\n#/
    }' "$output_script"

# disable integrity check for local server
$LOCAL_SERVER && echo -e "v=true\nnohash" >> "$output_script"

exit 0

#!/bin/bash

# whoami, whereami
# b=basename m=me a=absolute p=path ca=canonical
declare bm apm me ca_me ca_dir
bm="$(basename "$0")"; apm="$(cd "$(dirname "$0")" && pwd)/$bm"
[ "$(command -v "$bm")" = "$apm" ] && me="$bm" || me="$apm"
ca_me="$(readlink -e "$apm")"; ca_dir="$(dirname "$ca_me")"

cd "$ca_dir/.."

# Source the configure file
source config/configure
# Source the secrets configure file if exists
[ -f config/secrets ] && source config/secrets
# Source the placeholders file
source config/placeholders
# Source the time
# source config/runtime # time is sourced only once by build script and passed as an argument!

if $LOCAL_SERVER; then
    MY_HOME="'http://localhost:$LOCAL_SERVER_PORT' lsd='$LOCAL_SERVER_DIRECTORY' local_server='$LOCAL_SERVER' ls_pid_file=\"\$TMPDIR/\${bm}-moduleserver.pid\";declare -i lsp=$LOCAL_SERVER_PORT"
fi

declare placeholder name runtime channel
declare -i epoch
placeholder="$1" name="$2" epoch=$3 channel="${4:-prod}"

placeholder_replace(){
    local placeholder name channel minified
    local -i epoch
    placeholder="$1" name="$2" epoch=$3 channel="$4"
    runtime="$(${X[date]} -d @$epoch "+%F %R %Z")"
    ${MINIFY:-false} && minified=" (minified)" || minified=''
    case "$placeholder" in
        shebang_bash)
            # https://stackoverflow.com/questions/10376206/what-is-the-preferred-bash-shebang#10383546
#            echo "#!/bin/bash"
#            echo "#!/usr/bin/env bash"
            echo '#!/usr/bin/env -S LC_CTYPE=C.UTF-8 LC_MESSAGES=C bash'
            ;;
        minified_bashlib|bashlib)
            echo '# BASHLIB'
            ;;
        path_and_scriptname)
            echo "# $BINDIR/$name"
            ;;
        path_and_modulename)
            echo "# $MODULEDIR/$name"
            ;;
        version_and_datestring)
            echo "# version $runtime $epoch"
            ;;
        copyright)
            ${X[cat]} "blocks/copyright"
            ;;
        license)
            ${X[cat]} "blocks/license"
            ;;
        whoami_whereami)
            ${MINIFY:-false} && echo '# minified codeblocks in human readable format: https://github.com/ernolf/ebtb/tree/main/blocks'
            echo "## bootstrap, whoami, whereami$minified"
            tools/minify "blocks/whoami_whereami"
            ;;
        scriptname)
            echo "M[p]='$PROJECT' M[n]='$name' MS='${name%-test}' M[c]='$channel' M[v]='$runtime' M[e]=$epoch M[home]='$MY_HOME' M[pid]=\$\$"
            ;;
        libversion)
            echo "${name^^}_LIB_VERSION=$epoch"
            ;;
        debug)
            if [ "$channel" = "test" ]; then
                ${X[cat]} "blocks/debug"
            fi
            ;;
        when)
            echo -e '# when\nprintf -v T[rte] "%(%s)T" -2'
            ;;
        vdirname)
            ${X[cat]} "blocks/vdirname"
            ;;
        tempdir)
            echo "## find a writable tempdir$minified"
            tools/minify "blocks/tempdir"
            ;;
        module_server)
            if $LOCAL_SERVER; then
                echo '## module server'
                case $LOCAL_SERVER_BINARY in
                       php) http_server_string='php -S localhost:' ;;
                   python3) http_server_string='python3 -m http.server '
                esac
                echo "## local module server$minified"
                tools/minify "blocks/module_server" | ${X[sed]} "s/__http_server__/$http_server_string/"
            fi
            ;;
        general)
            echo "## general$minified"
            tools/minify "blocks/general"
            ;;
        module_loader)
            echo "## include bashmodules$minified ->"
            tools/minify "blocks/module_loader"
            ;;
        module_integrity)
            echo "# check module integrity and remove tainted modules$minified"
            tools/minify "blocks/module_integrity"
            echo '## <- include bashmodules end #'
            ;;
        nextcloud_updater)
            echo "## nextcloud updater$minified ->"
            tools/minify "blocks/nextcloud_updater"
            echo '## <- nextcloud updater end #'
            ;;
        used_binaries)
            local -a ub
            source <(${X[tail]} -n +14 modules/httpd)
            mapfile -t ub< <((${X[grep]} -Roh 'X\[[^]]\+\]' | ${X[sed]} 's/X\[//;s/\]//;s/^xmls$/xmlstarlet/;s/^\(env\|gawk\|sed\|add-apt-repository\)$//' | ${X[grep]} -v '\$'; p_nosort "${!HTTPD[@]}") | ${X[sort]} -u)
            echo "    used_binaries=(${ub[@]})" | ${X[sed]} 's/( /(/'
    esac
}
placeholder_replace "$placeholder" "$name" $epoch "$channel"

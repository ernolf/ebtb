#!/bin/bash

# whoami, whereami
# b=basename m=me a=absolute p=path ca=canonical
declare bm apm me ca_me ca_dir
bm="$(basename "$0")";apm="$(cd "$(dirname "$0")"&&pwd)/$bm"
[ "$(command -v "$bm")" = "$apm" ]&&me="$bm"||me="$apm"
ca_me="$(readlink -e "$apm")";ca_dir="$(dirname "$ca_me")"

cd "$ca_dir/.."

# Ensure we have the correct number of arguments
if [[ "$#" -lt 2 ]]; then
    echo "Usage: $0 <input_module> <output_module>"
    exit 1
fi

# Ensure that the first argument exists
if ! [ -f "$1" ]; then
    echo "\"$1\" does not exist"
    echo "Usage: $0 <input_module> <output_module>"
    exit 1
fi

# Source the configure file
source config/configure
# Source the secrets configure file if exists
[ -f config/secrets ] && source config/secrets
# Source the placeholders file
source config/placeholders
# source sed functions
source <(tail -n +10 modules/sed)

# Declare variables
declare input_module output_module modulename tempfile placeholder placeholder_pattern
# Assign the arguments to variables
input_module="$1" output_module="$2"

modulename=${input_module#$MODULES_DIR/}

# copy the input module to the output module
cp "$input_module" $output_module

for i in $(seq 0 9); do
    delx2yi "# TODO $i -->" "# TODO <-- $i" $output_module
done

delp2ei "# COMMENT -->" $output_module

tempfile=$(mktemp)

# Replace placeholders with their actual contents
for placeholder in "${placeholders[@]}"; do
    placeholder_pattern="__${placeholder}__"
    awk '/'$placeholder_pattern'/ { system("tools/placeholders-replace '$placeholder' '$modulename'"); next } 1' $output_module > $tempfile
    cat $tempfile > $output_module
done

rm -f $tempfile

exit 0


#!/bin/bash

# Ensure we have the correct number of arguments
if [[ "$#" -lt 2 ]]; then
    echo "Usage: $0 <input_module> <output_module>"
    exit 1
fi

# Ensure that the first argument is an existing file
if ! [ -f "$1" ]; then
    echo "\"$1\" does not exist"
    echo "Usage: $0 <input_module> <output_module>"
    exit 1
fi

# whoami, whereami
# b=basename m=me a=absolute p=path ca=canonical
declare bm apm me ca_me ca_dir
bm="$(basename "$0")"; apm="$(cd "$(dirname "$0")" && pwd)/$bm"
[ "$(command -v "$bm")" = "$apm" ] && me="$bm" || me="$apm"
ca_me="$(readlink -e "$apm")"; ca_dir="$(dirname "$ca_me")"

cd "$ca_dir/.."

# source common functions
source tools/common_build_functions
# Source the time
source config/runtime

# Declare variables
declare input_module output_module modulename tempfile placeholder placeholder_pattern
declare -i i
# Assign the arguments to variables
input_module="$1" output_module="$2"
modulename="${input_module#$MODULES/}"
tempfile=$(${X[mktemp]})

if [ -n "$EXCLUDE_SUFIXES" ]; then
    exclude_regex="${EXCLUDE_SUFIXES// /|}"
#    if [[ "$modulename" =~ (${exclude_regex//./\\.}) ]]; then
    if echo "$modulename" | ${X[grep]} -Eiqsw "^.*(${exclude_regex//./\\.})$"; then
        echo "* == skiping '$modulename' because of excluded sufix"
        exit 0
    fi
fi

# cat the input module into the tempfile
${X[cat]} "$input_module" > "$tempfile"
strip_ "$tempfile"
if [[ ${MINIFY:-false} && "$(${X[head]} -n1 "$input_module")" == '__minified_bashlib__' ]]; then
    (   echo "# BASHLIB (minified)"
        echo "# @channel@/$modulename"
        echo "# version $epoch"
        minify "$tempfile" 10
    ) > "$output_module"
else
    replace_placeholders_ "$tempfile" "$output_module" "$modulename" $epoch
fi
${X[rm]} -f "$tempfile"

exit 0


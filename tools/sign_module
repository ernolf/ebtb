#!/bin/bash

declare -A bool
bool[debug]=false
bool[verbose]=false

# whoami, whereami
# b=basename m=me a=absolute p=path ca=canonical
declare bm apm me ca_me ca_dir
bm="$(basename "$0")"; apm="$(cd "$(dirname "$0")" && pwd)/$bm"
[ "$(command -v "$bm")" = "$apm" ] && me="$bm" || me="$apm"
ca_me="$(readlink -e "$apm")"; ca_dir="$(dirname "$ca_me")"

cd "$ca_dir/.."

bool[yes]=false bool[all]=false bool[test2]=false
declare channel arg
declare -a args
for arg in "$@";do
    case "$arg" in
        -t2t|-t2test|--test2t|--test2test)
            bool[test2]=true bool[yes]=true bool[all]=true channel=test
            ;;
        -t2p|-t2prod|--test2p|--test2prod)
            bool[test2]=true bool[yes]=true bool[all]=true channel=prod
            ;;
        -t|--test)
            channel=test
            ;;
        -p|--prod)
            channel=prod
            ;;
        -y|--yes)
            bool[yes]=true
            ;;
        -a|--all|all)
            bool[all]=true
            ;;
        *)
            args+=("$arg")
            ;;
    esac
done
set -- "${args[@]}" && unset -v arg args

# Source the configure file
source config/configure
# Source the secrets configure file if exists
if [ -f config/secrets ]; then
    source config/secrets
elif ! $LOCAL_SERVER; then
    echo "Could not find config/secrets file while 'LOCAL_SERVER' is not set to 'true' in"
    echo "config/configure file. This ain't gonna work."
    echo "error"
    exit 1
fi
# Source the placeholders file
source config/placeholders
source <(${X[tail]} -n +10 modules/anykey)

${bool[verbose]} && bool[yes]=false

declare dir1_source dir2_dest
dir1_source="$MBUILD_DIR"
if $LOCAL_SERVER; then
    dir2_dest="$LOCAL_SERVER_DIRECTORY/$MODULES_DIR/${channel:?missing argument! (either -t2t|--test2test, -t2p|--test2prod, -t|--test or -p|--prod)}"
else
    dir2_dest="$DATA_DIR/$target_modules_dir/${channel:?missing argument! (either -t2t|--test2test, -t2p|--test2prod, -t|--test or -p|--prod)}"
fi

epoch_(){ ${X[gawk]} '/^# version 20/ {print $NF}' "$1"; }

version_sufix(){ ${X[sed]} -ne '/^# version 20/ s/:/./g' -e '/^# version 20/ s/ /_/g' -e '/^#_version_20/ s/#_version_/~/p' "$1"; }

occ(){ ${X[sudo]} -u $HT_USER -E ${X[php]} -f "$NC_DIR/occ" "$@"; }

sign_(){
#${bool[debug]} && set -x
    local library lib libname libdir target_dir target
    library="$1" lib="$dir1_source/$1" libname="$(${X[basename]} "$1")" libdir="$(${X[dirname]} "$1")"
    [ "$libdir" = '.' ] && libdir=''
    target_dir="$dir2_dest/$libdir"
    target="${target_dir%/}/$libname"
    ${bool[debug]} && anykey
    if ${bool[yes]}; then
        echo "  - $libname"
    else
        local -l key
        echo -n "Enter [y] if you are ready to copy and sign $libname, [q] to quit "
        while true; do read -rsn 1 key
            case "$key" in
                q)  echo; exit 0 ;;
                y)  echo; break  ;;
                *)  echo -en "\n\"$key\" is not a valid entry. Enter [y] if you are ready to copy, [q] to quit "
            esac
        done
    fi
    # create target_dir
    [ -d "${target_dir%/}" ] || ${X[mkdir]} -p "${target_dir%/}"
    # write lib with adapted path to target
    if [ "${channel:-test}" = 'test' ]; then
        ${X[cp]} -a "$lib" "$target"
    else
        ${X[sed]} "s#$INCLUDEDIR/test/#$MODULEDIR/#" "$lib" > "$target"
    fi
    echo "    target: \"$target\""
    ${bool[debug]} && anykey
    # sign lib if not local server
    $LOCAL_SERVER || ${X[gpg]} --yes --default-key $OpenPGP_Key --armor --detach-sign "$target"
    # create for json file
    epoch=$(epoch_ "$lib")
    hash=$(${X[sha256sum]} "$target" | ${X[gawk]} '{printf $1}')
    echo "$hash $libname" > "$target.sha256"
    # create json object without "size"
    ${X[jq]} -n --compact-output --arg libname "$library" --arg epoch "$epoch" --arg hash "$hash" '{ name: $libname, etag: $epoch, hash: $hash }' > "$target.json"
    return 0
}

scan_(){
    # create modules.json with epoch
    ${X[find]} $dir2_dest -type f -name "*.json" -exec ${X[jq]}  --compact-output --slurp '
        . | { "etag": "'$epoch'", "modules": . }' {} + > $dir2_dest/modules.json

    $LOCAL_SERVER && { echo "Local server, nothing to scan"; return 0; }

    ${X[chown]} -R $HT_USER:$HT_USER "${dir2_dest%/*}"
    occ files:scan --path="$target_modules_dir/$channel"
    return 0
}

bulk_(){
    local libname
#    for libname in $(find $dir1_source -type f -exec sh -c 'head -n 1 "$1" | grep -qs "# BASHLIB"' _ {} \; -print); do
    ${X[find]} $dir1_source -type f -exec sh -c 'head -n 1 "$1" | grep -q BASHLIB' _ {} \; -print | while read -r libname; do
        sign_ "${libname#$dir1_source/}"
    done
}

check_if_dir_exists(){
    if [ -d "$(${X[dirname]} "$1")" ]; then
        echo "    - dir \"$(${X[dirname]} "$1")\" exists"
    else
        echo "    - dir \"$(${X[dirname]} "$1")\" does not exist"
        echo "      create dir \"$(${X[dirname]} "$1")\""
        ${X[mkdir]} -p $(${X[dirname]} "$1")
    fi
}

test_2_(){
    local backupdir libname lib backupsufix
    local -a difflibs
    backupdir="$(${X[dirname]} $ca_dir)~backups/modules/$channel"
    mapfile -t difflibs< <(tools/compare_modules "test" "$channel")
    if (( ${#difflibs[@]} )); then
        [ -d "$backupdir" ] || ${X[mkdir]} -p "$backupdir"
        echo "  \${#difflibs[@]} = ${#difflibs[@]}"
        for libname in ${difflibs[@]}; do
            echo "  - $libname"
            lib="$dir2_dest/$libname"
            if [ -f "$lib" ]; then
                # backupsufix="$(date -d @$(stat -c %Y "$lib") "+~%F-%H%M")"
                backupsufix="$(version_sufix "$lib")"
                check_if_dir_exists "$backupdir/$libname$backupsufix"
                echo "    copy \"$lib\" to \"$backupdir/$libname$backupsufix\""
                ${X[cp]} -a "$lib" "$backupdir/$libname$backupsufix"
            else
                echo "    \"$lib\" does not exist."
                check_if_dir_exists "$lib"
            fi
            ${bool[debug]} && anykey
            sign_ $libname
        done
        scan_
    else
        echo "  no different libs. exiting script."
    fi
    echo
    exit 0
}

echo
echo "  debug = ${bool[debug]} - yes = ${bool[yes]} - all = ${bool[all]} - channel = $channel"
${bool[all]} || echo "  libs to sign = $@"
echo -n "  OpenPGP_Key = "
$LOCAL_SERVER && echo "(local server, no signing)" || echo "$OpenPGP_Key"
echo "  source directory      = $dir1_source"
echo "  destination directory = $dir2_dest"
echo
echo "  continue only if everything looks good here!"
echo
anykey
echo
${bool[test2]} && test_2_

if ${bool[all]}; then
    bulk_
else
    (( $# )) && {
        echo "  signing this libraries"
        echo "  - $@"
        anykey
    } || {
        echo "  no libraries past to sign"
        exit 1
    }
    for library in "$@"; do
        sign_ "$library"
    done
fi
${bool[yes]} && echo "  scan files" || echo "  ready to scan?"
${bool[yes]} || anykey
scan_

exit 0

